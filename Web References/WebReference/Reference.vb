'------------------------------------------------------------------------------
' <auto-generated>
'     這段程式碼是由工具產生的。
'     執行階段版本:4.0.30319.18444
'
'     對這個檔案所做的變更可能會造成錯誤的行為，而且如果重新產生程式碼，
'     變更將會遺失。
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.ComponentModel
Imports System.Data
Imports System.Diagnostics
Imports System.Web.Services
Imports System.Web.Services.Protocols
Imports System.Xml.Serialization

'
'原始程式碼已由 Microsoft.VSDesigner 自動產生，版本 4.0.30319.18444。
'
Namespace WebReference
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Web.Services.WebServiceBindingAttribute(Name:="InfoCenterWebServiceSoap", [Namespace]:="http://tempuri.org/")>  _
    Partial Public Class InfoCenterWebService
        Inherits System.Web.Services.Protocols.SoapHttpClientProtocol
        
        Private GetDRSFilePathOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetUserGroupByIDOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetUserListByGroupIDOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SetUserGroupOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SetUserIntoGroupOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SetUserRemoveGroupOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateGroupOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteGroupByIDOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteGroupByNameOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetUserAccountAllOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetUserAccountAllHaveGroupOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetUserAccountOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateUserAccountOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateUserAccountHaveGroupOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteUserAccountOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SetUserAccountOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SetUserAccountHaveGroupOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetCurrentVerOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateProcessInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetUnioninsCustomerTitleOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetCustomerIDListOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ChkIndemOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddRecordOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetTri_Hospital_CustomerExistOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetTri_Hospital_ScheduleOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetTri_Hospital_RegOperationCompleted As System.Threading.SendOrPostCallback
        
        Private OutPreViewOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetTestOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetWebServiceMethodOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetWebServiceDataOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetBlackCustomerListOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SetBlackCustomerListOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteBlackCustomerListOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateBlackCustomerListOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetWaitListOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SetWaitListOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteWaitListOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateWaitListOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetSMemoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetSMemoAllOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateSMemoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SetSMemoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetBulletinWebOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SetBulletinWebOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteBulletinWebOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateBulletinWebOperationCompleted As System.Threading.SendOrPostCallback
        
        Private QueryWebDataPasteOperationCompleted As System.Threading.SendOrPostCallback
        
        Private QueryWebDataPasteByIDOperationCompleted As System.Threading.SendOrPostCallback
        
        Private QueryWebDataPasteByURLOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddWebDataPasteOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ModifyWebDataPasteBaseOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ModifyWebDataPasteDataLinkOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteWebDataPasteOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetHondaDataOperationCompleted As System.Threading.SendOrPostCallback
        
        Private Insert_IVR_ReportOperationCompleted As System.Threading.SendOrPostCallback
        
        Private Insert_IVR_Report_V2OperationCompleted As System.Threading.SendOrPostCallback
        
        Private Insert_IVR_Report_V4OperationCompleted As System.Threading.SendOrPostCallback
        
        Private Insert_IVR_Report_V3OperationCompleted As System.Threading.SendOrPostCallback
        
        Private Insert_IVR_Report_V5OperationCompleted As System.Threading.SendOrPostCallback
        
        Private Find_IVR_Report_By_PIDOperationCompleted As System.Threading.SendOrPostCallback
        
        Private Check_IVR_Report_TableOperationCompleted As System.Threading.SendOrPostCallback
        
        Private Get_IVR_CalCOuntOperationCompleted As System.Threading.SendOrPostCallback
        
        Private Insert_InfoFOD_CRM_Activity_InfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private Update_InfoFOD_CRM_Activity_InfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetFaxRecOperationCompleted As System.Threading.SendOrPostCallback
        
        Private InsetFaxRecOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateFaxRecOperationCompleted As System.Threading.SendOrPostCallback
        
        Private Insert_Content_ReportOperationCompleted As System.Threading.SendOrPostCallback
        
        Private Check_Content_Report_TableOperationCompleted As System.Threading.SendOrPostCallback
        
        Private Insert_EmployeeMappingOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetEmployeeMappingOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetOutsourcingFlagOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SetOutsourcingFlagOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SetOutsourcingLogOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetOutsourcingDefineOperationCompleted As System.Threading.SendOrPostCallback
        
        Private InfoCenter_ExecSQLOperationCompleted As System.Threading.SendOrPostCallback
        
        Private InfoCenter_GetDatasetBySQLOperationCompleted As System.Threading.SendOrPostCallback
        
        Private InfoDRS_ExecSQLOperationCompleted As System.Threading.SendOrPostCallback
        
        Private InfoDRS_GetDatasetBySQLOperationCompleted As System.Threading.SendOrPostCallback
        
        Private Get_1TV_OutBound_DataOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetQuestionCountOperationCompleted As System.Threading.SendOrPostCallback
        
        Private InfoACD_GetDatasetBySQLOperationCompleted As System.Threading.SendOrPostCallback
        
        Private InfoCenter_GetReasonListOperationCompleted As System.Threading.SendOrPostCallback
        
        Private InfoInBox_ExecSQLOperationCompleted As System.Threading.SendOrPostCallback
        
        Private InfoInBox_GetDatasetBySQLOperationCompleted As System.Threading.SendOrPostCallback
        
        Private InfoTM_ExecSQLOperationCompleted As System.Threading.SendOrPostCallback
        
        Private InfoTM_GetDatasetBySQLOperationCompleted As System.Threading.SendOrPostCallback
        
        Private InfoTM_GetDatasetOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CreateCookiesOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ClearCookiesOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetCookiesOperationCompleted As System.Threading.SendOrPostCallback
        
        Private Incenter_GetDatasetBySQLOperationCompleted As System.Threading.SendOrPostCallback
        
        Private First_GetCustomer_BranchOperationCompleted As System.Threading.SendOrPostCallback
        
        Private First_GetStatusOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetStatus_AllOperationCompleted As System.Threading.SendOrPostCallback
        
        Private First_InsertInboundOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetCallInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteCallInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetMuitCallInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetTalkInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetTalkInfo_V2OperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetTalkConfigOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SetTalkInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateTalkInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteTalkInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SetTalkConfigOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateTalkConfigOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteTalkConfigOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetDetailCusDataOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetSelectCusDataOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetSelectCusData_V2OperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetActivityDataListOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetActivityDataList_V2OperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetActivityDataListAllOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetACDGroupsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetACDGroups_V2OperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetACDGroups_V3OperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetSysConfigOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SetSysConfigOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateSysConfigOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SetCallInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ReSetCallInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetNewIDOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateCallInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetCallLogOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetCallLogByDatakeyOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetCallLogByPhoneOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetCallLogByTKIDOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetCallLogByTKID_V2OperationCompleted As System.Threading.SendOrPostCallback
        
        Private SetCallLog_V3OperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateCallLogOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateCallLog_V3OperationCompleted As System.Threading.SendOrPostCallback
        
        Private Eten_GetCusData_ByPIDOperationCompleted As System.Threading.SendOrPostCallback
        
        Private Eten_GetCusData_ByCusIDOperationCompleted As System.Threading.SendOrPostCallback
        
        Private Eten_GetDatasetBySQLOperationCompleted As System.Threading.SendOrPostCallback
        
        Private Eten_ExecSQLOperationCompleted As System.Threading.SendOrPostCallback
        
        Private Eten_ExecSPOperationCompleted As System.Threading.SendOrPostCallback
        
        Private Eten_GetProductData_ByCusIDOperationCompleted As System.Threading.SendOrPostCallback
        
        Private Eten_GetLog_ByProductIDOperationCompleted As System.Threading.SendOrPostCallback
        
        Private Eten_GetLog_ByCusIDOperationCompleted As System.Threading.SendOrPostCallback
        
        Private Eten_GetLog_ByOldDataOperationCompleted As System.Threading.SendOrPostCallback
        
        Private Eten_GetAccounting_DetailOperationCompleted As System.Threading.SendOrPostCallback
        
        Private Eten_GetAccounting_ListOperationCompleted As System.Threading.SendOrPostCallback
        
        Private Eten_GetLastTransactionOperationCompleted As System.Threading.SendOrPostCallback
        
        Private Eten_GetProductTypeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private Eten_GetAgentMappingOperationCompleted As System.Threading.SendOrPostCallback
        
        Private Eten_GetCalllogOperationCompleted As System.Threading.SendOrPostCallback
        
        Private Eten_UpdateCusTableOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SetCallLog_etenOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateCallLog_etenOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteCallLogOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SetCallLog_V2OperationCompleted As System.Threading.SendOrPostCallback
        
        Private SetCallLogOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SetCallLog_TKOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SetCallLog_TK_V2OperationCompleted As System.Threading.SendOrPostCallback
        
        Private SetCallLog_TK_V4OperationCompleted As System.Threading.SendOrPostCallback
        
        Private SetCallLog_TK_V3OperationCompleted As System.Threading.SendOrPostCallback
        
        Private SetCallLog_TK_AlertMemoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SetCallLog_TK_AlertMemo2OperationCompleted As System.Threading.SendOrPostCallback
        
        Private SetCallLog_TK_AlertMemo_URLOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetAllTableOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CheckInfoCenterTableOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetAllcolumns_V2OperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetAllcolumnsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CreateCustTypeViewOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetDataCountOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetInfoContantOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetLinkValueOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SetInfoContantOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateInfoContantOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteInfoContantOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetViewAllColumnsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetSMsgOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SetSMsgOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateSMsgOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetMsgOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteSMsgOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SetMsgOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateMsgOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateMsgSortOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteMsgOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetSMemo_V2OperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetCustomerLevelBaseOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetCustomerLevelOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetCustomerDataOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetCustomerLevelTSMCOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SetBulletinOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateBulletinOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SendBulletinOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetBulletinOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteBulletinOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateACDGroupsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SetACDGroupsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteACDGroupsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteACDGroups_V2OperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateActivityDataOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SetActivityDataOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteActivityDataOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteActivityData_V2OperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateSysFunctionConfigOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetSysFunctionConfigOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetSysTimeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetACDGroupHavePilotOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetAgentConsoleParameterOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetAgentConsoleParameter_V2OperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateAgentConsoleParameterOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SetIVRActiveLogOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetMenuListByGroupIDsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetGroupListByUserIDOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetMenuListOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SetSecuritySettingOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetSecuritySettingOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteSecuritySettingOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetUserGroupAllOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetUserGroupByNameOperationCompleted As System.Threading.SendOrPostCallback
        
        Private useDefaultCredentialsSetExplicitly As Boolean
        
        '''<remarks/>
        Public Sub New()
            MyBase.New
            Me.Url = Global.WindowsApplicationForTestAgentconsole.My.MySettings.Default.WindowsApplicationForTestAgentconsole_WebReference_InfoCenterWebService
            If (Me.IsLocalFileSystemWebService(Me.Url) = true) Then
                Me.UseDefaultCredentials = true
                Me.useDefaultCredentialsSetExplicitly = false
            Else
                Me.useDefaultCredentialsSetExplicitly = true
            End If
        End Sub
        
        Public Shadows Property Url() As String
            Get
                Return MyBase.Url
            End Get
            Set
                If (((Me.IsLocalFileSystemWebService(MyBase.Url) = true)  _
                            AndAlso (Me.useDefaultCredentialsSetExplicitly = false))  _
                            AndAlso (Me.IsLocalFileSystemWebService(value) = false)) Then
                    MyBase.UseDefaultCredentials = false
                End If
                MyBase.Url = value
            End Set
        End Property
        
        Public Shadows Property UseDefaultCredentials() As Boolean
            Get
                Return MyBase.UseDefaultCredentials
            End Get
            Set
                MyBase.UseDefaultCredentials = value
                Me.useDefaultCredentialsSetExplicitly = true
            End Set
        End Property
        
        '''<remarks/>
        Public Event GetDRSFilePathCompleted As GetDRSFilePathCompletedEventHandler
        
        '''<remarks/>
        Public Event GetUserGroupByIDCompleted As GetUserGroupByIDCompletedEventHandler
        
        '''<remarks/>
        Public Event GetUserListByGroupIDCompleted As GetUserListByGroupIDCompletedEventHandler
        
        '''<remarks/>
        Public Event SetUserGroupCompleted As SetUserGroupCompletedEventHandler
        
        '''<remarks/>
        Public Event SetUserIntoGroupCompleted As SetUserIntoGroupCompletedEventHandler
        
        '''<remarks/>
        Public Event SetUserRemoveGroupCompleted As SetUserRemoveGroupCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateGroupCompleted As UpdateGroupCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteGroupByIDCompleted As DeleteGroupByIDCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteGroupByNameCompleted As DeleteGroupByNameCompletedEventHandler
        
        '''<remarks/>
        Public Event GetUserAccountAllCompleted As GetUserAccountAllCompletedEventHandler
        
        '''<remarks/>
        Public Event GetUserAccountAllHaveGroupCompleted As GetUserAccountAllHaveGroupCompletedEventHandler
        
        '''<remarks/>
        Public Event GetUserAccountCompleted As GetUserAccountCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateUserAccountCompleted As UpdateUserAccountCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateUserAccountHaveGroupCompleted As UpdateUserAccountHaveGroupCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteUserAccountCompleted As DeleteUserAccountCompletedEventHandler
        
        '''<remarks/>
        Public Event SetUserAccountCompleted As SetUserAccountCompletedEventHandler
        
        '''<remarks/>
        Public Event SetUserAccountHaveGroupCompleted As SetUserAccountHaveGroupCompletedEventHandler
        
        '''<remarks/>
        Public Event GetCurrentVerCompleted As GetCurrentVerCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateProcessInfoCompleted As UpdateProcessInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event GetUnioninsCustomerTitleCompleted As GetUnioninsCustomerTitleCompletedEventHandler
        
        '''<remarks/>
        Public Event GetCustomerIDListCompleted As GetCustomerIDListCompletedEventHandler
        
        '''<remarks/>
        Public Event ChkIndemCompleted As ChkIndemCompletedEventHandler
        
        '''<remarks/>
        Public Event AddRecordCompleted As AddRecordCompletedEventHandler
        
        '''<remarks/>
        Public Event GetTri_Hospital_CustomerExistCompleted As GetTri_Hospital_CustomerExistCompletedEventHandler
        
        '''<remarks/>
        Public Event GetTri_Hospital_ScheduleCompleted As GetTri_Hospital_ScheduleCompletedEventHandler
        
        '''<remarks/>
        Public Event GetTri_Hospital_RegCompleted As GetTri_Hospital_RegCompletedEventHandler
        
        '''<remarks/>
        Public Event OutPreViewCompleted As OutPreViewCompletedEventHandler
        
        '''<remarks/>
        Public Event GetTestCompleted As GetTestCompletedEventHandler
        
        '''<remarks/>
        Public Event GetWebServiceMethodCompleted As GetWebServiceMethodCompletedEventHandler
        
        '''<remarks/>
        Public Event GetWebServiceDataCompleted As GetWebServiceDataCompletedEventHandler
        
        '''<remarks/>
        Public Event GetBlackCustomerListCompleted As GetBlackCustomerListCompletedEventHandler
        
        '''<remarks/>
        Public Event SetBlackCustomerListCompleted As SetBlackCustomerListCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteBlackCustomerListCompleted As DeleteBlackCustomerListCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateBlackCustomerListCompleted As UpdateBlackCustomerListCompletedEventHandler
        
        '''<remarks/>
        Public Event GetWaitListCompleted As GetWaitListCompletedEventHandler
        
        '''<remarks/>
        Public Event SetWaitListCompleted As SetWaitListCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteWaitListCompleted As DeleteWaitListCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateWaitListCompleted As UpdateWaitListCompletedEventHandler
        
        '''<remarks/>
        Public Event GetSMemoCompleted As GetSMemoCompletedEventHandler
        
        '''<remarks/>
        Public Event GetSMemoAllCompleted As GetSMemoAllCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateSMemoCompleted As UpdateSMemoCompletedEventHandler
        
        '''<remarks/>
        Public Event SetSMemoCompleted As SetSMemoCompletedEventHandler
        
        '''<remarks/>
        Public Event GetBulletinWebCompleted As GetBulletinWebCompletedEventHandler
        
        '''<remarks/>
        Public Event SetBulletinWebCompleted As SetBulletinWebCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteBulletinWebCompleted As DeleteBulletinWebCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateBulletinWebCompleted As UpdateBulletinWebCompletedEventHandler
        
        '''<remarks/>
        Public Event QueryWebDataPasteCompleted As QueryWebDataPasteCompletedEventHandler
        
        '''<remarks/>
        Public Event QueryWebDataPasteByIDCompleted As QueryWebDataPasteByIDCompletedEventHandler
        
        '''<remarks/>
        Public Event QueryWebDataPasteByURLCompleted As QueryWebDataPasteByURLCompletedEventHandler
        
        '''<remarks/>
        Public Event AddWebDataPasteCompleted As AddWebDataPasteCompletedEventHandler
        
        '''<remarks/>
        Public Event ModifyWebDataPasteBaseCompleted As ModifyWebDataPasteBaseCompletedEventHandler
        
        '''<remarks/>
        Public Event ModifyWebDataPasteDataLinkCompleted As ModifyWebDataPasteDataLinkCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteWebDataPasteCompleted As DeleteWebDataPasteCompletedEventHandler
        
        '''<remarks/>
        Public Event GetHondaDataCompleted As GetHondaDataCompletedEventHandler
        
        '''<remarks/>
        Public Event Insert_IVR_ReportCompleted As Insert_IVR_ReportCompletedEventHandler
        
        '''<remarks/>
        Public Event Insert_IVR_Report_V2Completed As Insert_IVR_Report_V2CompletedEventHandler
        
        '''<remarks/>
        Public Event Insert_IVR_Report_V4Completed As Insert_IVR_Report_V4CompletedEventHandler
        
        '''<remarks/>
        Public Event Insert_IVR_Report_V3Completed As Insert_IVR_Report_V3CompletedEventHandler
        
        '''<remarks/>
        Public Event Insert_IVR_Report_V5Completed As Insert_IVR_Report_V5CompletedEventHandler
        
        '''<remarks/>
        Public Event Find_IVR_Report_By_PIDCompleted As Find_IVR_Report_By_PIDCompletedEventHandler
        
        '''<remarks/>
        Public Event Check_IVR_Report_TableCompleted As Check_IVR_Report_TableCompletedEventHandler
        
        '''<remarks/>
        Public Event Get_IVR_CalCOuntCompleted As Get_IVR_CalCOuntCompletedEventHandler
        
        '''<remarks/>
        Public Event Insert_InfoFOD_CRM_Activity_InfoCompleted As Insert_InfoFOD_CRM_Activity_InfoCompletedEventHandler
        
        '''<remarks/>
        Public Event Update_InfoFOD_CRM_Activity_InfoCompleted As Update_InfoFOD_CRM_Activity_InfoCompletedEventHandler
        
        '''<remarks/>
        Public Event GetFaxRecCompleted As GetFaxRecCompletedEventHandler
        
        '''<remarks/>
        Public Event InsetFaxRecCompleted As InsetFaxRecCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateFaxRecCompleted As UpdateFaxRecCompletedEventHandler
        
        '''<remarks/>
        Public Event Insert_Content_ReportCompleted As Insert_Content_ReportCompletedEventHandler
        
        '''<remarks/>
        Public Event Check_Content_Report_TableCompleted As Check_Content_Report_TableCompletedEventHandler
        
        '''<remarks/>
        Public Event Insert_EmployeeMappingCompleted As Insert_EmployeeMappingCompletedEventHandler
        
        '''<remarks/>
        Public Event GetEmployeeMappingCompleted As GetEmployeeMappingCompletedEventHandler
        
        '''<remarks/>
        Public Event GetOutsourcingFlagCompleted As GetOutsourcingFlagCompletedEventHandler
        
        '''<remarks/>
        Public Event SetOutsourcingFlagCompleted As SetOutsourcingFlagCompletedEventHandler
        
        '''<remarks/>
        Public Event SetOutsourcingLogCompleted As SetOutsourcingLogCompletedEventHandler
        
        '''<remarks/>
        Public Event GetOutsourcingDefineCompleted As GetOutsourcingDefineCompletedEventHandler
        
        '''<remarks/>
        Public Event InfoCenter_ExecSQLCompleted As InfoCenter_ExecSQLCompletedEventHandler
        
        '''<remarks/>
        Public Event InfoCenter_GetDatasetBySQLCompleted As InfoCenter_GetDatasetBySQLCompletedEventHandler
        
        '''<remarks/>
        Public Event InfoDRS_ExecSQLCompleted As InfoDRS_ExecSQLCompletedEventHandler
        
        '''<remarks/>
        Public Event InfoDRS_GetDatasetBySQLCompleted As InfoDRS_GetDatasetBySQLCompletedEventHandler
        
        '''<remarks/>
        Public Event Get_1TV_OutBound_DataCompleted As Get_1TV_OutBound_DataCompletedEventHandler
        
        '''<remarks/>
        Public Event GetQuestionCountCompleted As GetQuestionCountCompletedEventHandler
        
        '''<remarks/>
        Public Event InfoACD_GetDatasetBySQLCompleted As InfoACD_GetDatasetBySQLCompletedEventHandler
        
        '''<remarks/>
        Public Event InfoCenter_GetReasonListCompleted As InfoCenter_GetReasonListCompletedEventHandler
        
        '''<remarks/>
        Public Event InfoInBox_ExecSQLCompleted As InfoInBox_ExecSQLCompletedEventHandler
        
        '''<remarks/>
        Public Event InfoInBox_GetDatasetBySQLCompleted As InfoInBox_GetDatasetBySQLCompletedEventHandler
        
        '''<remarks/>
        Public Event InfoTM_ExecSQLCompleted As InfoTM_ExecSQLCompletedEventHandler
        
        '''<remarks/>
        Public Event InfoTM_GetDatasetBySQLCompleted As InfoTM_GetDatasetBySQLCompletedEventHandler
        
        '''<remarks/>
        Public Event InfoTM_GetDatasetCompleted As InfoTM_GetDatasetCompletedEventHandler
        
        '''<remarks/>
        Public Event CreateCookiesCompleted As CreateCookiesCompletedEventHandler
        
        '''<remarks/>
        Public Event ClearCookiesCompleted As ClearCookiesCompletedEventHandler
        
        '''<remarks/>
        Public Event GetCookiesCompleted As GetCookiesCompletedEventHandler
        
        '''<remarks/>
        Public Event Incenter_GetDatasetBySQLCompleted As Incenter_GetDatasetBySQLCompletedEventHandler
        
        '''<remarks/>
        Public Event First_GetCustomer_BranchCompleted As First_GetCustomer_BranchCompletedEventHandler
        
        '''<remarks/>
        Public Event First_GetStatusCompleted As First_GetStatusCompletedEventHandler
        
        '''<remarks/>
        Public Event GetStatus_AllCompleted As GetStatus_AllCompletedEventHandler
        
        '''<remarks/>
        Public Event First_InsertInboundCompleted As First_InsertInboundCompletedEventHandler
        
        '''<remarks/>
        Public Event GetCallInfoCompleted As GetCallInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteCallInfoCompleted As DeleteCallInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event GetMuitCallInfoCompleted As GetMuitCallInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event GetTalkInfoCompleted As GetTalkInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event GetTalkInfo_V2Completed As GetTalkInfo_V2CompletedEventHandler
        
        '''<remarks/>
        Public Event GetTalkConfigCompleted As GetTalkConfigCompletedEventHandler
        
        '''<remarks/>
        Public Event SetTalkInfoCompleted As SetTalkInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateTalkInfoCompleted As UpdateTalkInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteTalkInfoCompleted As DeleteTalkInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event SetTalkConfigCompleted As SetTalkConfigCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateTalkConfigCompleted As UpdateTalkConfigCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteTalkConfigCompleted As DeleteTalkConfigCompletedEventHandler
        
        '''<remarks/>
        Public Event GetDetailCusDataCompleted As GetDetailCusDataCompletedEventHandler
        
        '''<remarks/>
        Public Event GetSelectCusDataCompleted As GetSelectCusDataCompletedEventHandler
        
        '''<remarks/>
        Public Event GetSelectCusData_V2Completed As GetSelectCusData_V2CompletedEventHandler
        
        '''<remarks/>
        Public Event GetActivityDataListCompleted As GetActivityDataListCompletedEventHandler
        
        '''<remarks/>
        Public Event GetActivityDataList_V2Completed As GetActivityDataList_V2CompletedEventHandler
        
        '''<remarks/>
        Public Event GetActivityDataListAllCompleted As GetActivityDataListAllCompletedEventHandler
        
        '''<remarks/>
        Public Event GetACDGroupsCompleted As GetACDGroupsCompletedEventHandler
        
        '''<remarks/>
        Public Event GetACDGroups_V2Completed As GetACDGroups_V2CompletedEventHandler
        
        '''<remarks/>
        Public Event GetACDGroups_V3Completed As GetACDGroups_V3CompletedEventHandler
        
        '''<remarks/>
        Public Event GetSysConfigCompleted As GetSysConfigCompletedEventHandler
        
        '''<remarks/>
        Public Event SetSysConfigCompleted As SetSysConfigCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateSysConfigCompleted As UpdateSysConfigCompletedEventHandler
        
        '''<remarks/>
        Public Event SetCallInfoCompleted As SetCallInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event ReSetCallInfoCompleted As ReSetCallInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event GetNewIDCompleted As GetNewIDCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateCallInfoCompleted As UpdateCallInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event GetCallLogCompleted As GetCallLogCompletedEventHandler
        
        '''<remarks/>
        Public Event GetCallLogByDatakeyCompleted As GetCallLogByDatakeyCompletedEventHandler
        
        '''<remarks/>
        Public Event GetCallLogByPhoneCompleted As GetCallLogByPhoneCompletedEventHandler
        
        '''<remarks/>
        Public Event GetCallLogByTKIDCompleted As GetCallLogByTKIDCompletedEventHandler
        
        '''<remarks/>
        Public Event GetCallLogByTKID_V2Completed As GetCallLogByTKID_V2CompletedEventHandler
        
        '''<remarks/>
        Public Event SetCallLog_V3Completed As SetCallLog_V3CompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateCallLogCompleted As UpdateCallLogCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateCallLog_V3Completed As UpdateCallLog_V3CompletedEventHandler
        
        '''<remarks/>
        Public Event Eten_GetCusData_ByPIDCompleted As Eten_GetCusData_ByPIDCompletedEventHandler
        
        '''<remarks/>
        Public Event Eten_GetCusData_ByCusIDCompleted As Eten_GetCusData_ByCusIDCompletedEventHandler
        
        '''<remarks/>
        Public Event Eten_GetDatasetBySQLCompleted As Eten_GetDatasetBySQLCompletedEventHandler
        
        '''<remarks/>
        Public Event Eten_ExecSQLCompleted As Eten_ExecSQLCompletedEventHandler
        
        '''<remarks/>
        Public Event Eten_ExecSPCompleted As Eten_ExecSPCompletedEventHandler
        
        '''<remarks/>
        Public Event Eten_GetProductData_ByCusIDCompleted As Eten_GetProductData_ByCusIDCompletedEventHandler
        
        '''<remarks/>
        Public Event Eten_GetLog_ByProductIDCompleted As Eten_GetLog_ByProductIDCompletedEventHandler
        
        '''<remarks/>
        Public Event Eten_GetLog_ByCusIDCompleted As Eten_GetLog_ByCusIDCompletedEventHandler
        
        '''<remarks/>
        Public Event Eten_GetLog_ByOldDataCompleted As Eten_GetLog_ByOldDataCompletedEventHandler
        
        '''<remarks/>
        Public Event Eten_GetAccounting_DetailCompleted As Eten_GetAccounting_DetailCompletedEventHandler
        
        '''<remarks/>
        Public Event Eten_GetAccounting_ListCompleted As Eten_GetAccounting_ListCompletedEventHandler
        
        '''<remarks/>
        Public Event Eten_GetLastTransactionCompleted As Eten_GetLastTransactionCompletedEventHandler
        
        '''<remarks/>
        Public Event Eten_GetProductTypeCompleted As Eten_GetProductTypeCompletedEventHandler
        
        '''<remarks/>
        Public Event Eten_GetAgentMappingCompleted As Eten_GetAgentMappingCompletedEventHandler
        
        '''<remarks/>
        Public Event Eten_GetCalllogCompleted As Eten_GetCalllogCompletedEventHandler
        
        '''<remarks/>
        Public Event Eten_UpdateCusTableCompleted As Eten_UpdateCusTableCompletedEventHandler
        
        '''<remarks/>
        Public Event SetCallLog_etenCompleted As SetCallLog_etenCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateCallLog_etenCompleted As UpdateCallLog_etenCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteCallLogCompleted As DeleteCallLogCompletedEventHandler
        
        '''<remarks/>
        Public Event SetCallLog_V2Completed As SetCallLog_V2CompletedEventHandler
        
        '''<remarks/>
        Public Event SetCallLogCompleted As SetCallLogCompletedEventHandler
        
        '''<remarks/>
        Public Event SetCallLog_TKCompleted As SetCallLog_TKCompletedEventHandler
        
        '''<remarks/>
        Public Event SetCallLog_TK_V2Completed As SetCallLog_TK_V2CompletedEventHandler
        
        '''<remarks/>
        Public Event SetCallLog_TK_V4Completed As SetCallLog_TK_V4CompletedEventHandler
        
        '''<remarks/>
        Public Event SetCallLog_TK_V3Completed As SetCallLog_TK_V3CompletedEventHandler
        
        '''<remarks/>
        Public Event SetCallLog_TK_AlertMemoCompleted As SetCallLog_TK_AlertMemoCompletedEventHandler
        
        '''<remarks/>
        Public Event SetCallLog_TK_AlertMemo2Completed As SetCallLog_TK_AlertMemo2CompletedEventHandler
        
        '''<remarks/>
        Public Event SetCallLog_TK_AlertMemo_URLCompleted As SetCallLog_TK_AlertMemo_URLCompletedEventHandler
        
        '''<remarks/>
        Public Event GetAllTableCompleted As GetAllTableCompletedEventHandler
        
        '''<remarks/>
        Public Event CheckInfoCenterTableCompleted As CheckInfoCenterTableCompletedEventHandler
        
        '''<remarks/>
        Public Event GetAllcolumns_V2Completed As GetAllcolumns_V2CompletedEventHandler
        
        '''<remarks/>
        Public Event GetAllcolumnsCompleted As GetAllcolumnsCompletedEventHandler
        
        '''<remarks/>
        Public Event CreateCustTypeViewCompleted As CreateCustTypeViewCompletedEventHandler
        
        '''<remarks/>
        Public Event GetDataCountCompleted As GetDataCountCompletedEventHandler
        
        '''<remarks/>
        Public Event GetInfoContantCompleted As GetInfoContantCompletedEventHandler
        
        '''<remarks/>
        Public Event GetLinkValueCompleted As GetLinkValueCompletedEventHandler
        
        '''<remarks/>
        Public Event SetInfoContantCompleted As SetInfoContantCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateInfoContantCompleted As UpdateInfoContantCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteInfoContantCompleted As DeleteInfoContantCompletedEventHandler
        
        '''<remarks/>
        Public Event GetViewAllColumnsCompleted As GetViewAllColumnsCompletedEventHandler
        
        '''<remarks/>
        Public Event GetSMsgCompleted As GetSMsgCompletedEventHandler
        
        '''<remarks/>
        Public Event SetSMsgCompleted As SetSMsgCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateSMsgCompleted As UpdateSMsgCompletedEventHandler
        
        '''<remarks/>
        Public Event GetMsgCompleted As GetMsgCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteSMsgCompleted As DeleteSMsgCompletedEventHandler
        
        '''<remarks/>
        Public Event SetMsgCompleted As SetMsgCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateMsgCompleted As UpdateMsgCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateMsgSortCompleted As UpdateMsgSortCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteMsgCompleted As DeleteMsgCompletedEventHandler
        
        '''<remarks/>
        Public Event GetSMemo_V2Completed As GetSMemo_V2CompletedEventHandler
        
        '''<remarks/>
        Public Event GetCustomerLevelBaseCompleted As GetCustomerLevelBaseCompletedEventHandler
        
        '''<remarks/>
        Public Event GetCustomerLevelCompleted As GetCustomerLevelCompletedEventHandler
        
        '''<remarks/>
        Public Event GetCustomerDataCompleted As GetCustomerDataCompletedEventHandler
        
        '''<remarks/>
        Public Event GetCustomerLevelTSMCCompleted As GetCustomerLevelTSMCCompletedEventHandler
        
        '''<remarks/>
        Public Event SetBulletinCompleted As SetBulletinCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateBulletinCompleted As UpdateBulletinCompletedEventHandler
        
        '''<remarks/>
        Public Event SendBulletinCompleted As SendBulletinCompletedEventHandler
        
        '''<remarks/>
        Public Event GetBulletinCompleted As GetBulletinCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteBulletinCompleted As DeleteBulletinCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateACDGroupsCompleted As UpdateACDGroupsCompletedEventHandler
        
        '''<remarks/>
        Public Event SetACDGroupsCompleted As SetACDGroupsCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteACDGroupsCompleted As DeleteACDGroupsCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteACDGroups_V2Completed As DeleteACDGroups_V2CompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateActivityDataCompleted As UpdateActivityDataCompletedEventHandler
        
        '''<remarks/>
        Public Event SetActivityDataCompleted As SetActivityDataCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteActivityDataCompleted As DeleteActivityDataCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteActivityData_V2Completed As DeleteActivityData_V2CompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateSysFunctionConfigCompleted As UpdateSysFunctionConfigCompletedEventHandler
        
        '''<remarks/>
        Public Event GetSysFunctionConfigCompleted As GetSysFunctionConfigCompletedEventHandler
        
        '''<remarks/>
        Public Event GetSysTimeCompleted As GetSysTimeCompletedEventHandler
        
        '''<remarks/>
        Public Event GetACDGroupHavePilotCompleted As GetACDGroupHavePilotCompletedEventHandler
        
        '''<remarks/>
        Public Event GetAgentConsoleParameterCompleted As GetAgentConsoleParameterCompletedEventHandler
        
        '''<remarks/>
        Public Event GetAgentConsoleParameter_V2Completed As GetAgentConsoleParameter_V2CompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateAgentConsoleParameterCompleted As UpdateAgentConsoleParameterCompletedEventHandler
        
        '''<remarks/>
        Public Event SetIVRActiveLogCompleted As SetIVRActiveLogCompletedEventHandler
        
        '''<remarks/>
        Public Event GetMenuListByGroupIDsCompleted As GetMenuListByGroupIDsCompletedEventHandler
        
        '''<remarks/>
        Public Event GetGroupListByUserIDCompleted As GetGroupListByUserIDCompletedEventHandler
        
        '''<remarks/>
        Public Event GetMenuListCompleted As GetMenuListCompletedEventHandler
        
        '''<remarks/>
        Public Event SetSecuritySettingCompleted As SetSecuritySettingCompletedEventHandler
        
        '''<remarks/>
        Public Event GetSecuritySettingCompleted As GetSecuritySettingCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteSecuritySettingCompleted As DeleteSecuritySettingCompletedEventHandler
        
        '''<remarks/>
        Public Event GetUserGroupAllCompleted As GetUserGroupAllCompletedEventHandler
        
        '''<remarks/>
        Public Event GetUserGroupByNameCompleted As GetUserGroupByNameCompletedEventHandler
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetDRSFilePath", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetDRSFilePath(ByVal TKID As String) As String
            Dim results() As Object = Me.Invoke("GetDRSFilePath", New Object() {TKID})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetDRSFilePathAsync(ByVal TKID As String)
            Me.GetDRSFilePathAsync(TKID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetDRSFilePathAsync(ByVal TKID As String, ByVal userState As Object)
            If (Me.GetDRSFilePathOperationCompleted Is Nothing) Then
                Me.GetDRSFilePathOperationCompleted = AddressOf Me.OnGetDRSFilePathOperationCompleted
            End If
            Me.InvokeAsync("GetDRSFilePath", New Object() {TKID}, Me.GetDRSFilePathOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetDRSFilePathOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetDRSFilePathCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetDRSFilePathCompleted(Me, New GetDRSFilePathCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetUserGroupByID", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetUserGroupByID(ByVal GroupID As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetUserGroupByID", New Object() {GroupID})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetUserGroupByIDAsync(ByVal GroupID As String)
            Me.GetUserGroupByIDAsync(GroupID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetUserGroupByIDAsync(ByVal GroupID As String, ByVal userState As Object)
            If (Me.GetUserGroupByIDOperationCompleted Is Nothing) Then
                Me.GetUserGroupByIDOperationCompleted = AddressOf Me.OnGetUserGroupByIDOperationCompleted
            End If
            Me.InvokeAsync("GetUserGroupByID", New Object() {GroupID}, Me.GetUserGroupByIDOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetUserGroupByIDOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetUserGroupByIDCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetUserGroupByIDCompleted(Me, New GetUserGroupByIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetUserListByGroupID", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetUserListByGroupID(ByVal GroupID As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetUserListByGroupID", New Object() {GroupID})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetUserListByGroupIDAsync(ByVal GroupID As String)
            Me.GetUserListByGroupIDAsync(GroupID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetUserListByGroupIDAsync(ByVal GroupID As String, ByVal userState As Object)
            If (Me.GetUserListByGroupIDOperationCompleted Is Nothing) Then
                Me.GetUserListByGroupIDOperationCompleted = AddressOf Me.OnGetUserListByGroupIDOperationCompleted
            End If
            Me.InvokeAsync("GetUserListByGroupID", New Object() {GroupID}, Me.GetUserListByGroupIDOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetUserListByGroupIDOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetUserListByGroupIDCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetUserListByGroupIDCompleted(Me, New GetUserListByGroupIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SetUserGroup", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub SetUserGroup(ByVal GroupName As String, ByVal Description As String)
            Me.Invoke("SetUserGroup", New Object() {GroupName, Description})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SetUserGroupAsync(ByVal GroupName As String, ByVal Description As String)
            Me.SetUserGroupAsync(GroupName, Description, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SetUserGroupAsync(ByVal GroupName As String, ByVal Description As String, ByVal userState As Object)
            If (Me.SetUserGroupOperationCompleted Is Nothing) Then
                Me.SetUserGroupOperationCompleted = AddressOf Me.OnSetUserGroupOperationCompleted
            End If
            Me.InvokeAsync("SetUserGroup", New Object() {GroupName, Description}, Me.SetUserGroupOperationCompleted, userState)
        End Sub
        
        Private Sub OnSetUserGroupOperationCompleted(ByVal arg As Object)
            If (Not (Me.SetUserGroupCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SetUserGroupCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SetUserIntoGroup", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub SetUserIntoGroup(ByVal GroupID As String, ByVal UserID As String)
            Me.Invoke("SetUserIntoGroup", New Object() {GroupID, UserID})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SetUserIntoGroupAsync(ByVal GroupID As String, ByVal UserID As String)
            Me.SetUserIntoGroupAsync(GroupID, UserID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SetUserIntoGroupAsync(ByVal GroupID As String, ByVal UserID As String, ByVal userState As Object)
            If (Me.SetUserIntoGroupOperationCompleted Is Nothing) Then
                Me.SetUserIntoGroupOperationCompleted = AddressOf Me.OnSetUserIntoGroupOperationCompleted
            End If
            Me.InvokeAsync("SetUserIntoGroup", New Object() {GroupID, UserID}, Me.SetUserIntoGroupOperationCompleted, userState)
        End Sub
        
        Private Sub OnSetUserIntoGroupOperationCompleted(ByVal arg As Object)
            If (Not (Me.SetUserIntoGroupCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SetUserIntoGroupCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SetUserRemoveGroup", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub SetUserRemoveGroup(ByVal GroupID As String, ByVal UserID As String)
            Me.Invoke("SetUserRemoveGroup", New Object() {GroupID, UserID})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SetUserRemoveGroupAsync(ByVal GroupID As String, ByVal UserID As String)
            Me.SetUserRemoveGroupAsync(GroupID, UserID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SetUserRemoveGroupAsync(ByVal GroupID As String, ByVal UserID As String, ByVal userState As Object)
            If (Me.SetUserRemoveGroupOperationCompleted Is Nothing) Then
                Me.SetUserRemoveGroupOperationCompleted = AddressOf Me.OnSetUserRemoveGroupOperationCompleted
            End If
            Me.InvokeAsync("SetUserRemoveGroup", New Object() {GroupID, UserID}, Me.SetUserRemoveGroupOperationCompleted, userState)
        End Sub
        
        Private Sub OnSetUserRemoveGroupOperationCompleted(ByVal arg As Object)
            If (Not (Me.SetUserRemoveGroupCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SetUserRemoveGroupCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateGroup", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub UpdateGroup(ByVal GroupID As String, ByVal GroupName As String, ByVal Description As String)
            Me.Invoke("UpdateGroup", New Object() {GroupID, GroupName, Description})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateGroupAsync(ByVal GroupID As String, ByVal GroupName As String, ByVal Description As String)
            Me.UpdateGroupAsync(GroupID, GroupName, Description, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateGroupAsync(ByVal GroupID As String, ByVal GroupName As String, ByVal Description As String, ByVal userState As Object)
            If (Me.UpdateGroupOperationCompleted Is Nothing) Then
                Me.UpdateGroupOperationCompleted = AddressOf Me.OnUpdateGroupOperationCompleted
            End If
            Me.InvokeAsync("UpdateGroup", New Object() {GroupID, GroupName, Description}, Me.UpdateGroupOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateGroupOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateGroupCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateGroupCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DeleteGroupByID", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub DeleteGroupByID(ByVal GroupID As String)
            Me.Invoke("DeleteGroupByID", New Object() {GroupID})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteGroupByIDAsync(ByVal GroupID As String)
            Me.DeleteGroupByIDAsync(GroupID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteGroupByIDAsync(ByVal GroupID As String, ByVal userState As Object)
            If (Me.DeleteGroupByIDOperationCompleted Is Nothing) Then
                Me.DeleteGroupByIDOperationCompleted = AddressOf Me.OnDeleteGroupByIDOperationCompleted
            End If
            Me.InvokeAsync("DeleteGroupByID", New Object() {GroupID}, Me.DeleteGroupByIDOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteGroupByIDOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteGroupByIDCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteGroupByIDCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DeleteGroupByName", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub DeleteGroupByName(ByVal GroupName As String)
            Me.Invoke("DeleteGroupByName", New Object() {GroupName})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteGroupByNameAsync(ByVal GroupName As String)
            Me.DeleteGroupByNameAsync(GroupName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteGroupByNameAsync(ByVal GroupName As String, ByVal userState As Object)
            If (Me.DeleteGroupByNameOperationCompleted Is Nothing) Then
                Me.DeleteGroupByNameOperationCompleted = AddressOf Me.OnDeleteGroupByNameOperationCompleted
            End If
            Me.InvokeAsync("DeleteGroupByName", New Object() {GroupName}, Me.DeleteGroupByNameOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteGroupByNameOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteGroupByNameCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteGroupByNameCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetUserAccountAll", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetUserAccountAll() As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetUserAccountAll", New Object(-1) {})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetUserAccountAllAsync()
            Me.GetUserAccountAllAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetUserAccountAllAsync(ByVal userState As Object)
            If (Me.GetUserAccountAllOperationCompleted Is Nothing) Then
                Me.GetUserAccountAllOperationCompleted = AddressOf Me.OnGetUserAccountAllOperationCompleted
            End If
            Me.InvokeAsync("GetUserAccountAll", New Object(-1) {}, Me.GetUserAccountAllOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetUserAccountAllOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetUserAccountAllCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetUserAccountAllCompleted(Me, New GetUserAccountAllCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetUserAccountAllHaveGroup", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetUserAccountAllHaveGroup() As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetUserAccountAllHaveGroup", New Object(-1) {})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetUserAccountAllHaveGroupAsync()
            Me.GetUserAccountAllHaveGroupAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetUserAccountAllHaveGroupAsync(ByVal userState As Object)
            If (Me.GetUserAccountAllHaveGroupOperationCompleted Is Nothing) Then
                Me.GetUserAccountAllHaveGroupOperationCompleted = AddressOf Me.OnGetUserAccountAllHaveGroupOperationCompleted
            End If
            Me.InvokeAsync("GetUserAccountAllHaveGroup", New Object(-1) {}, Me.GetUserAccountAllHaveGroupOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetUserAccountAllHaveGroupOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetUserAccountAllHaveGroupCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetUserAccountAllHaveGroupCompleted(Me, New GetUserAccountAllHaveGroupCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetUserAccount", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetUserAccount(ByVal sUserID As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetUserAccount", New Object() {sUserID})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetUserAccountAsync(ByVal sUserID As String)
            Me.GetUserAccountAsync(sUserID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetUserAccountAsync(ByVal sUserID As String, ByVal userState As Object)
            If (Me.GetUserAccountOperationCompleted Is Nothing) Then
                Me.GetUserAccountOperationCompleted = AddressOf Me.OnGetUserAccountOperationCompleted
            End If
            Me.InvokeAsync("GetUserAccount", New Object() {sUserID}, Me.GetUserAccountOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetUserAccountOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetUserAccountCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetUserAccountCompleted(Me, New GetUserAccountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateUserAccount", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub UpdateUserAccount(ByVal sUserID As String, ByVal sUserName As String, ByVal sPassword As String, ByVal sID As String)
            Me.Invoke("UpdateUserAccount", New Object() {sUserID, sUserName, sPassword, sID})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateUserAccountAsync(ByVal sUserID As String, ByVal sUserName As String, ByVal sPassword As String, ByVal sID As String)
            Me.UpdateUserAccountAsync(sUserID, sUserName, sPassword, sID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateUserAccountAsync(ByVal sUserID As String, ByVal sUserName As String, ByVal sPassword As String, ByVal sID As String, ByVal userState As Object)
            If (Me.UpdateUserAccountOperationCompleted Is Nothing) Then
                Me.UpdateUserAccountOperationCompleted = AddressOf Me.OnUpdateUserAccountOperationCompleted
            End If
            Me.InvokeAsync("UpdateUserAccount", New Object() {sUserID, sUserName, sPassword, sID}, Me.UpdateUserAccountOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateUserAccountOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateUserAccountCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateUserAccountCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateUserAccountHaveGroup", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub UpdateUserAccountHaveGroup(ByVal sUserID As String, ByVal sUserName As String, ByVal sPassword As String, ByVal sID As String, ByVal GroupID As String)
            Me.Invoke("UpdateUserAccountHaveGroup", New Object() {sUserID, sUserName, sPassword, sID, GroupID})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateUserAccountHaveGroupAsync(ByVal sUserID As String, ByVal sUserName As String, ByVal sPassword As String, ByVal sID As String, ByVal GroupID As String)
            Me.UpdateUserAccountHaveGroupAsync(sUserID, sUserName, sPassword, sID, GroupID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateUserAccountHaveGroupAsync(ByVal sUserID As String, ByVal sUserName As String, ByVal sPassword As String, ByVal sID As String, ByVal GroupID As String, ByVal userState As Object)
            If (Me.UpdateUserAccountHaveGroupOperationCompleted Is Nothing) Then
                Me.UpdateUserAccountHaveGroupOperationCompleted = AddressOf Me.OnUpdateUserAccountHaveGroupOperationCompleted
            End If
            Me.InvokeAsync("UpdateUserAccountHaveGroup", New Object() {sUserID, sUserName, sPassword, sID, GroupID}, Me.UpdateUserAccountHaveGroupOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateUserAccountHaveGroupOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateUserAccountHaveGroupCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateUserAccountHaveGroupCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DeleteUserAccount", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub DeleteUserAccount(ByVal sID As String)
            Me.Invoke("DeleteUserAccount", New Object() {sID})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteUserAccountAsync(ByVal sID As String)
            Me.DeleteUserAccountAsync(sID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteUserAccountAsync(ByVal sID As String, ByVal userState As Object)
            If (Me.DeleteUserAccountOperationCompleted Is Nothing) Then
                Me.DeleteUserAccountOperationCompleted = AddressOf Me.OnDeleteUserAccountOperationCompleted
            End If
            Me.InvokeAsync("DeleteUserAccount", New Object() {sID}, Me.DeleteUserAccountOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteUserAccountOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteUserAccountCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteUserAccountCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SetUserAccount", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub SetUserAccount(ByVal sUserID As String, ByVal sUserName As String, ByVal sPassword As String)
            Me.Invoke("SetUserAccount", New Object() {sUserID, sUserName, sPassword})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SetUserAccountAsync(ByVal sUserID As String, ByVal sUserName As String, ByVal sPassword As String)
            Me.SetUserAccountAsync(sUserID, sUserName, sPassword, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SetUserAccountAsync(ByVal sUserID As String, ByVal sUserName As String, ByVal sPassword As String, ByVal userState As Object)
            If (Me.SetUserAccountOperationCompleted Is Nothing) Then
                Me.SetUserAccountOperationCompleted = AddressOf Me.OnSetUserAccountOperationCompleted
            End If
            Me.InvokeAsync("SetUserAccount", New Object() {sUserID, sUserName, sPassword}, Me.SetUserAccountOperationCompleted, userState)
        End Sub
        
        Private Sub OnSetUserAccountOperationCompleted(ByVal arg As Object)
            If (Not (Me.SetUserAccountCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SetUserAccountCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SetUserAccountHaveGroup", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub SetUserAccountHaveGroup(ByVal sUserID As String, ByVal sUserName As String, ByVal sPassword As String, ByVal GroupID As String)
            Me.Invoke("SetUserAccountHaveGroup", New Object() {sUserID, sUserName, sPassword, GroupID})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SetUserAccountHaveGroupAsync(ByVal sUserID As String, ByVal sUserName As String, ByVal sPassword As String, ByVal GroupID As String)
            Me.SetUserAccountHaveGroupAsync(sUserID, sUserName, sPassword, GroupID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SetUserAccountHaveGroupAsync(ByVal sUserID As String, ByVal sUserName As String, ByVal sPassword As String, ByVal GroupID As String, ByVal userState As Object)
            If (Me.SetUserAccountHaveGroupOperationCompleted Is Nothing) Then
                Me.SetUserAccountHaveGroupOperationCompleted = AddressOf Me.OnSetUserAccountHaveGroupOperationCompleted
            End If
            Me.InvokeAsync("SetUserAccountHaveGroup", New Object() {sUserID, sUserName, sPassword, GroupID}, Me.SetUserAccountHaveGroupOperationCompleted, userState)
        End Sub
        
        Private Sub OnSetUserAccountHaveGroupOperationCompleted(ByVal arg As Object)
            If (Not (Me.SetUserAccountHaveGroupCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SetUserAccountHaveGroupCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetCurrentVer", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetCurrentVer() As String
            Dim results() As Object = Me.Invoke("GetCurrentVer", New Object(-1) {})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetCurrentVerAsync()
            Me.GetCurrentVerAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetCurrentVerAsync(ByVal userState As Object)
            If (Me.GetCurrentVerOperationCompleted Is Nothing) Then
                Me.GetCurrentVerOperationCompleted = AddressOf Me.OnGetCurrentVerOperationCompleted
            End If
            Me.InvokeAsync("GetCurrentVer", New Object(-1) {}, Me.GetCurrentVerOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetCurrentVerOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetCurrentVerCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetCurrentVerCompleted(Me, New GetCurrentVerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateProcessInfo", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateProcessInfo() As String
            Dim results() As Object = Me.Invoke("UpdateProcessInfo", New Object(-1) {})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateProcessInfoAsync()
            Me.UpdateProcessInfoAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateProcessInfoAsync(ByVal userState As Object)
            If (Me.UpdateProcessInfoOperationCompleted Is Nothing) Then
                Me.UpdateProcessInfoOperationCompleted = AddressOf Me.OnUpdateProcessInfoOperationCompleted
            End If
            Me.InvokeAsync("UpdateProcessInfo", New Object(-1) {}, Me.UpdateProcessInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateProcessInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateProcessInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateProcessInfoCompleted(Me, New UpdateProcessInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetUnioninsCustomerTitle", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetUnioninsCustomerTitle(ByVal sID As String, ByVal sCustLevel As String, ByVal bSelect As Boolean) As String
            Dim results() As Object = Me.Invoke("GetUnioninsCustomerTitle", New Object() {sID, sCustLevel, bSelect})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetUnioninsCustomerTitleAsync(ByVal sID As String, ByVal sCustLevel As String, ByVal bSelect As Boolean)
            Me.GetUnioninsCustomerTitleAsync(sID, sCustLevel, bSelect, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetUnioninsCustomerTitleAsync(ByVal sID As String, ByVal sCustLevel As String, ByVal bSelect As Boolean, ByVal userState As Object)
            If (Me.GetUnioninsCustomerTitleOperationCompleted Is Nothing) Then
                Me.GetUnioninsCustomerTitleOperationCompleted = AddressOf Me.OnGetUnioninsCustomerTitleOperationCompleted
            End If
            Me.InvokeAsync("GetUnioninsCustomerTitle", New Object() {sID, sCustLevel, bSelect}, Me.GetUnioninsCustomerTitleOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetUnioninsCustomerTitleOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetUnioninsCustomerTitleCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetUnioninsCustomerTitleCompleted(Me, New GetUnioninsCustomerTitleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetCustomerIDList", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetCustomerIDList(ByVal sID As String, ByVal sCustLevel As String, ByVal bSelect As Boolean) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetCustomerIDList", New Object() {sID, sCustLevel, bSelect})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetCustomerIDListAsync(ByVal sID As String, ByVal sCustLevel As String, ByVal bSelect As Boolean)
            Me.GetCustomerIDListAsync(sID, sCustLevel, bSelect, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetCustomerIDListAsync(ByVal sID As String, ByVal sCustLevel As String, ByVal bSelect As Boolean, ByVal userState As Object)
            If (Me.GetCustomerIDListOperationCompleted Is Nothing) Then
                Me.GetCustomerIDListOperationCompleted = AddressOf Me.OnGetCustomerIDListOperationCompleted
            End If
            Me.InvokeAsync("GetCustomerIDList", New Object() {sID, sCustLevel, bSelect}, Me.GetCustomerIDListOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetCustomerIDListOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetCustomerIDListCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetCustomerIDListCompleted(Me, New GetCustomerIDListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ChkIndem", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ChkIndem(ByVal sID As String, ByVal sCustLevel As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("ChkIndem", New Object() {sID, sCustLevel})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ChkIndemAsync(ByVal sID As String, ByVal sCustLevel As String)
            Me.ChkIndemAsync(sID, sCustLevel, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ChkIndemAsync(ByVal sID As String, ByVal sCustLevel As String, ByVal userState As Object)
            If (Me.ChkIndemOperationCompleted Is Nothing) Then
                Me.ChkIndemOperationCompleted = AddressOf Me.OnChkIndemOperationCompleted
            End If
            Me.InvokeAsync("ChkIndem", New Object() {sID, sCustLevel}, Me.ChkIndemOperationCompleted, userState)
        End Sub
        
        Private Sub OnChkIndemOperationCompleted(ByVal arg As Object)
            If (Not (Me.ChkIndemCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ChkIndemCompleted(Me, New ChkIndemCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AddRecord", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddRecord(ByVal sID As String) As Boolean
            Dim results() As Object = Me.Invoke("AddRecord", New Object() {sID})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddRecordAsync(ByVal sID As String)
            Me.AddRecordAsync(sID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddRecordAsync(ByVal sID As String, ByVal userState As Object)
            If (Me.AddRecordOperationCompleted Is Nothing) Then
                Me.AddRecordOperationCompleted = AddressOf Me.OnAddRecordOperationCompleted
            End If
            Me.InvokeAsync("AddRecord", New Object() {sID}, Me.AddRecordOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddRecordOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddRecordCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddRecordCompleted(Me, New AddRecordCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetTri_Hospital_CustomerExist", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetTri_Hospital_CustomerExist(ByVal sID As String, ByVal sCustLevel As String, ByVal bSelect As Boolean, ByVal sDocID As String, ByVal sDay As String, ByVal sSchedule As String) As String
            Dim results() As Object = Me.Invoke("GetTri_Hospital_CustomerExist", New Object() {sID, sCustLevel, bSelect, sDocID, sDay, sSchedule})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetTri_Hospital_CustomerExistAsync(ByVal sID As String, ByVal sCustLevel As String, ByVal bSelect As Boolean, ByVal sDocID As String, ByVal sDay As String, ByVal sSchedule As String)
            Me.GetTri_Hospital_CustomerExistAsync(sID, sCustLevel, bSelect, sDocID, sDay, sSchedule, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetTri_Hospital_CustomerExistAsync(ByVal sID As String, ByVal sCustLevel As String, ByVal bSelect As Boolean, ByVal sDocID As String, ByVal sDay As String, ByVal sSchedule As String, ByVal userState As Object)
            If (Me.GetTri_Hospital_CustomerExistOperationCompleted Is Nothing) Then
                Me.GetTri_Hospital_CustomerExistOperationCompleted = AddressOf Me.OnGetTri_Hospital_CustomerExistOperationCompleted
            End If
            Me.InvokeAsync("GetTri_Hospital_CustomerExist", New Object() {sID, sCustLevel, bSelect, sDocID, sDay, sSchedule}, Me.GetTri_Hospital_CustomerExistOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetTri_Hospital_CustomerExistOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetTri_Hospital_CustomerExistCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetTri_Hospital_CustomerExistCompleted(Me, New GetTri_Hospital_CustomerExistCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetTri_Hospital_Schedule", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetTri_Hospital_Schedule(ByVal sCustLevel As String, ByVal sDocID As String, ByVal sDay As String) As String
            Dim results() As Object = Me.Invoke("GetTri_Hospital_Schedule", New Object() {sCustLevel, sDocID, sDay})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetTri_Hospital_ScheduleAsync(ByVal sCustLevel As String, ByVal sDocID As String, ByVal sDay As String)
            Me.GetTri_Hospital_ScheduleAsync(sCustLevel, sDocID, sDay, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetTri_Hospital_ScheduleAsync(ByVal sCustLevel As String, ByVal sDocID As String, ByVal sDay As String, ByVal userState As Object)
            If (Me.GetTri_Hospital_ScheduleOperationCompleted Is Nothing) Then
                Me.GetTri_Hospital_ScheduleOperationCompleted = AddressOf Me.OnGetTri_Hospital_ScheduleOperationCompleted
            End If
            Me.InvokeAsync("GetTri_Hospital_Schedule", New Object() {sCustLevel, sDocID, sDay}, Me.GetTri_Hospital_ScheduleOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetTri_Hospital_ScheduleOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetTri_Hospital_ScheduleCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetTri_Hospital_ScheduleCompleted(Me, New GetTri_Hospital_ScheduleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetTri_Hospital_Reg", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetTri_Hospital_Reg(ByVal sSchedule As String, ByVal sID As String, ByVal sCustLevel As String, ByVal sDocID As String, ByVal sDay As String, ByVal ID_Exist_Result As String, ByVal bReg As Boolean, ByVal iNo As String) As String
            Dim results() As Object = Me.Invoke("GetTri_Hospital_Reg", New Object() {sSchedule, sID, sCustLevel, sDocID, sDay, ID_Exist_Result, bReg, iNo})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetTri_Hospital_RegAsync(ByVal sSchedule As String, ByVal sID As String, ByVal sCustLevel As String, ByVal sDocID As String, ByVal sDay As String, ByVal ID_Exist_Result As String, ByVal bReg As Boolean, ByVal iNo As String)
            Me.GetTri_Hospital_RegAsync(sSchedule, sID, sCustLevel, sDocID, sDay, ID_Exist_Result, bReg, iNo, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetTri_Hospital_RegAsync(ByVal sSchedule As String, ByVal sID As String, ByVal sCustLevel As String, ByVal sDocID As String, ByVal sDay As String, ByVal ID_Exist_Result As String, ByVal bReg As Boolean, ByVal iNo As String, ByVal userState As Object)
            If (Me.GetTri_Hospital_RegOperationCompleted Is Nothing) Then
                Me.GetTri_Hospital_RegOperationCompleted = AddressOf Me.OnGetTri_Hospital_RegOperationCompleted
            End If
            Me.InvokeAsync("GetTri_Hospital_Reg", New Object() {sSchedule, sID, sCustLevel, sDocID, sDay, ID_Exist_Result, bReg, iNo}, Me.GetTri_Hospital_RegOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetTri_Hospital_RegOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetTri_Hospital_RegCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetTri_Hospital_RegCompleted(Me, New GetTri_Hospital_RegCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/OutPreView", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function OutPreView(ByVal sData As String) As String
            Dim results() As Object = Me.Invoke("OutPreView", New Object() {sData})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub OutPreViewAsync(ByVal sData As String)
            Me.OutPreViewAsync(sData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub OutPreViewAsync(ByVal sData As String, ByVal userState As Object)
            If (Me.OutPreViewOperationCompleted Is Nothing) Then
                Me.OutPreViewOperationCompleted = AddressOf Me.OnOutPreViewOperationCompleted
            End If
            Me.InvokeAsync("OutPreView", New Object() {sData}, Me.OutPreViewOperationCompleted, userState)
        End Sub
        
        Private Sub OnOutPreViewOperationCompleted(ByVal arg As Object)
            If (Not (Me.OutPreViewCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent OutPreViewCompleted(Me, New OutPreViewCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetTest", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetTest() As String
            Dim results() As Object = Me.Invoke("GetTest", New Object(-1) {})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetTestAsync()
            Me.GetTestAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetTestAsync(ByVal userState As Object)
            If (Me.GetTestOperationCompleted Is Nothing) Then
                Me.GetTestOperationCompleted = AddressOf Me.OnGetTestOperationCompleted
            End If
            Me.InvokeAsync("GetTest", New Object(-1) {}, Me.GetTestOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetTestOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetTestCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetTestCompleted(Me, New GetTestCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetWebServiceMethod", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetWebServiceMethod(ByVal WSDL As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetWebServiceMethod", New Object() {WSDL})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetWebServiceMethodAsync(ByVal WSDL As String)
            Me.GetWebServiceMethodAsync(WSDL, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetWebServiceMethodAsync(ByVal WSDL As String, ByVal userState As Object)
            If (Me.GetWebServiceMethodOperationCompleted Is Nothing) Then
                Me.GetWebServiceMethodOperationCompleted = AddressOf Me.OnGetWebServiceMethodOperationCompleted
            End If
            Me.InvokeAsync("GetWebServiceMethod", New Object() {WSDL}, Me.GetWebServiceMethodOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetWebServiceMethodOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetWebServiceMethodCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetWebServiceMethodCompleted(Me, New GetWebServiceMethodCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetWebServiceData", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetWebServiceData(ByVal WSDL As String, ByVal TypeName As String, ByVal MethodName As String, ByVal paramValue As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetWebServiceData", New Object() {WSDL, TypeName, MethodName, paramValue})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetWebServiceDataAsync(ByVal WSDL As String, ByVal TypeName As String, ByVal MethodName As String, ByVal paramValue As String)
            Me.GetWebServiceDataAsync(WSDL, TypeName, MethodName, paramValue, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetWebServiceDataAsync(ByVal WSDL As String, ByVal TypeName As String, ByVal MethodName As String, ByVal paramValue As String, ByVal userState As Object)
            If (Me.GetWebServiceDataOperationCompleted Is Nothing) Then
                Me.GetWebServiceDataOperationCompleted = AddressOf Me.OnGetWebServiceDataOperationCompleted
            End If
            Me.InvokeAsync("GetWebServiceData", New Object() {WSDL, TypeName, MethodName, paramValue}, Me.GetWebServiceDataOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetWebServiceDataOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetWebServiceDataCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetWebServiceDataCompleted(Me, New GetWebServiceDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetBlackCustomerList", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetBlackCustomerList(ByVal BlackCustomerID As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetBlackCustomerList", New Object() {BlackCustomerID})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetBlackCustomerListAsync(ByVal BlackCustomerID As String)
            Me.GetBlackCustomerListAsync(BlackCustomerID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetBlackCustomerListAsync(ByVal BlackCustomerID As String, ByVal userState As Object)
            If (Me.GetBlackCustomerListOperationCompleted Is Nothing) Then
                Me.GetBlackCustomerListOperationCompleted = AddressOf Me.OnGetBlackCustomerListOperationCompleted
            End If
            Me.InvokeAsync("GetBlackCustomerList", New Object() {BlackCustomerID}, Me.GetBlackCustomerListOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetBlackCustomerListOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetBlackCustomerListCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetBlackCustomerListCompleted(Me, New GetBlackCustomerListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SetBlackCustomerList", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub SetBlackCustomerList(ByVal BlackCustomerID As String, ByVal CustomerInfo As String, ByVal AgentID As String)
            Me.Invoke("SetBlackCustomerList", New Object() {BlackCustomerID, CustomerInfo, AgentID})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SetBlackCustomerListAsync(ByVal BlackCustomerID As String, ByVal CustomerInfo As String, ByVal AgentID As String)
            Me.SetBlackCustomerListAsync(BlackCustomerID, CustomerInfo, AgentID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SetBlackCustomerListAsync(ByVal BlackCustomerID As String, ByVal CustomerInfo As String, ByVal AgentID As String, ByVal userState As Object)
            If (Me.SetBlackCustomerListOperationCompleted Is Nothing) Then
                Me.SetBlackCustomerListOperationCompleted = AddressOf Me.OnSetBlackCustomerListOperationCompleted
            End If
            Me.InvokeAsync("SetBlackCustomerList", New Object() {BlackCustomerID, CustomerInfo, AgentID}, Me.SetBlackCustomerListOperationCompleted, userState)
        End Sub
        
        Private Sub OnSetBlackCustomerListOperationCompleted(ByVal arg As Object)
            If (Not (Me.SetBlackCustomerListCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SetBlackCustomerListCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DeleteBlackCustomerList", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub DeleteBlackCustomerList(ByVal BlackCustomerID As String)
            Me.Invoke("DeleteBlackCustomerList", New Object() {BlackCustomerID})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteBlackCustomerListAsync(ByVal BlackCustomerID As String)
            Me.DeleteBlackCustomerListAsync(BlackCustomerID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteBlackCustomerListAsync(ByVal BlackCustomerID As String, ByVal userState As Object)
            If (Me.DeleteBlackCustomerListOperationCompleted Is Nothing) Then
                Me.DeleteBlackCustomerListOperationCompleted = AddressOf Me.OnDeleteBlackCustomerListOperationCompleted
            End If
            Me.InvokeAsync("DeleteBlackCustomerList", New Object() {BlackCustomerID}, Me.DeleteBlackCustomerListOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteBlackCustomerListOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteBlackCustomerListCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteBlackCustomerListCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateBlackCustomerList", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub UpdateBlackCustomerList(ByVal BlackCustomerID As String, ByVal Flag As String)
            Me.Invoke("UpdateBlackCustomerList", New Object() {BlackCustomerID, Flag})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateBlackCustomerListAsync(ByVal BlackCustomerID As String, ByVal Flag As String)
            Me.UpdateBlackCustomerListAsync(BlackCustomerID, Flag, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateBlackCustomerListAsync(ByVal BlackCustomerID As String, ByVal Flag As String, ByVal userState As Object)
            If (Me.UpdateBlackCustomerListOperationCompleted Is Nothing) Then
                Me.UpdateBlackCustomerListOperationCompleted = AddressOf Me.OnUpdateBlackCustomerListOperationCompleted
            End If
            Me.InvokeAsync("UpdateBlackCustomerList", New Object() {BlackCustomerID, Flag}, Me.UpdateBlackCustomerListOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateBlackCustomerListOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateBlackCustomerListCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateBlackCustomerListCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetWaitList", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetWaitList(ByVal AgentID As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetWaitList", New Object() {AgentID})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetWaitListAsync(ByVal AgentID As String)
            Me.GetWaitListAsync(AgentID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetWaitListAsync(ByVal AgentID As String, ByVal userState As Object)
            If (Me.GetWaitListOperationCompleted Is Nothing) Then
                Me.GetWaitListOperationCompleted = AddressOf Me.OnGetWaitListOperationCompleted
            End If
            Me.InvokeAsync("GetWaitList", New Object() {AgentID}, Me.GetWaitListOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetWaitListOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetWaitListCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetWaitListCompleted(Me, New GetWaitListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SetWaitList", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub SetWaitList(ByVal AgentID As String, ByVal CallID As String, ByVal DataKey As String, ByVal MEMO As String)
            Me.Invoke("SetWaitList", New Object() {AgentID, CallID, DataKey, MEMO})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SetWaitListAsync(ByVal AgentID As String, ByVal CallID As String, ByVal DataKey As String, ByVal MEMO As String)
            Me.SetWaitListAsync(AgentID, CallID, DataKey, MEMO, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SetWaitListAsync(ByVal AgentID As String, ByVal CallID As String, ByVal DataKey As String, ByVal MEMO As String, ByVal userState As Object)
            If (Me.SetWaitListOperationCompleted Is Nothing) Then
                Me.SetWaitListOperationCompleted = AddressOf Me.OnSetWaitListOperationCompleted
            End If
            Me.InvokeAsync("SetWaitList", New Object() {AgentID, CallID, DataKey, MEMO}, Me.SetWaitListOperationCompleted, userState)
        End Sub
        
        Private Sub OnSetWaitListOperationCompleted(ByVal arg As Object)
            If (Not (Me.SetWaitListCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SetWaitListCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DeleteWaitList", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub DeleteWaitList(ByVal AgentID As String, ByVal CALLID As String)
            Me.Invoke("DeleteWaitList", New Object() {AgentID, CALLID})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteWaitListAsync(ByVal AgentID As String, ByVal CALLID As String)
            Me.DeleteWaitListAsync(AgentID, CALLID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteWaitListAsync(ByVal AgentID As String, ByVal CALLID As String, ByVal userState As Object)
            If (Me.DeleteWaitListOperationCompleted Is Nothing) Then
                Me.DeleteWaitListOperationCompleted = AddressOf Me.OnDeleteWaitListOperationCompleted
            End If
            Me.InvokeAsync("DeleteWaitList", New Object() {AgentID, CALLID}, Me.DeleteWaitListOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteWaitListOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteWaitListCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteWaitListCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateWaitList", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub UpdateWaitList(ByVal AgentID As String, ByVal CallID As String, ByVal Flag As String)
            Me.Invoke("UpdateWaitList", New Object() {AgentID, CallID, Flag})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateWaitListAsync(ByVal AgentID As String, ByVal CallID As String, ByVal Flag As String)
            Me.UpdateWaitListAsync(AgentID, CallID, Flag, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateWaitListAsync(ByVal AgentID As String, ByVal CallID As String, ByVal Flag As String, ByVal userState As Object)
            If (Me.UpdateWaitListOperationCompleted Is Nothing) Then
                Me.UpdateWaitListOperationCompleted = AddressOf Me.OnUpdateWaitListOperationCompleted
            End If
            Me.InvokeAsync("UpdateWaitList", New Object() {AgentID, CallID, Flag}, Me.UpdateWaitListOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateWaitListOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateWaitListCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateWaitListCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetSMemo", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetSMemo() As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetSMemo", New Object(-1) {})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetSMemoAsync()
            Me.GetSMemoAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetSMemoAsync(ByVal userState As Object)
            If (Me.GetSMemoOperationCompleted Is Nothing) Then
                Me.GetSMemoOperationCompleted = AddressOf Me.OnGetSMemoOperationCompleted
            End If
            Me.InvokeAsync("GetSMemo", New Object(-1) {}, Me.GetSMemoOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetSMemoOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetSMemoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetSMemoCompleted(Me, New GetSMemoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetSMemoAll", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetSMemoAll() As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetSMemoAll", New Object(-1) {})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetSMemoAllAsync()
            Me.GetSMemoAllAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetSMemoAllAsync(ByVal userState As Object)
            If (Me.GetSMemoAllOperationCompleted Is Nothing) Then
                Me.GetSMemoAllOperationCompleted = AddressOf Me.OnGetSMemoAllOperationCompleted
            End If
            Me.InvokeAsync("GetSMemoAll", New Object(-1) {}, Me.GetSMemoAllOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetSMemoAllOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetSMemoAllCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetSMemoAllCompleted(Me, New GetSMemoAllCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateSMemo", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub UpdateSMemo(ByVal Flag As String, ByVal DisplayName As String, ByVal ID As String)
            Me.Invoke("UpdateSMemo", New Object() {Flag, DisplayName, ID})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateSMemoAsync(ByVal Flag As String, ByVal DisplayName As String, ByVal ID As String)
            Me.UpdateSMemoAsync(Flag, DisplayName, ID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateSMemoAsync(ByVal Flag As String, ByVal DisplayName As String, ByVal ID As String, ByVal userState As Object)
            If (Me.UpdateSMemoOperationCompleted Is Nothing) Then
                Me.UpdateSMemoOperationCompleted = AddressOf Me.OnUpdateSMemoOperationCompleted
            End If
            Me.InvokeAsync("UpdateSMemo", New Object() {Flag, DisplayName, ID}, Me.UpdateSMemoOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateSMemoOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateSMemoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateSMemoCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SetSMemo", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub SetSMemo(ByVal ID As String)
            Me.Invoke("SetSMemo", New Object() {ID})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SetSMemoAsync(ByVal ID As String)
            Me.SetSMemoAsync(ID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SetSMemoAsync(ByVal ID As String, ByVal userState As Object)
            If (Me.SetSMemoOperationCompleted Is Nothing) Then
                Me.SetSMemoOperationCompleted = AddressOf Me.OnSetSMemoOperationCompleted
            End If
            Me.InvokeAsync("SetSMemo", New Object() {ID}, Me.SetSMemoOperationCompleted, userState)
        End Sub
        
        Private Sub OnSetSMemoOperationCompleted(ByVal arg As Object)
            If (Not (Me.SetSMemoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SetSMemoCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetBulletinWeb", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetBulletinWeb() As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetBulletinWeb", New Object(-1) {})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetBulletinWebAsync()
            Me.GetBulletinWebAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetBulletinWebAsync(ByVal userState As Object)
            If (Me.GetBulletinWebOperationCompleted Is Nothing) Then
                Me.GetBulletinWebOperationCompleted = AddressOf Me.OnGetBulletinWebOperationCompleted
            End If
            Me.InvokeAsync("GetBulletinWeb", New Object(-1) {}, Me.GetBulletinWebOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetBulletinWebOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetBulletinWebCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetBulletinWebCompleted(Me, New GetBulletinWebCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SetBulletinWeb", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub SetBulletinWeb(ByVal Title As String, ByVal Description As String, ByVal ExpirationDay As String, ByVal BulletinDay As String, ByVal URL As String, ByVal CreateUser As String, ByVal Priority As String)
            Me.Invoke("SetBulletinWeb", New Object() {Title, Description, ExpirationDay, BulletinDay, URL, CreateUser, Priority})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SetBulletinWebAsync(ByVal Title As String, ByVal Description As String, ByVal ExpirationDay As String, ByVal BulletinDay As String, ByVal URL As String, ByVal CreateUser As String, ByVal Priority As String)
            Me.SetBulletinWebAsync(Title, Description, ExpirationDay, BulletinDay, URL, CreateUser, Priority, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SetBulletinWebAsync(ByVal Title As String, ByVal Description As String, ByVal ExpirationDay As String, ByVal BulletinDay As String, ByVal URL As String, ByVal CreateUser As String, ByVal Priority As String, ByVal userState As Object)
            If (Me.SetBulletinWebOperationCompleted Is Nothing) Then
                Me.SetBulletinWebOperationCompleted = AddressOf Me.OnSetBulletinWebOperationCompleted
            End If
            Me.InvokeAsync("SetBulletinWeb", New Object() {Title, Description, ExpirationDay, BulletinDay, URL, CreateUser, Priority}, Me.SetBulletinWebOperationCompleted, userState)
        End Sub
        
        Private Sub OnSetBulletinWebOperationCompleted(ByVal arg As Object)
            If (Not (Me.SetBulletinWebCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SetBulletinWebCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DeleteBulletinWeb", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub DeleteBulletinWeb(ByVal ID As String)
            Me.Invoke("DeleteBulletinWeb", New Object() {ID})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteBulletinWebAsync(ByVal ID As String)
            Me.DeleteBulletinWebAsync(ID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteBulletinWebAsync(ByVal ID As String, ByVal userState As Object)
            If (Me.DeleteBulletinWebOperationCompleted Is Nothing) Then
                Me.DeleteBulletinWebOperationCompleted = AddressOf Me.OnDeleteBulletinWebOperationCompleted
            End If
            Me.InvokeAsync("DeleteBulletinWeb", New Object() {ID}, Me.DeleteBulletinWebOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteBulletinWebOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteBulletinWebCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteBulletinWebCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateBulletinWeb", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub UpdateBulletinWeb(ByVal Title As String, ByVal Description As String, ByVal CreateDay As String, ByVal ExpirationDay As String, ByVal BulletinDay As String, ByVal URL As String, ByVal UserName As String, ByVal Priority As String, ByVal ID As String)
            Me.Invoke("UpdateBulletinWeb", New Object() {Title, Description, CreateDay, ExpirationDay, BulletinDay, URL, UserName, Priority, ID})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateBulletinWebAsync(ByVal Title As String, ByVal Description As String, ByVal CreateDay As String, ByVal ExpirationDay As String, ByVal BulletinDay As String, ByVal URL As String, ByVal UserName As String, ByVal Priority As String, ByVal ID As String)
            Me.UpdateBulletinWebAsync(Title, Description, CreateDay, ExpirationDay, BulletinDay, URL, UserName, Priority, ID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateBulletinWebAsync(ByVal Title As String, ByVal Description As String, ByVal CreateDay As String, ByVal ExpirationDay As String, ByVal BulletinDay As String, ByVal URL As String, ByVal UserName As String, ByVal Priority As String, ByVal ID As String, ByVal userState As Object)
            If (Me.UpdateBulletinWebOperationCompleted Is Nothing) Then
                Me.UpdateBulletinWebOperationCompleted = AddressOf Me.OnUpdateBulletinWebOperationCompleted
            End If
            Me.InvokeAsync("UpdateBulletinWeb", New Object() {Title, Description, CreateDay, ExpirationDay, BulletinDay, URL, UserName, Priority, ID}, Me.UpdateBulletinWebOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateBulletinWebOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateBulletinWebCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateBulletinWebCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/QueryWebDataPaste", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function QueryWebDataPaste() As System.Data.DataSet
            Dim results() As Object = Me.Invoke("QueryWebDataPaste", New Object(-1) {})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub QueryWebDataPasteAsync()
            Me.QueryWebDataPasteAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub QueryWebDataPasteAsync(ByVal userState As Object)
            If (Me.QueryWebDataPasteOperationCompleted Is Nothing) Then
                Me.QueryWebDataPasteOperationCompleted = AddressOf Me.OnQueryWebDataPasteOperationCompleted
            End If
            Me.InvokeAsync("QueryWebDataPaste", New Object(-1) {}, Me.QueryWebDataPasteOperationCompleted, userState)
        End Sub
        
        Private Sub OnQueryWebDataPasteOperationCompleted(ByVal arg As Object)
            If (Not (Me.QueryWebDataPasteCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent QueryWebDataPasteCompleted(Me, New QueryWebDataPasteCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/QueryWebDataPasteByID", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function QueryWebDataPasteByID(ByVal PlanID As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("QueryWebDataPasteByID", New Object() {PlanID})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub QueryWebDataPasteByIDAsync(ByVal PlanID As String)
            Me.QueryWebDataPasteByIDAsync(PlanID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub QueryWebDataPasteByIDAsync(ByVal PlanID As String, ByVal userState As Object)
            If (Me.QueryWebDataPasteByIDOperationCompleted Is Nothing) Then
                Me.QueryWebDataPasteByIDOperationCompleted = AddressOf Me.OnQueryWebDataPasteByIDOperationCompleted
            End If
            Me.InvokeAsync("QueryWebDataPasteByID", New Object() {PlanID}, Me.QueryWebDataPasteByIDOperationCompleted, userState)
        End Sub
        
        Private Sub OnQueryWebDataPasteByIDOperationCompleted(ByVal arg As Object)
            If (Not (Me.QueryWebDataPasteByIDCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent QueryWebDataPasteByIDCompleted(Me, New QueryWebDataPasteByIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/QueryWebDataPasteByURL", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function QueryWebDataPasteByURL(ByVal URL As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("QueryWebDataPasteByURL", New Object() {URL})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub QueryWebDataPasteByURLAsync(ByVal URL As String)
            Me.QueryWebDataPasteByURLAsync(URL, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub QueryWebDataPasteByURLAsync(ByVal URL As String, ByVal userState As Object)
            If (Me.QueryWebDataPasteByURLOperationCompleted Is Nothing) Then
                Me.QueryWebDataPasteByURLOperationCompleted = AddressOf Me.OnQueryWebDataPasteByURLOperationCompleted
            End If
            Me.InvokeAsync("QueryWebDataPasteByURL", New Object() {URL}, Me.QueryWebDataPasteByURLOperationCompleted, userState)
        End Sub
        
        Private Sub OnQueryWebDataPasteByURLOperationCompleted(ByVal arg As Object)
            If (Not (Me.QueryWebDataPasteByURLCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent QueryWebDataPasteByURLCompleted(Me, New QueryWebDataPasteByURLCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AddWebDataPaste", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddWebDataPaste(ByVal PlanName As String, ByVal LinkURL As String, ByVal PlanRec As String, ByVal PlanRecDisplay As String) As String
            Dim results() As Object = Me.Invoke("AddWebDataPaste", New Object() {PlanName, LinkURL, PlanRec, PlanRecDisplay})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddWebDataPasteAsync(ByVal PlanName As String, ByVal LinkURL As String, ByVal PlanRec As String, ByVal PlanRecDisplay As String)
            Me.AddWebDataPasteAsync(PlanName, LinkURL, PlanRec, PlanRecDisplay, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddWebDataPasteAsync(ByVal PlanName As String, ByVal LinkURL As String, ByVal PlanRec As String, ByVal PlanRecDisplay As String, ByVal userState As Object)
            If (Me.AddWebDataPasteOperationCompleted Is Nothing) Then
                Me.AddWebDataPasteOperationCompleted = AddressOf Me.OnAddWebDataPasteOperationCompleted
            End If
            Me.InvokeAsync("AddWebDataPaste", New Object() {PlanName, LinkURL, PlanRec, PlanRecDisplay}, Me.AddWebDataPasteOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddWebDataPasteOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddWebDataPasteCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddWebDataPasteCompleted(Me, New AddWebDataPasteCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ModifyWebDataPasteBase", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ModifyWebDataPasteBase(ByVal PlanName As String, ByVal LinkURL As String, ByVal PlanRec As String, ByVal PlanRecDisplay As String, ByVal PlanID As String) As String
            Dim results() As Object = Me.Invoke("ModifyWebDataPasteBase", New Object() {PlanName, LinkURL, PlanRec, PlanRecDisplay, PlanID})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ModifyWebDataPasteBaseAsync(ByVal PlanName As String, ByVal LinkURL As String, ByVal PlanRec As String, ByVal PlanRecDisplay As String, ByVal PlanID As String)
            Me.ModifyWebDataPasteBaseAsync(PlanName, LinkURL, PlanRec, PlanRecDisplay, PlanID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ModifyWebDataPasteBaseAsync(ByVal PlanName As String, ByVal LinkURL As String, ByVal PlanRec As String, ByVal PlanRecDisplay As String, ByVal PlanID As String, ByVal userState As Object)
            If (Me.ModifyWebDataPasteBaseOperationCompleted Is Nothing) Then
                Me.ModifyWebDataPasteBaseOperationCompleted = AddressOf Me.OnModifyWebDataPasteBaseOperationCompleted
            End If
            Me.InvokeAsync("ModifyWebDataPasteBase", New Object() {PlanName, LinkURL, PlanRec, PlanRecDisplay, PlanID}, Me.ModifyWebDataPasteBaseOperationCompleted, userState)
        End Sub
        
        Private Sub OnModifyWebDataPasteBaseOperationCompleted(ByVal arg As Object)
            If (Not (Me.ModifyWebDataPasteBaseCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ModifyWebDataPasteBaseCompleted(Me, New ModifyWebDataPasteBaseCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ModifyWebDataPasteDataLink", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ModifyWebDataPasteDataLink(ByVal PlanData As String, ByVal PlanDataDisplay As String, ByVal PlanID As String) As String
            Dim results() As Object = Me.Invoke("ModifyWebDataPasteDataLink", New Object() {PlanData, PlanDataDisplay, PlanID})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ModifyWebDataPasteDataLinkAsync(ByVal PlanData As String, ByVal PlanDataDisplay As String, ByVal PlanID As String)
            Me.ModifyWebDataPasteDataLinkAsync(PlanData, PlanDataDisplay, PlanID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ModifyWebDataPasteDataLinkAsync(ByVal PlanData As String, ByVal PlanDataDisplay As String, ByVal PlanID As String, ByVal userState As Object)
            If (Me.ModifyWebDataPasteDataLinkOperationCompleted Is Nothing) Then
                Me.ModifyWebDataPasteDataLinkOperationCompleted = AddressOf Me.OnModifyWebDataPasteDataLinkOperationCompleted
            End If
            Me.InvokeAsync("ModifyWebDataPasteDataLink", New Object() {PlanData, PlanDataDisplay, PlanID}, Me.ModifyWebDataPasteDataLinkOperationCompleted, userState)
        End Sub
        
        Private Sub OnModifyWebDataPasteDataLinkOperationCompleted(ByVal arg As Object)
            If (Not (Me.ModifyWebDataPasteDataLinkCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ModifyWebDataPasteDataLinkCompleted(Me, New ModifyWebDataPasteDataLinkCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DeleteWebDataPaste", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DeleteWebDataPaste(ByVal PlanID As String) As String
            Dim results() As Object = Me.Invoke("DeleteWebDataPaste", New Object() {PlanID})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DeleteWebDataPasteAsync(ByVal PlanID As String)
            Me.DeleteWebDataPasteAsync(PlanID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteWebDataPasteAsync(ByVal PlanID As String, ByVal userState As Object)
            If (Me.DeleteWebDataPasteOperationCompleted Is Nothing) Then
                Me.DeleteWebDataPasteOperationCompleted = AddressOf Me.OnDeleteWebDataPasteOperationCompleted
            End If
            Me.InvokeAsync("DeleteWebDataPaste", New Object() {PlanID}, Me.DeleteWebDataPasteOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteWebDataPasteOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteWebDataPasteCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteWebDataPasteCompleted(Me, New DeleteWebDataPasteCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetHondaData", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetHondaData(ByVal AgentID As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetHondaData", New Object() {AgentID})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetHondaDataAsync(ByVal AgentID As String)
            Me.GetHondaDataAsync(AgentID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetHondaDataAsync(ByVal AgentID As String, ByVal userState As Object)
            If (Me.GetHondaDataOperationCompleted Is Nothing) Then
                Me.GetHondaDataOperationCompleted = AddressOf Me.OnGetHondaDataOperationCompleted
            End If
            Me.InvokeAsync("GetHondaData", New Object() {AgentID}, Me.GetHondaDataOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetHondaDataOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetHondaDataCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetHondaDataCompleted(Me, New GetHondaDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Insert_IVR_Report", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Insert_IVR_Report(ByVal IVRStatus As String, ByVal IVRCStatus As String, ByVal RecTime As String) As String
            Dim results() As Object = Me.Invoke("Insert_IVR_Report", New Object() {IVRStatus, IVRCStatus, RecTime})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub Insert_IVR_ReportAsync(ByVal IVRStatus As String, ByVal IVRCStatus As String, ByVal RecTime As String)
            Me.Insert_IVR_ReportAsync(IVRStatus, IVRCStatus, RecTime, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Insert_IVR_ReportAsync(ByVal IVRStatus As String, ByVal IVRCStatus As String, ByVal RecTime As String, ByVal userState As Object)
            If (Me.Insert_IVR_ReportOperationCompleted Is Nothing) Then
                Me.Insert_IVR_ReportOperationCompleted = AddressOf Me.OnInsert_IVR_ReportOperationCompleted
            End If
            Me.InvokeAsync("Insert_IVR_Report", New Object() {IVRStatus, IVRCStatus, RecTime}, Me.Insert_IVR_ReportOperationCompleted, userState)
        End Sub
        
        Private Sub OnInsert_IVR_ReportOperationCompleted(ByVal arg As Object)
            If (Not (Me.Insert_IVR_ReportCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Insert_IVR_ReportCompleted(Me, New Insert_IVR_ReportCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Insert_IVR_Report_V2", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Insert_IVR_Report_V2(ByVal IVRStatus As String, ByVal IVRCStatus As String, ByVal RecTime As String, ByVal StartTime As String, ByVal EndTime As String) As String
            Dim results() As Object = Me.Invoke("Insert_IVR_Report_V2", New Object() {IVRStatus, IVRCStatus, RecTime, StartTime, EndTime})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub Insert_IVR_Report_V2Async(ByVal IVRStatus As String, ByVal IVRCStatus As String, ByVal RecTime As String, ByVal StartTime As String, ByVal EndTime As String)
            Me.Insert_IVR_Report_V2Async(IVRStatus, IVRCStatus, RecTime, StartTime, EndTime, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Insert_IVR_Report_V2Async(ByVal IVRStatus As String, ByVal IVRCStatus As String, ByVal RecTime As String, ByVal StartTime As String, ByVal EndTime As String, ByVal userState As Object)
            If (Me.Insert_IVR_Report_V2OperationCompleted Is Nothing) Then
                Me.Insert_IVR_Report_V2OperationCompleted = AddressOf Me.OnInsert_IVR_Report_V2OperationCompleted
            End If
            Me.InvokeAsync("Insert_IVR_Report_V2", New Object() {IVRStatus, IVRCStatus, RecTime, StartTime, EndTime}, Me.Insert_IVR_Report_V2OperationCompleted, userState)
        End Sub
        
        Private Sub OnInsert_IVR_Report_V2OperationCompleted(ByVal arg As Object)
            If (Not (Me.Insert_IVR_Report_V2CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Insert_IVR_Report_V2Completed(Me, New Insert_IVR_Report_V2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Insert_IVR_Report_V4", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Insert_IVR_Report_V4(ByVal IVRStatus As String, ByVal IVRCStatus As String, ByVal RecTime As String, ByVal StartTime As String, ByVal EndTime As String, ByVal LineNo As String) As String
            Dim results() As Object = Me.Invoke("Insert_IVR_Report_V4", New Object() {IVRStatus, IVRCStatus, RecTime, StartTime, EndTime, LineNo})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub Insert_IVR_Report_V4Async(ByVal IVRStatus As String, ByVal IVRCStatus As String, ByVal RecTime As String, ByVal StartTime As String, ByVal EndTime As String, ByVal LineNo As String)
            Me.Insert_IVR_Report_V4Async(IVRStatus, IVRCStatus, RecTime, StartTime, EndTime, LineNo, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Insert_IVR_Report_V4Async(ByVal IVRStatus As String, ByVal IVRCStatus As String, ByVal RecTime As String, ByVal StartTime As String, ByVal EndTime As String, ByVal LineNo As String, ByVal userState As Object)
            If (Me.Insert_IVR_Report_V4OperationCompleted Is Nothing) Then
                Me.Insert_IVR_Report_V4OperationCompleted = AddressOf Me.OnInsert_IVR_Report_V4OperationCompleted
            End If
            Me.InvokeAsync("Insert_IVR_Report_V4", New Object() {IVRStatus, IVRCStatus, RecTime, StartTime, EndTime, LineNo}, Me.Insert_IVR_Report_V4OperationCompleted, userState)
        End Sub
        
        Private Sub OnInsert_IVR_Report_V4OperationCompleted(ByVal arg As Object)
            If (Not (Me.Insert_IVR_Report_V4CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Insert_IVR_Report_V4Completed(Me, New Insert_IVR_Report_V4CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Insert_IVR_Report_V3", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Insert_IVR_Report_V3(ByVal IVRStatus As String, ByVal IVRCStatus As String, ByVal RecTime As String, ByVal StartTime As String, ByVal EndTime As String, ByVal CusDataColumnName As String, ByVal CusDataColumnValue As String) As String
            Dim results() As Object = Me.Invoke("Insert_IVR_Report_V3", New Object() {IVRStatus, IVRCStatus, RecTime, StartTime, EndTime, CusDataColumnName, CusDataColumnValue})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub Insert_IVR_Report_V3Async(ByVal IVRStatus As String, ByVal IVRCStatus As String, ByVal RecTime As String, ByVal StartTime As String, ByVal EndTime As String, ByVal CusDataColumnName As String, ByVal CusDataColumnValue As String)
            Me.Insert_IVR_Report_V3Async(IVRStatus, IVRCStatus, RecTime, StartTime, EndTime, CusDataColumnName, CusDataColumnValue, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Insert_IVR_Report_V3Async(ByVal IVRStatus As String, ByVal IVRCStatus As String, ByVal RecTime As String, ByVal StartTime As String, ByVal EndTime As String, ByVal CusDataColumnName As String, ByVal CusDataColumnValue As String, ByVal userState As Object)
            If (Me.Insert_IVR_Report_V3OperationCompleted Is Nothing) Then
                Me.Insert_IVR_Report_V3OperationCompleted = AddressOf Me.OnInsert_IVR_Report_V3OperationCompleted
            End If
            Me.InvokeAsync("Insert_IVR_Report_V3", New Object() {IVRStatus, IVRCStatus, RecTime, StartTime, EndTime, CusDataColumnName, CusDataColumnValue}, Me.Insert_IVR_Report_V3OperationCompleted, userState)
        End Sub
        
        Private Sub OnInsert_IVR_Report_V3OperationCompleted(ByVal arg As Object)
            If (Not (Me.Insert_IVR_Report_V3CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Insert_IVR_Report_V3Completed(Me, New Insert_IVR_Report_V3CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Insert_IVR_Report_V5", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Insert_IVR_Report_V5(ByVal IVRStatus As String, ByVal IVRCStatus As String, ByVal RecTime As String, ByVal StartTime As String, ByVal EndTime As String, ByVal LineNo As String, ByVal IVR1 As String, ByVal CallID As String) As String
            Dim results() As Object = Me.Invoke("Insert_IVR_Report_V5", New Object() {IVRStatus, IVRCStatus, RecTime, StartTime, EndTime, LineNo, IVR1, CallID})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub Insert_IVR_Report_V5Async(ByVal IVRStatus As String, ByVal IVRCStatus As String, ByVal RecTime As String, ByVal StartTime As String, ByVal EndTime As String, ByVal LineNo As String, ByVal IVR1 As String, ByVal CallID As String)
            Me.Insert_IVR_Report_V5Async(IVRStatus, IVRCStatus, RecTime, StartTime, EndTime, LineNo, IVR1, CallID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Insert_IVR_Report_V5Async(ByVal IVRStatus As String, ByVal IVRCStatus As String, ByVal RecTime As String, ByVal StartTime As String, ByVal EndTime As String, ByVal LineNo As String, ByVal IVR1 As String, ByVal CallID As String, ByVal userState As Object)
            If (Me.Insert_IVR_Report_V5OperationCompleted Is Nothing) Then
                Me.Insert_IVR_Report_V5OperationCompleted = AddressOf Me.OnInsert_IVR_Report_V5OperationCompleted
            End If
            Me.InvokeAsync("Insert_IVR_Report_V5", New Object() {IVRStatus, IVRCStatus, RecTime, StartTime, EndTime, LineNo, IVR1, CallID}, Me.Insert_IVR_Report_V5OperationCompleted, userState)
        End Sub
        
        Private Sub OnInsert_IVR_Report_V5OperationCompleted(ByVal arg As Object)
            If (Not (Me.Insert_IVR_Report_V5CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Insert_IVR_Report_V5Completed(Me, New Insert_IVR_Report_V5CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Find_IVR_Report_By_PID", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Find_IVR_Report_By_PID(ByVal PID As String) As String
            Dim results() As Object = Me.Invoke("Find_IVR_Report_By_PID", New Object() {PID})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub Find_IVR_Report_By_PIDAsync(ByVal PID As String)
            Me.Find_IVR_Report_By_PIDAsync(PID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Find_IVR_Report_By_PIDAsync(ByVal PID As String, ByVal userState As Object)
            If (Me.Find_IVR_Report_By_PIDOperationCompleted Is Nothing) Then
                Me.Find_IVR_Report_By_PIDOperationCompleted = AddressOf Me.OnFind_IVR_Report_By_PIDOperationCompleted
            End If
            Me.InvokeAsync("Find_IVR_Report_By_PID", New Object() {PID}, Me.Find_IVR_Report_By_PIDOperationCompleted, userState)
        End Sub
        
        Private Sub OnFind_IVR_Report_By_PIDOperationCompleted(ByVal arg As Object)
            If (Not (Me.Find_IVR_Report_By_PIDCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Find_IVR_Report_By_PIDCompleted(Me, New Find_IVR_Report_By_PIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Check_IVR_Report_Table", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Check_IVR_Report_Table() As Boolean
            Dim results() As Object = Me.Invoke("Check_IVR_Report_Table", New Object(-1) {})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub Check_IVR_Report_TableAsync()
            Me.Check_IVR_Report_TableAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Check_IVR_Report_TableAsync(ByVal userState As Object)
            If (Me.Check_IVR_Report_TableOperationCompleted Is Nothing) Then
                Me.Check_IVR_Report_TableOperationCompleted = AddressOf Me.OnCheck_IVR_Report_TableOperationCompleted
            End If
            Me.InvokeAsync("Check_IVR_Report_Table", New Object(-1) {}, Me.Check_IVR_Report_TableOperationCompleted, userState)
        End Sub
        
        Private Sub OnCheck_IVR_Report_TableOperationCompleted(ByVal arg As Object)
            If (Not (Me.Check_IVR_Report_TableCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Check_IVR_Report_TableCompleted(Me, New Check_IVR_Report_TableCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Get_IVR_CalCOunt", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Get_IVR_CalCOunt() As String
            Dim results() As Object = Me.Invoke("Get_IVR_CalCOunt", New Object(-1) {})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub Get_IVR_CalCOuntAsync()
            Me.Get_IVR_CalCOuntAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Get_IVR_CalCOuntAsync(ByVal userState As Object)
            If (Me.Get_IVR_CalCOuntOperationCompleted Is Nothing) Then
                Me.Get_IVR_CalCOuntOperationCompleted = AddressOf Me.OnGet_IVR_CalCOuntOperationCompleted
            End If
            Me.InvokeAsync("Get_IVR_CalCOunt", New Object(-1) {}, Me.Get_IVR_CalCOuntOperationCompleted, userState)
        End Sub
        
        Private Sub OnGet_IVR_CalCOuntOperationCompleted(ByVal arg As Object)
            If (Not (Me.Get_IVR_CalCOuntCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Get_IVR_CalCOuntCompleted(Me, New Get_IVR_CalCOuntCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Insert_InfoFOD_CRM_Activity_Info", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Insert_InfoFOD_CRM_Activity_Info(ByVal Type As String, ByVal TypeSource As String, ByVal SourceID As String, ByVal FilePath As String, ByVal RecTime As String, ByVal SendTime As String, ByVal Define1 As String, ByVal Define2 As String) As String
            Dim results() As Object = Me.Invoke("Insert_InfoFOD_CRM_Activity_Info", New Object() {Type, TypeSource, SourceID, FilePath, RecTime, SendTime, Define1, Define2})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub Insert_InfoFOD_CRM_Activity_InfoAsync(ByVal Type As String, ByVal TypeSource As String, ByVal SourceID As String, ByVal FilePath As String, ByVal RecTime As String, ByVal SendTime As String, ByVal Define1 As String, ByVal Define2 As String)
            Me.Insert_InfoFOD_CRM_Activity_InfoAsync(Type, TypeSource, SourceID, FilePath, RecTime, SendTime, Define1, Define2, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Insert_InfoFOD_CRM_Activity_InfoAsync(ByVal Type As String, ByVal TypeSource As String, ByVal SourceID As String, ByVal FilePath As String, ByVal RecTime As String, ByVal SendTime As String, ByVal Define1 As String, ByVal Define2 As String, ByVal userState As Object)
            If (Me.Insert_InfoFOD_CRM_Activity_InfoOperationCompleted Is Nothing) Then
                Me.Insert_InfoFOD_CRM_Activity_InfoOperationCompleted = AddressOf Me.OnInsert_InfoFOD_CRM_Activity_InfoOperationCompleted
            End If
            Me.InvokeAsync("Insert_InfoFOD_CRM_Activity_Info", New Object() {Type, TypeSource, SourceID, FilePath, RecTime, SendTime, Define1, Define2}, Me.Insert_InfoFOD_CRM_Activity_InfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnInsert_InfoFOD_CRM_Activity_InfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.Insert_InfoFOD_CRM_Activity_InfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Insert_InfoFOD_CRM_Activity_InfoCompleted(Me, New Insert_InfoFOD_CRM_Activity_InfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Update_InfoFOD_CRM_Activity_Info", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Update_InfoFOD_CRM_Activity_Info(ByVal Define1 As String, ByVal SendTime As String) As String
            Dim results() As Object = Me.Invoke("Update_InfoFOD_CRM_Activity_Info", New Object() {Define1, SendTime})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub Update_InfoFOD_CRM_Activity_InfoAsync(ByVal Define1 As String, ByVal SendTime As String)
            Me.Update_InfoFOD_CRM_Activity_InfoAsync(Define1, SendTime, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Update_InfoFOD_CRM_Activity_InfoAsync(ByVal Define1 As String, ByVal SendTime As String, ByVal userState As Object)
            If (Me.Update_InfoFOD_CRM_Activity_InfoOperationCompleted Is Nothing) Then
                Me.Update_InfoFOD_CRM_Activity_InfoOperationCompleted = AddressOf Me.OnUpdate_InfoFOD_CRM_Activity_InfoOperationCompleted
            End If
            Me.InvokeAsync("Update_InfoFOD_CRM_Activity_Info", New Object() {Define1, SendTime}, Me.Update_InfoFOD_CRM_Activity_InfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdate_InfoFOD_CRM_Activity_InfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.Update_InfoFOD_CRM_Activity_InfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Update_InfoFOD_CRM_Activity_InfoCompleted(Me, New Update_InfoFOD_CRM_Activity_InfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetFaxRec", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetFaxRec(ByVal sDay As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetFaxRec", New Object() {sDay})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetFaxRecAsync(ByVal sDay As String)
            Me.GetFaxRecAsync(sDay, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetFaxRecAsync(ByVal sDay As String, ByVal userState As Object)
            If (Me.GetFaxRecOperationCompleted Is Nothing) Then
                Me.GetFaxRecOperationCompleted = AddressOf Me.OnGetFaxRecOperationCompleted
            End If
            Me.InvokeAsync("GetFaxRec", New Object() {sDay}, Me.GetFaxRecOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetFaxRecOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetFaxRecCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetFaxRecCompleted(Me, New GetFaxRecCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/InsetFaxRec", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function InsetFaxRec(ByVal ID As String, ByVal AgentID As String, ByVal ReceiveUserName As String, ByVal FaxNumber As String, ByVal FaxRecTime As String, ByVal FailCount As String, ByVal FaxTitle As String, ByVal FaxOrderTime As String, ByVal Memo As String, ByVal FaxResult As String, ByVal FaxSendTime As String, ByVal FileList As String, ByVal Priority As String, ByVal TempFileList As String) As String
            Dim results() As Object = Me.Invoke("InsetFaxRec", New Object() {ID, AgentID, ReceiveUserName, FaxNumber, FaxRecTime, FailCount, FaxTitle, FaxOrderTime, Memo, FaxResult, FaxSendTime, FileList, Priority, TempFileList})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub InsetFaxRecAsync(ByVal ID As String, ByVal AgentID As String, ByVal ReceiveUserName As String, ByVal FaxNumber As String, ByVal FaxRecTime As String, ByVal FailCount As String, ByVal FaxTitle As String, ByVal FaxOrderTime As String, ByVal Memo As String, ByVal FaxResult As String, ByVal FaxSendTime As String, ByVal FileList As String, ByVal Priority As String, ByVal TempFileList As String)
            Me.InsetFaxRecAsync(ID, AgentID, ReceiveUserName, FaxNumber, FaxRecTime, FailCount, FaxTitle, FaxOrderTime, Memo, FaxResult, FaxSendTime, FileList, Priority, TempFileList, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub InsetFaxRecAsync(ByVal ID As String, ByVal AgentID As String, ByVal ReceiveUserName As String, ByVal FaxNumber As String, ByVal FaxRecTime As String, ByVal FailCount As String, ByVal FaxTitle As String, ByVal FaxOrderTime As String, ByVal Memo As String, ByVal FaxResult As String, ByVal FaxSendTime As String, ByVal FileList As String, ByVal Priority As String, ByVal TempFileList As String, ByVal userState As Object)
            If (Me.InsetFaxRecOperationCompleted Is Nothing) Then
                Me.InsetFaxRecOperationCompleted = AddressOf Me.OnInsetFaxRecOperationCompleted
            End If
            Me.InvokeAsync("InsetFaxRec", New Object() {ID, AgentID, ReceiveUserName, FaxNumber, FaxRecTime, FailCount, FaxTitle, FaxOrderTime, Memo, FaxResult, FaxSendTime, FileList, Priority, TempFileList}, Me.InsetFaxRecOperationCompleted, userState)
        End Sub
        
        Private Sub OnInsetFaxRecOperationCompleted(ByVal arg As Object)
            If (Not (Me.InsetFaxRecCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent InsetFaxRecCompleted(Me, New InsetFaxRecCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateFaxRec", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateFaxRec(ByVal ID As String, ByVal FailCount As String, ByVal FaxResult As String, ByVal FaxSendTime As String) As String
            Dim results() As Object = Me.Invoke("UpdateFaxRec", New Object() {ID, FailCount, FaxResult, FaxSendTime})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateFaxRecAsync(ByVal ID As String, ByVal FailCount As String, ByVal FaxResult As String, ByVal FaxSendTime As String)
            Me.UpdateFaxRecAsync(ID, FailCount, FaxResult, FaxSendTime, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateFaxRecAsync(ByVal ID As String, ByVal FailCount As String, ByVal FaxResult As String, ByVal FaxSendTime As String, ByVal userState As Object)
            If (Me.UpdateFaxRecOperationCompleted Is Nothing) Then
                Me.UpdateFaxRecOperationCompleted = AddressOf Me.OnUpdateFaxRecOperationCompleted
            End If
            Me.InvokeAsync("UpdateFaxRec", New Object() {ID, FailCount, FaxResult, FaxSendTime}, Me.UpdateFaxRecOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateFaxRecOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateFaxRecCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateFaxRecCompleted(Me, New UpdateFaxRecCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Insert_Content_Report", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Insert_Content_Report(ByVal ContentPhone As String, ByVal ContentAgentID As String, ByVal ContentDatas As String, ByVal ContentEND As String) As String
            Dim results() As Object = Me.Invoke("Insert_Content_Report", New Object() {ContentPhone, ContentAgentID, ContentDatas, ContentEND})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub Insert_Content_ReportAsync(ByVal ContentPhone As String, ByVal ContentAgentID As String, ByVal ContentDatas As String, ByVal ContentEND As String)
            Me.Insert_Content_ReportAsync(ContentPhone, ContentAgentID, ContentDatas, ContentEND, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Insert_Content_ReportAsync(ByVal ContentPhone As String, ByVal ContentAgentID As String, ByVal ContentDatas As String, ByVal ContentEND As String, ByVal userState As Object)
            If (Me.Insert_Content_ReportOperationCompleted Is Nothing) Then
                Me.Insert_Content_ReportOperationCompleted = AddressOf Me.OnInsert_Content_ReportOperationCompleted
            End If
            Me.InvokeAsync("Insert_Content_Report", New Object() {ContentPhone, ContentAgentID, ContentDatas, ContentEND}, Me.Insert_Content_ReportOperationCompleted, userState)
        End Sub
        
        Private Sub OnInsert_Content_ReportOperationCompleted(ByVal arg As Object)
            If (Not (Me.Insert_Content_ReportCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Insert_Content_ReportCompleted(Me, New Insert_Content_ReportCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Check_Content_Report_Table", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Check_Content_Report_Table() As Boolean
            Dim results() As Object = Me.Invoke("Check_Content_Report_Table", New Object(-1) {})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub Check_Content_Report_TableAsync()
            Me.Check_Content_Report_TableAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Check_Content_Report_TableAsync(ByVal userState As Object)
            If (Me.Check_Content_Report_TableOperationCompleted Is Nothing) Then
                Me.Check_Content_Report_TableOperationCompleted = AddressOf Me.OnCheck_Content_Report_TableOperationCompleted
            End If
            Me.InvokeAsync("Check_Content_Report_Table", New Object(-1) {}, Me.Check_Content_Report_TableOperationCompleted, userState)
        End Sub
        
        Private Sub OnCheck_Content_Report_TableOperationCompleted(ByVal arg As Object)
            If (Not (Me.Check_Content_Report_TableCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Check_Content_Report_TableCompleted(Me, New Check_Content_Report_TableCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Insert_EmployeeMapping", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Insert_EmployeeMapping(ByVal employeeID As String) As String
            Dim results() As Object = Me.Invoke("Insert_EmployeeMapping", New Object() {employeeID})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub Insert_EmployeeMappingAsync(ByVal employeeID As String)
            Me.Insert_EmployeeMappingAsync(employeeID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Insert_EmployeeMappingAsync(ByVal employeeID As String, ByVal userState As Object)
            If (Me.Insert_EmployeeMappingOperationCompleted Is Nothing) Then
                Me.Insert_EmployeeMappingOperationCompleted = AddressOf Me.OnInsert_EmployeeMappingOperationCompleted
            End If
            Me.InvokeAsync("Insert_EmployeeMapping", New Object() {employeeID}, Me.Insert_EmployeeMappingOperationCompleted, userState)
        End Sub
        
        Private Sub OnInsert_EmployeeMappingOperationCompleted(ByVal arg As Object)
            If (Not (Me.Insert_EmployeeMappingCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Insert_EmployeeMappingCompleted(Me, New Insert_EmployeeMappingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetEmployeeMapping", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetEmployeeMapping(ByVal employeeID As String) As Boolean
            Dim results() As Object = Me.Invoke("GetEmployeeMapping", New Object() {employeeID})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetEmployeeMappingAsync(ByVal employeeID As String)
            Me.GetEmployeeMappingAsync(employeeID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetEmployeeMappingAsync(ByVal employeeID As String, ByVal userState As Object)
            If (Me.GetEmployeeMappingOperationCompleted Is Nothing) Then
                Me.GetEmployeeMappingOperationCompleted = AddressOf Me.OnGetEmployeeMappingOperationCompleted
            End If
            Me.InvokeAsync("GetEmployeeMapping", New Object() {employeeID}, Me.GetEmployeeMappingOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetEmployeeMappingOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetEmployeeMappingCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetEmployeeMappingCompleted(Me, New GetEmployeeMappingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetOutsourcingFlag", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetOutsourcingFlag() As String
            Dim results() As Object = Me.Invoke("GetOutsourcingFlag", New Object(-1) {})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetOutsourcingFlagAsync()
            Me.GetOutsourcingFlagAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetOutsourcingFlagAsync(ByVal userState As Object)
            If (Me.GetOutsourcingFlagOperationCompleted Is Nothing) Then
                Me.GetOutsourcingFlagOperationCompleted = AddressOf Me.OnGetOutsourcingFlagOperationCompleted
            End If
            Me.InvokeAsync("GetOutsourcingFlag", New Object(-1) {}, Me.GetOutsourcingFlagOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetOutsourcingFlagOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetOutsourcingFlagCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetOutsourcingFlagCompleted(Me, New GetOutsourcingFlagCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SetOutsourcingFlag", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SetOutsourcingFlag() As String
            Dim results() As Object = Me.Invoke("SetOutsourcingFlag", New Object(-1) {})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SetOutsourcingFlagAsync()
            Me.SetOutsourcingFlagAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SetOutsourcingFlagAsync(ByVal userState As Object)
            If (Me.SetOutsourcingFlagOperationCompleted Is Nothing) Then
                Me.SetOutsourcingFlagOperationCompleted = AddressOf Me.OnSetOutsourcingFlagOperationCompleted
            End If
            Me.InvokeAsync("SetOutsourcingFlag", New Object(-1) {}, Me.SetOutsourcingFlagOperationCompleted, userState)
        End Sub
        
        Private Sub OnSetOutsourcingFlagOperationCompleted(ByVal arg As Object)
            If (Not (Me.SetOutsourcingFlagCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SetOutsourcingFlagCompleted(Me, New SetOutsourcingFlagCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SetOutsourcingLog", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SetOutsourcingLog(ByVal OutsourcingID As String, ByVal OutsourcingName As String, ByVal RecTime As String, ByVal Phone As String, ByVal Ext1 As String, ByVal Ext2 As String) As String
            Dim results() As Object = Me.Invoke("SetOutsourcingLog", New Object() {OutsourcingID, OutsourcingName, RecTime, Phone, Ext1, Ext2})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SetOutsourcingLogAsync(ByVal OutsourcingID As String, ByVal OutsourcingName As String, ByVal RecTime As String, ByVal Phone As String, ByVal Ext1 As String, ByVal Ext2 As String)
            Me.SetOutsourcingLogAsync(OutsourcingID, OutsourcingName, RecTime, Phone, Ext1, Ext2, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SetOutsourcingLogAsync(ByVal OutsourcingID As String, ByVal OutsourcingName As String, ByVal RecTime As String, ByVal Phone As String, ByVal Ext1 As String, ByVal Ext2 As String, ByVal userState As Object)
            If (Me.SetOutsourcingLogOperationCompleted Is Nothing) Then
                Me.SetOutsourcingLogOperationCompleted = AddressOf Me.OnSetOutsourcingLogOperationCompleted
            End If
            Me.InvokeAsync("SetOutsourcingLog", New Object() {OutsourcingID, OutsourcingName, RecTime, Phone, Ext1, Ext2}, Me.SetOutsourcingLogOperationCompleted, userState)
        End Sub
        
        Private Sub OnSetOutsourcingLogOperationCompleted(ByVal arg As Object)
            If (Not (Me.SetOutsourcingLogCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SetOutsourcingLogCompleted(Me, New SetOutsourcingLogCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetOutsourcingDefine", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetOutsourcingDefine() As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetOutsourcingDefine", New Object(-1) {})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetOutsourcingDefineAsync()
            Me.GetOutsourcingDefineAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetOutsourcingDefineAsync(ByVal userState As Object)
            If (Me.GetOutsourcingDefineOperationCompleted Is Nothing) Then
                Me.GetOutsourcingDefineOperationCompleted = AddressOf Me.OnGetOutsourcingDefineOperationCompleted
            End If
            Me.InvokeAsync("GetOutsourcingDefine", New Object(-1) {}, Me.GetOutsourcingDefineOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetOutsourcingDefineOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetOutsourcingDefineCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetOutsourcingDefineCompleted(Me, New GetOutsourcingDefineCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/InfoCenter_ExecSQL", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function InfoCenter_ExecSQL(ByVal sSqlScript As String) As String
            Dim results() As Object = Me.Invoke("InfoCenter_ExecSQL", New Object() {sSqlScript})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub InfoCenter_ExecSQLAsync(ByVal sSqlScript As String)
            Me.InfoCenter_ExecSQLAsync(sSqlScript, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub InfoCenter_ExecSQLAsync(ByVal sSqlScript As String, ByVal userState As Object)
            If (Me.InfoCenter_ExecSQLOperationCompleted Is Nothing) Then
                Me.InfoCenter_ExecSQLOperationCompleted = AddressOf Me.OnInfoCenter_ExecSQLOperationCompleted
            End If
            Me.InvokeAsync("InfoCenter_ExecSQL", New Object() {sSqlScript}, Me.InfoCenter_ExecSQLOperationCompleted, userState)
        End Sub
        
        Private Sub OnInfoCenter_ExecSQLOperationCompleted(ByVal arg As Object)
            If (Not (Me.InfoCenter_ExecSQLCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent InfoCenter_ExecSQLCompleted(Me, New InfoCenter_ExecSQLCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/InfoCenter_GetDatasetBySQL", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function InfoCenter_GetDatasetBySQL(ByVal sSql As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("InfoCenter_GetDatasetBySQL", New Object() {sSql})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub InfoCenter_GetDatasetBySQLAsync(ByVal sSql As String)
            Me.InfoCenter_GetDatasetBySQLAsync(sSql, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub InfoCenter_GetDatasetBySQLAsync(ByVal sSql As String, ByVal userState As Object)
            If (Me.InfoCenter_GetDatasetBySQLOperationCompleted Is Nothing) Then
                Me.InfoCenter_GetDatasetBySQLOperationCompleted = AddressOf Me.OnInfoCenter_GetDatasetBySQLOperationCompleted
            End If
            Me.InvokeAsync("InfoCenter_GetDatasetBySQL", New Object() {sSql}, Me.InfoCenter_GetDatasetBySQLOperationCompleted, userState)
        End Sub
        
        Private Sub OnInfoCenter_GetDatasetBySQLOperationCompleted(ByVal arg As Object)
            If (Not (Me.InfoCenter_GetDatasetBySQLCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent InfoCenter_GetDatasetBySQLCompleted(Me, New InfoCenter_GetDatasetBySQLCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/InfoDRS_ExecSQL", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function InfoDRS_ExecSQL(ByVal sSqlScript As String) As String
            Dim results() As Object = Me.Invoke("InfoDRS_ExecSQL", New Object() {sSqlScript})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub InfoDRS_ExecSQLAsync(ByVal sSqlScript As String)
            Me.InfoDRS_ExecSQLAsync(sSqlScript, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub InfoDRS_ExecSQLAsync(ByVal sSqlScript As String, ByVal userState As Object)
            If (Me.InfoDRS_ExecSQLOperationCompleted Is Nothing) Then
                Me.InfoDRS_ExecSQLOperationCompleted = AddressOf Me.OnInfoDRS_ExecSQLOperationCompleted
            End If
            Me.InvokeAsync("InfoDRS_ExecSQL", New Object() {sSqlScript}, Me.InfoDRS_ExecSQLOperationCompleted, userState)
        End Sub
        
        Private Sub OnInfoDRS_ExecSQLOperationCompleted(ByVal arg As Object)
            If (Not (Me.InfoDRS_ExecSQLCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent InfoDRS_ExecSQLCompleted(Me, New InfoDRS_ExecSQLCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/InfoDRS_GetDatasetBySQL", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function InfoDRS_GetDatasetBySQL(ByVal sSql As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("InfoDRS_GetDatasetBySQL", New Object() {sSql})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub InfoDRS_GetDatasetBySQLAsync(ByVal sSql As String)
            Me.InfoDRS_GetDatasetBySQLAsync(sSql, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub InfoDRS_GetDatasetBySQLAsync(ByVal sSql As String, ByVal userState As Object)
            If (Me.InfoDRS_GetDatasetBySQLOperationCompleted Is Nothing) Then
                Me.InfoDRS_GetDatasetBySQLOperationCompleted = AddressOf Me.OnInfoDRS_GetDatasetBySQLOperationCompleted
            End If
            Me.InvokeAsync("InfoDRS_GetDatasetBySQL", New Object() {sSql}, Me.InfoDRS_GetDatasetBySQLOperationCompleted, userState)
        End Sub
        
        Private Sub OnInfoDRS_GetDatasetBySQLOperationCompleted(ByVal arg As Object)
            If (Not (Me.InfoDRS_GetDatasetBySQLCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent InfoDRS_GetDatasetBySQLCompleted(Me, New InfoDRS_GetDatasetBySQLCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Get_1TV_OutBound_Data", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Get_1TV_OutBound_Data(ByVal ColumnName As String, ByVal ColumnValue As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("Get_1TV_OutBound_Data", New Object() {ColumnName, ColumnValue})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub Get_1TV_OutBound_DataAsync(ByVal ColumnName As String, ByVal ColumnValue As String)
            Me.Get_1TV_OutBound_DataAsync(ColumnName, ColumnValue, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Get_1TV_OutBound_DataAsync(ByVal ColumnName As String, ByVal ColumnValue As String, ByVal userState As Object)
            If (Me.Get_1TV_OutBound_DataOperationCompleted Is Nothing) Then
                Me.Get_1TV_OutBound_DataOperationCompleted = AddressOf Me.OnGet_1TV_OutBound_DataOperationCompleted
            End If
            Me.InvokeAsync("Get_1TV_OutBound_Data", New Object() {ColumnName, ColumnValue}, Me.Get_1TV_OutBound_DataOperationCompleted, userState)
        End Sub
        
        Private Sub OnGet_1TV_OutBound_DataOperationCompleted(ByVal arg As Object)
            If (Not (Me.Get_1TV_OutBound_DataCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Get_1TV_OutBound_DataCompleted(Me, New Get_1TV_OutBound_DataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetQuestionCount", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetQuestionCount(ByVal ActionMode As String, ByVal AgentID As String) As Integer
            Dim results() As Object = Me.Invoke("GetQuestionCount", New Object() {ActionMode, AgentID})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetQuestionCountAsync(ByVal ActionMode As String, ByVal AgentID As String)
            Me.GetQuestionCountAsync(ActionMode, AgentID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetQuestionCountAsync(ByVal ActionMode As String, ByVal AgentID As String, ByVal userState As Object)
            If (Me.GetQuestionCountOperationCompleted Is Nothing) Then
                Me.GetQuestionCountOperationCompleted = AddressOf Me.OnGetQuestionCountOperationCompleted
            End If
            Me.InvokeAsync("GetQuestionCount", New Object() {ActionMode, AgentID}, Me.GetQuestionCountOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetQuestionCountOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetQuestionCountCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetQuestionCountCompleted(Me, New GetQuestionCountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/InfoACD_GetDatasetBySQL", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function InfoACD_GetDatasetBySQL(ByVal sSql As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("InfoACD_GetDatasetBySQL", New Object() {sSql})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub InfoACD_GetDatasetBySQLAsync(ByVal sSql As String)
            Me.InfoACD_GetDatasetBySQLAsync(sSql, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub InfoACD_GetDatasetBySQLAsync(ByVal sSql As String, ByVal userState As Object)
            If (Me.InfoACD_GetDatasetBySQLOperationCompleted Is Nothing) Then
                Me.InfoACD_GetDatasetBySQLOperationCompleted = AddressOf Me.OnInfoACD_GetDatasetBySQLOperationCompleted
            End If
            Me.InvokeAsync("InfoACD_GetDatasetBySQL", New Object() {sSql}, Me.InfoACD_GetDatasetBySQLOperationCompleted, userState)
        End Sub
        
        Private Sub OnInfoACD_GetDatasetBySQLOperationCompleted(ByVal arg As Object)
            If (Not (Me.InfoACD_GetDatasetBySQLCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent InfoACD_GetDatasetBySQLCompleted(Me, New InfoACD_GetDatasetBySQLCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/InfoCenter_GetReasonList", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function InfoCenter_GetReasonList() As System.Data.DataSet
            Dim results() As Object = Me.Invoke("InfoCenter_GetReasonList", New Object(-1) {})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub InfoCenter_GetReasonListAsync()
            Me.InfoCenter_GetReasonListAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub InfoCenter_GetReasonListAsync(ByVal userState As Object)
            If (Me.InfoCenter_GetReasonListOperationCompleted Is Nothing) Then
                Me.InfoCenter_GetReasonListOperationCompleted = AddressOf Me.OnInfoCenter_GetReasonListOperationCompleted
            End If
            Me.InvokeAsync("InfoCenter_GetReasonList", New Object(-1) {}, Me.InfoCenter_GetReasonListOperationCompleted, userState)
        End Sub
        
        Private Sub OnInfoCenter_GetReasonListOperationCompleted(ByVal arg As Object)
            If (Not (Me.InfoCenter_GetReasonListCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent InfoCenter_GetReasonListCompleted(Me, New InfoCenter_GetReasonListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/InfoInBox_ExecSQL", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function InfoInBox_ExecSQL(ByVal sSqlScript As String) As String
            Dim results() As Object = Me.Invoke("InfoInBox_ExecSQL", New Object() {sSqlScript})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub InfoInBox_ExecSQLAsync(ByVal sSqlScript As String)
            Me.InfoInBox_ExecSQLAsync(sSqlScript, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub InfoInBox_ExecSQLAsync(ByVal sSqlScript As String, ByVal userState As Object)
            If (Me.InfoInBox_ExecSQLOperationCompleted Is Nothing) Then
                Me.InfoInBox_ExecSQLOperationCompleted = AddressOf Me.OnInfoInBox_ExecSQLOperationCompleted
            End If
            Me.InvokeAsync("InfoInBox_ExecSQL", New Object() {sSqlScript}, Me.InfoInBox_ExecSQLOperationCompleted, userState)
        End Sub
        
        Private Sub OnInfoInBox_ExecSQLOperationCompleted(ByVal arg As Object)
            If (Not (Me.InfoInBox_ExecSQLCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent InfoInBox_ExecSQLCompleted(Me, New InfoInBox_ExecSQLCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/InfoInBox_GetDatasetBySQL", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function InfoInBox_GetDatasetBySQL(ByVal sSql As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("InfoInBox_GetDatasetBySQL", New Object() {sSql})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub InfoInBox_GetDatasetBySQLAsync(ByVal sSql As String)
            Me.InfoInBox_GetDatasetBySQLAsync(sSql, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub InfoInBox_GetDatasetBySQLAsync(ByVal sSql As String, ByVal userState As Object)
            If (Me.InfoInBox_GetDatasetBySQLOperationCompleted Is Nothing) Then
                Me.InfoInBox_GetDatasetBySQLOperationCompleted = AddressOf Me.OnInfoInBox_GetDatasetBySQLOperationCompleted
            End If
            Me.InvokeAsync("InfoInBox_GetDatasetBySQL", New Object() {sSql}, Me.InfoInBox_GetDatasetBySQLOperationCompleted, userState)
        End Sub
        
        Private Sub OnInfoInBox_GetDatasetBySQLOperationCompleted(ByVal arg As Object)
            If (Not (Me.InfoInBox_GetDatasetBySQLCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent InfoInBox_GetDatasetBySQLCompleted(Me, New InfoInBox_GetDatasetBySQLCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/InfoTM_ExecSQL", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function InfoTM_ExecSQL(ByVal sSqlScript As String) As String
            Dim results() As Object = Me.Invoke("InfoTM_ExecSQL", New Object() {sSqlScript})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub InfoTM_ExecSQLAsync(ByVal sSqlScript As String)
            Me.InfoTM_ExecSQLAsync(sSqlScript, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub InfoTM_ExecSQLAsync(ByVal sSqlScript As String, ByVal userState As Object)
            If (Me.InfoTM_ExecSQLOperationCompleted Is Nothing) Then
                Me.InfoTM_ExecSQLOperationCompleted = AddressOf Me.OnInfoTM_ExecSQLOperationCompleted
            End If
            Me.InvokeAsync("InfoTM_ExecSQL", New Object() {sSqlScript}, Me.InfoTM_ExecSQLOperationCompleted, userState)
        End Sub
        
        Private Sub OnInfoTM_ExecSQLOperationCompleted(ByVal arg As Object)
            If (Not (Me.InfoTM_ExecSQLCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent InfoTM_ExecSQLCompleted(Me, New InfoTM_ExecSQLCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/InfoTM_GetDatasetBySQL", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function InfoTM_GetDatasetBySQL(ByVal sSql As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("InfoTM_GetDatasetBySQL", New Object() {sSql})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub InfoTM_GetDatasetBySQLAsync(ByVal sSql As String)
            Me.InfoTM_GetDatasetBySQLAsync(sSql, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub InfoTM_GetDatasetBySQLAsync(ByVal sSql As String, ByVal userState As Object)
            If (Me.InfoTM_GetDatasetBySQLOperationCompleted Is Nothing) Then
                Me.InfoTM_GetDatasetBySQLOperationCompleted = AddressOf Me.OnInfoTM_GetDatasetBySQLOperationCompleted
            End If
            Me.InvokeAsync("InfoTM_GetDatasetBySQL", New Object() {sSql}, Me.InfoTM_GetDatasetBySQLOperationCompleted, userState)
        End Sub
        
        Private Sub OnInfoTM_GetDatasetBySQLOperationCompleted(ByVal arg As Object)
            If (Not (Me.InfoTM_GetDatasetBySQLCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent InfoTM_GetDatasetBySQLCompleted(Me, New InfoTM_GetDatasetBySQLCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/InfoTM_GetDataset", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function InfoTM_GetDataset() As System.Data.DataSet
            Dim results() As Object = Me.Invoke("InfoTM_GetDataset", New Object(-1) {})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub InfoTM_GetDatasetAsync()
            Me.InfoTM_GetDatasetAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub InfoTM_GetDatasetAsync(ByVal userState As Object)
            If (Me.InfoTM_GetDatasetOperationCompleted Is Nothing) Then
                Me.InfoTM_GetDatasetOperationCompleted = AddressOf Me.OnInfoTM_GetDatasetOperationCompleted
            End If
            Me.InvokeAsync("InfoTM_GetDataset", New Object(-1) {}, Me.InfoTM_GetDatasetOperationCompleted, userState)
        End Sub
        
        Private Sub OnInfoTM_GetDatasetOperationCompleted(ByVal arg As Object)
            If (Not (Me.InfoTM_GetDatasetCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent InfoTM_GetDatasetCompleted(Me, New InfoTM_GetDatasetCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CreateCookies", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CreateCookies(ByVal AgentID As String, ByVal PhoneNumber As String, ByVal TKID As String) As Boolean
            Dim results() As Object = Me.Invoke("CreateCookies", New Object() {AgentID, PhoneNumber, TKID})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CreateCookiesAsync(ByVal AgentID As String, ByVal PhoneNumber As String, ByVal TKID As String)
            Me.CreateCookiesAsync(AgentID, PhoneNumber, TKID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CreateCookiesAsync(ByVal AgentID As String, ByVal PhoneNumber As String, ByVal TKID As String, ByVal userState As Object)
            If (Me.CreateCookiesOperationCompleted Is Nothing) Then
                Me.CreateCookiesOperationCompleted = AddressOf Me.OnCreateCookiesOperationCompleted
            End If
            Me.InvokeAsync("CreateCookies", New Object() {AgentID, PhoneNumber, TKID}, Me.CreateCookiesOperationCompleted, userState)
        End Sub
        
        Private Sub OnCreateCookiesOperationCompleted(ByVal arg As Object)
            If (Not (Me.CreateCookiesCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CreateCookiesCompleted(Me, New CreateCookiesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ClearCookies", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ClearCookies(ByVal AgentID As String) As Boolean
            Dim results() As Object = Me.Invoke("ClearCookies", New Object() {AgentID})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ClearCookiesAsync(ByVal AgentID As String)
            Me.ClearCookiesAsync(AgentID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ClearCookiesAsync(ByVal AgentID As String, ByVal userState As Object)
            If (Me.ClearCookiesOperationCompleted Is Nothing) Then
                Me.ClearCookiesOperationCompleted = AddressOf Me.OnClearCookiesOperationCompleted
            End If
            Me.InvokeAsync("ClearCookies", New Object() {AgentID}, Me.ClearCookiesOperationCompleted, userState)
        End Sub
        
        Private Sub OnClearCookiesOperationCompleted(ByVal arg As Object)
            If (Not (Me.ClearCookiesCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ClearCookiesCompleted(Me, New ClearCookiesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetCookies", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetCookies(ByVal AgentID As String) As String
            Dim results() As Object = Me.Invoke("GetCookies", New Object() {AgentID})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetCookiesAsync(ByVal AgentID As String)
            Me.GetCookiesAsync(AgentID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetCookiesAsync(ByVal AgentID As String, ByVal userState As Object)
            If (Me.GetCookiesOperationCompleted Is Nothing) Then
                Me.GetCookiesOperationCompleted = AddressOf Me.OnGetCookiesOperationCompleted
            End If
            Me.InvokeAsync("GetCookies", New Object() {AgentID}, Me.GetCookiesOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetCookiesOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetCookiesCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetCookiesCompleted(Me, New GetCookiesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Incenter_GetDatasetBySQL", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Incenter_GetDatasetBySQL(ByVal sSql As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("Incenter_GetDatasetBySQL", New Object() {sSql})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub Incenter_GetDatasetBySQLAsync(ByVal sSql As String)
            Me.Incenter_GetDatasetBySQLAsync(sSql, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Incenter_GetDatasetBySQLAsync(ByVal sSql As String, ByVal userState As Object)
            If (Me.Incenter_GetDatasetBySQLOperationCompleted Is Nothing) Then
                Me.Incenter_GetDatasetBySQLOperationCompleted = AddressOf Me.OnIncenter_GetDatasetBySQLOperationCompleted
            End If
            Me.InvokeAsync("Incenter_GetDatasetBySQL", New Object() {sSql}, Me.Incenter_GetDatasetBySQLOperationCompleted, userState)
        End Sub
        
        Private Sub OnIncenter_GetDatasetBySQLOperationCompleted(ByVal arg As Object)
            If (Not (Me.Incenter_GetDatasetBySQLCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Incenter_GetDatasetBySQLCompleted(Me, New Incenter_GetDatasetBySQLCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/First_GetCustomer_Branch", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function First_GetCustomer_Branch(ByVal Customer_ID As String) As String
            Dim results() As Object = Me.Invoke("First_GetCustomer_Branch", New Object() {Customer_ID})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub First_GetCustomer_BranchAsync(ByVal Customer_ID As String)
            Me.First_GetCustomer_BranchAsync(Customer_ID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub First_GetCustomer_BranchAsync(ByVal Customer_ID As String, ByVal userState As Object)
            If (Me.First_GetCustomer_BranchOperationCompleted Is Nothing) Then
                Me.First_GetCustomer_BranchOperationCompleted = AddressOf Me.OnFirst_GetCustomer_BranchOperationCompleted
            End If
            Me.InvokeAsync("First_GetCustomer_Branch", New Object() {Customer_ID}, Me.First_GetCustomer_BranchOperationCompleted, userState)
        End Sub
        
        Private Sub OnFirst_GetCustomer_BranchOperationCompleted(ByVal arg As Object)
            If (Not (Me.First_GetCustomer_BranchCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent First_GetCustomer_BranchCompleted(Me, New First_GetCustomer_BranchCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/First_GetStatus", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function First_GetStatus(ByVal StatusNo As String) As String
            Dim results() As Object = Me.Invoke("First_GetStatus", New Object() {StatusNo})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub First_GetStatusAsync(ByVal StatusNo As String)
            Me.First_GetStatusAsync(StatusNo, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub First_GetStatusAsync(ByVal StatusNo As String, ByVal userState As Object)
            If (Me.First_GetStatusOperationCompleted Is Nothing) Then
                Me.First_GetStatusOperationCompleted = AddressOf Me.OnFirst_GetStatusOperationCompleted
            End If
            Me.InvokeAsync("First_GetStatus", New Object() {StatusNo}, Me.First_GetStatusOperationCompleted, userState)
        End Sub
        
        Private Sub OnFirst_GetStatusOperationCompleted(ByVal arg As Object)
            If (Not (Me.First_GetStatusCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent First_GetStatusCompleted(Me, New First_GetStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetStatus_All", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetStatus_All() As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetStatus_All", New Object(-1) {})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetStatus_AllAsync()
            Me.GetStatus_AllAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetStatus_AllAsync(ByVal userState As Object)
            If (Me.GetStatus_AllOperationCompleted Is Nothing) Then
                Me.GetStatus_AllOperationCompleted = AddressOf Me.OnGetStatus_AllOperationCompleted
            End If
            Me.InvokeAsync("GetStatus_All", New Object(-1) {}, Me.GetStatus_AllOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetStatus_AllOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetStatus_AllCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetStatus_AllCompleted(Me, New GetStatus_AllCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/First_InsertInbound", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub First_InsertInbound(ByVal Customer_ID As String, ByVal Customer_Branch As String, ByVal Begin_Date As String, ByVal Begin_Time As String, ByVal END_Date As String, ByVal END_Time As String, ByVal Status As String)
            Me.Invoke("First_InsertInbound", New Object() {Customer_ID, Customer_Branch, Begin_Date, Begin_Time, END_Date, END_Time, Status})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub First_InsertInboundAsync(ByVal Customer_ID As String, ByVal Customer_Branch As String, ByVal Begin_Date As String, ByVal Begin_Time As String, ByVal END_Date As String, ByVal END_Time As String, ByVal Status As String)
            Me.First_InsertInboundAsync(Customer_ID, Customer_Branch, Begin_Date, Begin_Time, END_Date, END_Time, Status, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub First_InsertInboundAsync(ByVal Customer_ID As String, ByVal Customer_Branch As String, ByVal Begin_Date As String, ByVal Begin_Time As String, ByVal END_Date As String, ByVal END_Time As String, ByVal Status As String, ByVal userState As Object)
            If (Me.First_InsertInboundOperationCompleted Is Nothing) Then
                Me.First_InsertInboundOperationCompleted = AddressOf Me.OnFirst_InsertInboundOperationCompleted
            End If
            Me.InvokeAsync("First_InsertInbound", New Object() {Customer_ID, Customer_Branch, Begin_Date, Begin_Time, END_Date, END_Time, Status}, Me.First_InsertInboundOperationCompleted, userState)
        End Sub
        
        Private Sub OnFirst_InsertInboundOperationCompleted(ByVal arg As Object)
            If (Not (Me.First_InsertInboundCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent First_InsertInboundCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetCallInfo", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetCallInfo(ByVal sCallID As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetCallInfo", New Object() {sCallID})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetCallInfoAsync(ByVal sCallID As String)
            Me.GetCallInfoAsync(sCallID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetCallInfoAsync(ByVal sCallID As String, ByVal userState As Object)
            If (Me.GetCallInfoOperationCompleted Is Nothing) Then
                Me.GetCallInfoOperationCompleted = AddressOf Me.OnGetCallInfoOperationCompleted
            End If
            Me.InvokeAsync("GetCallInfo", New Object() {sCallID}, Me.GetCallInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetCallInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetCallInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetCallInfoCompleted(Me, New GetCallInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DeleteCallInfo", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub DeleteCallInfo(ByVal sCallID As String)
            Me.Invoke("DeleteCallInfo", New Object() {sCallID})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteCallInfoAsync(ByVal sCallID As String)
            Me.DeleteCallInfoAsync(sCallID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteCallInfoAsync(ByVal sCallID As String, ByVal userState As Object)
            If (Me.DeleteCallInfoOperationCompleted Is Nothing) Then
                Me.DeleteCallInfoOperationCompleted = AddressOf Me.OnDeleteCallInfoOperationCompleted
            End If
            Me.InvokeAsync("DeleteCallInfo", New Object() {sCallID}, Me.DeleteCallInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteCallInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteCallInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteCallInfoCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetMuitCallInfo", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetMuitCallInfo(ByVal sCallID As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetMuitCallInfo", New Object() {sCallID})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetMuitCallInfoAsync(ByVal sCallID As String)
            Me.GetMuitCallInfoAsync(sCallID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetMuitCallInfoAsync(ByVal sCallID As String, ByVal userState As Object)
            If (Me.GetMuitCallInfoOperationCompleted Is Nothing) Then
                Me.GetMuitCallInfoOperationCompleted = AddressOf Me.OnGetMuitCallInfoOperationCompleted
            End If
            Me.InvokeAsync("GetMuitCallInfo", New Object() {sCallID}, Me.GetMuitCallInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetMuitCallInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetMuitCallInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetMuitCallInfoCompleted(Me, New GetMuitCallInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetTalkInfo", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetTalkInfo(ByVal sMsgID As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetTalkInfo", New Object() {sMsgID})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetTalkInfoAsync(ByVal sMsgID As String)
            Me.GetTalkInfoAsync(sMsgID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetTalkInfoAsync(ByVal sMsgID As String, ByVal userState As Object)
            If (Me.GetTalkInfoOperationCompleted Is Nothing) Then
                Me.GetTalkInfoOperationCompleted = AddressOf Me.OnGetTalkInfoOperationCompleted
            End If
            Me.InvokeAsync("GetTalkInfo", New Object() {sMsgID}, Me.GetTalkInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetTalkInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetTalkInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetTalkInfoCompleted(Me, New GetTalkInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetTalkInfo_V2", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetTalkInfo_V2() As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetTalkInfo_V2", New Object(-1) {})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetTalkInfo_V2Async()
            Me.GetTalkInfo_V2Async(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetTalkInfo_V2Async(ByVal userState As Object)
            If (Me.GetTalkInfo_V2OperationCompleted Is Nothing) Then
                Me.GetTalkInfo_V2OperationCompleted = AddressOf Me.OnGetTalkInfo_V2OperationCompleted
            End If
            Me.InvokeAsync("GetTalkInfo_V2", New Object(-1) {}, Me.GetTalkInfo_V2OperationCompleted, userState)
        End Sub
        
        Private Sub OnGetTalkInfo_V2OperationCompleted(ByVal arg As Object)
            If (Not (Me.GetTalkInfo_V2CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetTalkInfo_V2Completed(Me, New GetTalkInfo_V2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetTalkConfig", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetTalkConfig() As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetTalkConfig", New Object(-1) {})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetTalkConfigAsync()
            Me.GetTalkConfigAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetTalkConfigAsync(ByVal userState As Object)
            If (Me.GetTalkConfigOperationCompleted Is Nothing) Then
                Me.GetTalkConfigOperationCompleted = AddressOf Me.OnGetTalkConfigOperationCompleted
            End If
            Me.InvokeAsync("GetTalkConfig", New Object(-1) {}, Me.GetTalkConfigOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetTalkConfigOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetTalkConfigCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetTalkConfigCompleted(Me, New GetTalkConfigCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SetTalkInfo", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub SetTalkInfo(ByVal sURL As String, ByVal sTalk As String, ByVal sMsgID As String)
            Me.Invoke("SetTalkInfo", New Object() {sURL, sTalk, sMsgID})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SetTalkInfoAsync(ByVal sURL As String, ByVal sTalk As String, ByVal sMsgID As String)
            Me.SetTalkInfoAsync(sURL, sTalk, sMsgID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SetTalkInfoAsync(ByVal sURL As String, ByVal sTalk As String, ByVal sMsgID As String, ByVal userState As Object)
            If (Me.SetTalkInfoOperationCompleted Is Nothing) Then
                Me.SetTalkInfoOperationCompleted = AddressOf Me.OnSetTalkInfoOperationCompleted
            End If
            Me.InvokeAsync("SetTalkInfo", New Object() {sURL, sTalk, sMsgID}, Me.SetTalkInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnSetTalkInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.SetTalkInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SetTalkInfoCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateTalkInfo", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub UpdateTalkInfo(ByVal sURL As String, ByVal sTalk As String, ByVal sID As String)
            Me.Invoke("UpdateTalkInfo", New Object() {sURL, sTalk, sID})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateTalkInfoAsync(ByVal sURL As String, ByVal sTalk As String, ByVal sID As String)
            Me.UpdateTalkInfoAsync(sURL, sTalk, sID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateTalkInfoAsync(ByVal sURL As String, ByVal sTalk As String, ByVal sID As String, ByVal userState As Object)
            If (Me.UpdateTalkInfoOperationCompleted Is Nothing) Then
                Me.UpdateTalkInfoOperationCompleted = AddressOf Me.OnUpdateTalkInfoOperationCompleted
            End If
            Me.InvokeAsync("UpdateTalkInfo", New Object() {sURL, sTalk, sID}, Me.UpdateTalkInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateTalkInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateTalkInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateTalkInfoCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DeleteTalkInfo", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub DeleteTalkInfo(ByVal sID As String)
            Me.Invoke("DeleteTalkInfo", New Object() {sID})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteTalkInfoAsync(ByVal sID As String)
            Me.DeleteTalkInfoAsync(sID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteTalkInfoAsync(ByVal sID As String, ByVal userState As Object)
            If (Me.DeleteTalkInfoOperationCompleted Is Nothing) Then
                Me.DeleteTalkInfoOperationCompleted = AddressOf Me.OnDeleteTalkInfoOperationCompleted
            End If
            Me.InvokeAsync("DeleteTalkInfo", New Object() {sID}, Me.DeleteTalkInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteTalkInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteTalkInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteTalkInfoCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SetTalkConfig", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub SetTalkConfig(ByVal sDisplayName As String, ByVal sLinkColumn As String, ByVal sDefaultValue As String, ByVal sDisplayColor As String)
            Me.Invoke("SetTalkConfig", New Object() {sDisplayName, sLinkColumn, sDefaultValue, sDisplayColor})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SetTalkConfigAsync(ByVal sDisplayName As String, ByVal sLinkColumn As String, ByVal sDefaultValue As String, ByVal sDisplayColor As String)
            Me.SetTalkConfigAsync(sDisplayName, sLinkColumn, sDefaultValue, sDisplayColor, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SetTalkConfigAsync(ByVal sDisplayName As String, ByVal sLinkColumn As String, ByVal sDefaultValue As String, ByVal sDisplayColor As String, ByVal userState As Object)
            If (Me.SetTalkConfigOperationCompleted Is Nothing) Then
                Me.SetTalkConfigOperationCompleted = AddressOf Me.OnSetTalkConfigOperationCompleted
            End If
            Me.InvokeAsync("SetTalkConfig", New Object() {sDisplayName, sLinkColumn, sDefaultValue, sDisplayColor}, Me.SetTalkConfigOperationCompleted, userState)
        End Sub
        
        Private Sub OnSetTalkConfigOperationCompleted(ByVal arg As Object)
            If (Not (Me.SetTalkConfigCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SetTalkConfigCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateTalkConfig", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub UpdateTalkConfig(ByVal sID As String, ByVal sDisplayName As String, ByVal sLinkColumn As String, ByVal sDefaultValue As String, ByVal sDisplayColor As String)
            Me.Invoke("UpdateTalkConfig", New Object() {sID, sDisplayName, sLinkColumn, sDefaultValue, sDisplayColor})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateTalkConfigAsync(ByVal sID As String, ByVal sDisplayName As String, ByVal sLinkColumn As String, ByVal sDefaultValue As String, ByVal sDisplayColor As String)
            Me.UpdateTalkConfigAsync(sID, sDisplayName, sLinkColumn, sDefaultValue, sDisplayColor, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateTalkConfigAsync(ByVal sID As String, ByVal sDisplayName As String, ByVal sLinkColumn As String, ByVal sDefaultValue As String, ByVal sDisplayColor As String, ByVal userState As Object)
            If (Me.UpdateTalkConfigOperationCompleted Is Nothing) Then
                Me.UpdateTalkConfigOperationCompleted = AddressOf Me.OnUpdateTalkConfigOperationCompleted
            End If
            Me.InvokeAsync("UpdateTalkConfig", New Object() {sID, sDisplayName, sLinkColumn, sDefaultValue, sDisplayColor}, Me.UpdateTalkConfigOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateTalkConfigOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateTalkConfigCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateTalkConfigCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DeleteTalkConfig", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub DeleteTalkConfig(ByVal sID As String)
            Me.Invoke("DeleteTalkConfig", New Object() {sID})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteTalkConfigAsync(ByVal sID As String)
            Me.DeleteTalkConfigAsync(sID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteTalkConfigAsync(ByVal sID As String, ByVal userState As Object)
            If (Me.DeleteTalkConfigOperationCompleted Is Nothing) Then
                Me.DeleteTalkConfigOperationCompleted = AddressOf Me.OnDeleteTalkConfigOperationCompleted
            End If
            Me.InvokeAsync("DeleteTalkConfig", New Object() {sID}, Me.DeleteTalkConfigOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteTalkConfigOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteTalkConfigCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteTalkConfigCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetDetailCusData", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetDetailCusData(ByVal CustomerID As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetDetailCusData", New Object() {CustomerID})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetDetailCusDataAsync(ByVal CustomerID As String)
            Me.GetDetailCusDataAsync(CustomerID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetDetailCusDataAsync(ByVal CustomerID As String, ByVal userState As Object)
            If (Me.GetDetailCusDataOperationCompleted Is Nothing) Then
                Me.GetDetailCusDataOperationCompleted = AddressOf Me.OnGetDetailCusDataOperationCompleted
            End If
            Me.InvokeAsync("GetDetailCusData", New Object() {CustomerID}, Me.GetDetailCusDataOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetDetailCusDataOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetDetailCusDataCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetDetailCusDataCompleted(Me, New GetDetailCusDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetSelectCusData", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetSelectCusData(ByVal sql As String, ByVal sTypeID As String, ByVal Values As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetSelectCusData", New Object() {sql, sTypeID, Values})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetSelectCusDataAsync(ByVal sql As String, ByVal sTypeID As String, ByVal Values As String)
            Me.GetSelectCusDataAsync(sql, sTypeID, Values, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetSelectCusDataAsync(ByVal sql As String, ByVal sTypeID As String, ByVal Values As String, ByVal userState As Object)
            If (Me.GetSelectCusDataOperationCompleted Is Nothing) Then
                Me.GetSelectCusDataOperationCompleted = AddressOf Me.OnGetSelectCusDataOperationCompleted
            End If
            Me.InvokeAsync("GetSelectCusData", New Object() {sql, sTypeID, Values}, Me.GetSelectCusDataOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetSelectCusDataOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetSelectCusDataCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetSelectCusDataCompleted(Me, New GetSelectCusDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetSelectCusData_V2", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetSelectCusData_V2(ByVal sql As String, ByVal sTypeID As String, ByVal Values As String, ByVal sColumNames As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetSelectCusData_V2", New Object() {sql, sTypeID, Values, sColumNames})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetSelectCusData_V2Async(ByVal sql As String, ByVal sTypeID As String, ByVal Values As String, ByVal sColumNames As String)
            Me.GetSelectCusData_V2Async(sql, sTypeID, Values, sColumNames, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetSelectCusData_V2Async(ByVal sql As String, ByVal sTypeID As String, ByVal Values As String, ByVal sColumNames As String, ByVal userState As Object)
            If (Me.GetSelectCusData_V2OperationCompleted Is Nothing) Then
                Me.GetSelectCusData_V2OperationCompleted = AddressOf Me.OnGetSelectCusData_V2OperationCompleted
            End If
            Me.InvokeAsync("GetSelectCusData_V2", New Object() {sql, sTypeID, Values, sColumNames}, Me.GetSelectCusData_V2OperationCompleted, userState)
        End Sub
        
        Private Sub OnGetSelectCusData_V2OperationCompleted(ByVal arg As Object)
            If (Not (Me.GetSelectCusData_V2CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetSelectCusData_V2Completed(Me, New GetSelectCusData_V2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetActivityDataList", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetActivityDataList(ByVal sACDGroup As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetActivityDataList", New Object() {sACDGroup})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetActivityDataListAsync(ByVal sACDGroup As String)
            Me.GetActivityDataListAsync(sACDGroup, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetActivityDataListAsync(ByVal sACDGroup As String, ByVal userState As Object)
            If (Me.GetActivityDataListOperationCompleted Is Nothing) Then
                Me.GetActivityDataListOperationCompleted = AddressOf Me.OnGetActivityDataListOperationCompleted
            End If
            Me.InvokeAsync("GetActivityDataList", New Object() {sACDGroup}, Me.GetActivityDataListOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetActivityDataListOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetActivityDataListCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetActivityDataListCompleted(Me, New GetActivityDataListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetActivityDataList_V2", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetActivityDataList_V2(ByVal sACDGroup As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetActivityDataList_V2", New Object() {sACDGroup})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetActivityDataList_V2Async(ByVal sACDGroup As String)
            Me.GetActivityDataList_V2Async(sACDGroup, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetActivityDataList_V2Async(ByVal sACDGroup As String, ByVal userState As Object)
            If (Me.GetActivityDataList_V2OperationCompleted Is Nothing) Then
                Me.GetActivityDataList_V2OperationCompleted = AddressOf Me.OnGetActivityDataList_V2OperationCompleted
            End If
            Me.InvokeAsync("GetActivityDataList_V2", New Object() {sACDGroup}, Me.GetActivityDataList_V2OperationCompleted, userState)
        End Sub
        
        Private Sub OnGetActivityDataList_V2OperationCompleted(ByVal arg As Object)
            If (Not (Me.GetActivityDataList_V2CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetActivityDataList_V2Completed(Me, New GetActivityDataList_V2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetActivityDataListAll", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetActivityDataListAll() As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetActivityDataListAll", New Object(-1) {})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetActivityDataListAllAsync()
            Me.GetActivityDataListAllAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetActivityDataListAllAsync(ByVal userState As Object)
            If (Me.GetActivityDataListAllOperationCompleted Is Nothing) Then
                Me.GetActivityDataListAllOperationCompleted = AddressOf Me.OnGetActivityDataListAllOperationCompleted
            End If
            Me.InvokeAsync("GetActivityDataListAll", New Object(-1) {}, Me.GetActivityDataListAllOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetActivityDataListAllOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetActivityDataListAllCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetActivityDataListAllCompleted(Me, New GetActivityDataListAllCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetACDGroups", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetACDGroups() As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetACDGroups", New Object(-1) {})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetACDGroupsAsync()
            Me.GetACDGroupsAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetACDGroupsAsync(ByVal userState As Object)
            If (Me.GetACDGroupsOperationCompleted Is Nothing) Then
                Me.GetACDGroupsOperationCompleted = AddressOf Me.OnGetACDGroupsOperationCompleted
            End If
            Me.InvokeAsync("GetACDGroups", New Object(-1) {}, Me.GetACDGroupsOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetACDGroupsOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetACDGroupsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetACDGroupsCompleted(Me, New GetACDGroupsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetACDGroups_V2", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetACDGroups_V2() As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetACDGroups_V2", New Object(-1) {})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetACDGroups_V2Async()
            Me.GetACDGroups_V2Async(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetACDGroups_V2Async(ByVal userState As Object)
            If (Me.GetACDGroups_V2OperationCompleted Is Nothing) Then
                Me.GetACDGroups_V2OperationCompleted = AddressOf Me.OnGetACDGroups_V2OperationCompleted
            End If
            Me.InvokeAsync("GetACDGroups_V2", New Object(-1) {}, Me.GetACDGroups_V2OperationCompleted, userState)
        End Sub
        
        Private Sub OnGetACDGroups_V2OperationCompleted(ByVal arg As Object)
            If (Not (Me.GetACDGroups_V2CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetACDGroups_V2Completed(Me, New GetACDGroups_V2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetACDGroups_V3", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetACDGroups_V3(ByVal AgentID As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetACDGroups_V3", New Object() {AgentID})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetACDGroups_V3Async(ByVal AgentID As String)
            Me.GetACDGroups_V3Async(AgentID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetACDGroups_V3Async(ByVal AgentID As String, ByVal userState As Object)
            If (Me.GetACDGroups_V3OperationCompleted Is Nothing) Then
                Me.GetACDGroups_V3OperationCompleted = AddressOf Me.OnGetACDGroups_V3OperationCompleted
            End If
            Me.InvokeAsync("GetACDGroups_V3", New Object() {AgentID}, Me.GetACDGroups_V3OperationCompleted, userState)
        End Sub
        
        Private Sub OnGetACDGroups_V3OperationCompleted(ByVal arg As Object)
            If (Not (Me.GetACDGroups_V3CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetACDGroups_V3Completed(Me, New GetACDGroups_V3CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetSysConfig", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetSysConfig(ByVal sUserType As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetSysConfig", New Object() {sUserType})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetSysConfigAsync(ByVal sUserType As String)
            Me.GetSysConfigAsync(sUserType, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetSysConfigAsync(ByVal sUserType As String, ByVal userState As Object)
            If (Me.GetSysConfigOperationCompleted Is Nothing) Then
                Me.GetSysConfigOperationCompleted = AddressOf Me.OnGetSysConfigOperationCompleted
            End If
            Me.InvokeAsync("GetSysConfig", New Object() {sUserType}, Me.GetSysConfigOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetSysConfigOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetSysConfigCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetSysConfigCompleted(Me, New GetSysConfigCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SetSysConfig", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub SetSysConfig(ByVal sUserType As String, ByVal sParameter As String)
            Me.Invoke("SetSysConfig", New Object() {sUserType, sParameter})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SetSysConfigAsync(ByVal sUserType As String, ByVal sParameter As String)
            Me.SetSysConfigAsync(sUserType, sParameter, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SetSysConfigAsync(ByVal sUserType As String, ByVal sParameter As String, ByVal userState As Object)
            If (Me.SetSysConfigOperationCompleted Is Nothing) Then
                Me.SetSysConfigOperationCompleted = AddressOf Me.OnSetSysConfigOperationCompleted
            End If
            Me.InvokeAsync("SetSysConfig", New Object() {sUserType, sParameter}, Me.SetSysConfigOperationCompleted, userState)
        End Sub
        
        Private Sub OnSetSysConfigOperationCompleted(ByVal arg As Object)
            If (Not (Me.SetSysConfigCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SetSysConfigCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateSysConfig", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub UpdateSysConfig(ByVal sID As String, ByVal sUserType As String, ByVal sName As String, ByVal sURL As String, ByVal sSelect As String, ByVal sGetSession As String, ByVal sClearSession As String, ByVal sSessionType As String)
            Me.Invoke("UpdateSysConfig", New Object() {sID, sUserType, sName, sURL, sSelect, sGetSession, sClearSession, sSessionType})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateSysConfigAsync(ByVal sID As String, ByVal sUserType As String, ByVal sName As String, ByVal sURL As String, ByVal sSelect As String, ByVal sGetSession As String, ByVal sClearSession As String, ByVal sSessionType As String)
            Me.UpdateSysConfigAsync(sID, sUserType, sName, sURL, sSelect, sGetSession, sClearSession, sSessionType, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateSysConfigAsync(ByVal sID As String, ByVal sUserType As String, ByVal sName As String, ByVal sURL As String, ByVal sSelect As String, ByVal sGetSession As String, ByVal sClearSession As String, ByVal sSessionType As String, ByVal userState As Object)
            If (Me.UpdateSysConfigOperationCompleted Is Nothing) Then
                Me.UpdateSysConfigOperationCompleted = AddressOf Me.OnUpdateSysConfigOperationCompleted
            End If
            Me.InvokeAsync("UpdateSysConfig", New Object() {sID, sUserType, sName, sURL, sSelect, sGetSession, sClearSession, sSessionType}, Me.UpdateSysConfigOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateSysConfigOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateSysConfigCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateSysConfigCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SetCallInfo", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SetCallInfo(ByVal sIVR As String, ByVal sCusData As String, ByVal sSelect As String, ByVal sMsg As String, ByVal sSMsg As String, ByVal sAdd As String, ByVal sURLValue As String, ByVal sTableName As String, ByVal sOtherURLValue As String, ByVal sTypeID As String) As String
            Dim results() As Object = Me.Invoke("SetCallInfo", New Object() {sIVR, sCusData, sSelect, sMsg, sSMsg, sAdd, sURLValue, sTableName, sOtherURLValue, sTypeID})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SetCallInfoAsync(ByVal sIVR As String, ByVal sCusData As String, ByVal sSelect As String, ByVal sMsg As String, ByVal sSMsg As String, ByVal sAdd As String, ByVal sURLValue As String, ByVal sTableName As String, ByVal sOtherURLValue As String, ByVal sTypeID As String)
            Me.SetCallInfoAsync(sIVR, sCusData, sSelect, sMsg, sSMsg, sAdd, sURLValue, sTableName, sOtherURLValue, sTypeID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SetCallInfoAsync(ByVal sIVR As String, ByVal sCusData As String, ByVal sSelect As String, ByVal sMsg As String, ByVal sSMsg As String, ByVal sAdd As String, ByVal sURLValue As String, ByVal sTableName As String, ByVal sOtherURLValue As String, ByVal sTypeID As String, ByVal userState As Object)
            If (Me.SetCallInfoOperationCompleted Is Nothing) Then
                Me.SetCallInfoOperationCompleted = AddressOf Me.OnSetCallInfoOperationCompleted
            End If
            Me.InvokeAsync("SetCallInfo", New Object() {sIVR, sCusData, sSelect, sMsg, sSMsg, sAdd, sURLValue, sTableName, sOtherURLValue, sTypeID}, Me.SetCallInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnSetCallInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.SetCallInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SetCallInfoCompleted(Me, New SetCallInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ReSetCallInfo", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ReSetCallInfo(ByVal sIVR As String, ByVal sCusData As String, ByVal sSelect As String, ByVal sMsg As String, ByVal sSMsg As String, ByVal sAdd As String, ByVal sURLValue As String, ByVal sTableName As String, ByVal sOtherURLValue As String, ByVal sTypeID As String, ByVal CallID As String) As String
            Dim results() As Object = Me.Invoke("ReSetCallInfo", New Object() {sIVR, sCusData, sSelect, sMsg, sSMsg, sAdd, sURLValue, sTableName, sOtherURLValue, sTypeID, CallID})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ReSetCallInfoAsync(ByVal sIVR As String, ByVal sCusData As String, ByVal sSelect As String, ByVal sMsg As String, ByVal sSMsg As String, ByVal sAdd As String, ByVal sURLValue As String, ByVal sTableName As String, ByVal sOtherURLValue As String, ByVal sTypeID As String, ByVal CallID As String)
            Me.ReSetCallInfoAsync(sIVR, sCusData, sSelect, sMsg, sSMsg, sAdd, sURLValue, sTableName, sOtherURLValue, sTypeID, CallID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ReSetCallInfoAsync(ByVal sIVR As String, ByVal sCusData As String, ByVal sSelect As String, ByVal sMsg As String, ByVal sSMsg As String, ByVal sAdd As String, ByVal sURLValue As String, ByVal sTableName As String, ByVal sOtherURLValue As String, ByVal sTypeID As String, ByVal CallID As String, ByVal userState As Object)
            If (Me.ReSetCallInfoOperationCompleted Is Nothing) Then
                Me.ReSetCallInfoOperationCompleted = AddressOf Me.OnReSetCallInfoOperationCompleted
            End If
            Me.InvokeAsync("ReSetCallInfo", New Object() {sIVR, sCusData, sSelect, sMsg, sSMsg, sAdd, sURLValue, sTableName, sOtherURLValue, sTypeID, CallID}, Me.ReSetCallInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnReSetCallInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.ReSetCallInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ReSetCallInfoCompleted(Me, New ReSetCallInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetNewID", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetNewID() As String
            Dim results() As Object = Me.Invoke("GetNewID", New Object(-1) {})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetNewIDAsync()
            Me.GetNewIDAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetNewIDAsync(ByVal userState As Object)
            If (Me.GetNewIDOperationCompleted Is Nothing) Then
                Me.GetNewIDOperationCompleted = AddressOf Me.OnGetNewIDOperationCompleted
            End If
            Me.InvokeAsync("GetNewID", New Object(-1) {}, Me.GetNewIDOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetNewIDOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetNewIDCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetNewIDCompleted(Me, New GetNewIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateCallInfo", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateCallInfo(ByVal sCallID As String, ByVal sOtherURLValue As String) As Boolean
            Dim results() As Object = Me.Invoke("UpdateCallInfo", New Object() {sCallID, sOtherURLValue})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateCallInfoAsync(ByVal sCallID As String, ByVal sOtherURLValue As String)
            Me.UpdateCallInfoAsync(sCallID, sOtherURLValue, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateCallInfoAsync(ByVal sCallID As String, ByVal sOtherURLValue As String, ByVal userState As Object)
            If (Me.UpdateCallInfoOperationCompleted Is Nothing) Then
                Me.UpdateCallInfoOperationCompleted = AddressOf Me.OnUpdateCallInfoOperationCompleted
            End If
            Me.InvokeAsync("UpdateCallInfo", New Object() {sCallID, sOtherURLValue}, Me.UpdateCallInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateCallInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateCallInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateCallInfoCompleted(Me, New UpdateCallInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetCallLog", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetCallLog(ByVal sDatakey As String, ByVal sTableName As String, ByVal sStartTime As String, ByVal sEndTime As String, ByVal bAgent As Boolean, ByVal sShowLog As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetCallLog", New Object() {sDatakey, sTableName, sStartTime, sEndTime, bAgent, sShowLog})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetCallLogAsync(ByVal sDatakey As String, ByVal sTableName As String, ByVal sStartTime As String, ByVal sEndTime As String, ByVal bAgent As Boolean, ByVal sShowLog As String)
            Me.GetCallLogAsync(sDatakey, sTableName, sStartTime, sEndTime, bAgent, sShowLog, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetCallLogAsync(ByVal sDatakey As String, ByVal sTableName As String, ByVal sStartTime As String, ByVal sEndTime As String, ByVal bAgent As Boolean, ByVal sShowLog As String, ByVal userState As Object)
            If (Me.GetCallLogOperationCompleted Is Nothing) Then
                Me.GetCallLogOperationCompleted = AddressOf Me.OnGetCallLogOperationCompleted
            End If
            Me.InvokeAsync("GetCallLog", New Object() {sDatakey, sTableName, sStartTime, sEndTime, bAgent, sShowLog}, Me.GetCallLogOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetCallLogOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetCallLogCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetCallLogCompleted(Me, New GetCallLogCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetCallLogByDatakey", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetCallLogByDatakey(ByVal sDatakey As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetCallLogByDatakey", New Object() {sDatakey})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetCallLogByDatakeyAsync(ByVal sDatakey As String)
            Me.GetCallLogByDatakeyAsync(sDatakey, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetCallLogByDatakeyAsync(ByVal sDatakey As String, ByVal userState As Object)
            If (Me.GetCallLogByDatakeyOperationCompleted Is Nothing) Then
                Me.GetCallLogByDatakeyOperationCompleted = AddressOf Me.OnGetCallLogByDatakeyOperationCompleted
            End If
            Me.InvokeAsync("GetCallLogByDatakey", New Object() {sDatakey}, Me.GetCallLogByDatakeyOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetCallLogByDatakeyOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetCallLogByDatakeyCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetCallLogByDatakeyCompleted(Me, New GetCallLogByDatakeyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetCallLogByPhone", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetCallLogByPhone(ByVal sPhone As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetCallLogByPhone", New Object() {sPhone})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetCallLogByPhoneAsync(ByVal sPhone As String)
            Me.GetCallLogByPhoneAsync(sPhone, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetCallLogByPhoneAsync(ByVal sPhone As String, ByVal userState As Object)
            If (Me.GetCallLogByPhoneOperationCompleted Is Nothing) Then
                Me.GetCallLogByPhoneOperationCompleted = AddressOf Me.OnGetCallLogByPhoneOperationCompleted
            End If
            Me.InvokeAsync("GetCallLogByPhone", New Object() {sPhone}, Me.GetCallLogByPhoneOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetCallLogByPhoneOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetCallLogByPhoneCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetCallLogByPhoneCompleted(Me, New GetCallLogByPhoneCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetCallLogByTKID", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetCallLogByTKID(ByVal sTKID As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetCallLogByTKID", New Object() {sTKID})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetCallLogByTKIDAsync(ByVal sTKID As String)
            Me.GetCallLogByTKIDAsync(sTKID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetCallLogByTKIDAsync(ByVal sTKID As String, ByVal userState As Object)
            If (Me.GetCallLogByTKIDOperationCompleted Is Nothing) Then
                Me.GetCallLogByTKIDOperationCompleted = AddressOf Me.OnGetCallLogByTKIDOperationCompleted
            End If
            Me.InvokeAsync("GetCallLogByTKID", New Object() {sTKID}, Me.GetCallLogByTKIDOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetCallLogByTKIDOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetCallLogByTKIDCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetCallLogByTKIDCompleted(Me, New GetCallLogByTKIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetCallLogByTKID_V2", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetCallLogByTKID_V2(ByVal sTKID As String, ByVal sDatakey As String, ByVal sStartTime As String, ByVal sEndTime As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetCallLogByTKID_V2", New Object() {sTKID, sDatakey, sStartTime, sEndTime})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetCallLogByTKID_V2Async(ByVal sTKID As String, ByVal sDatakey As String, ByVal sStartTime As String, ByVal sEndTime As String)
            Me.GetCallLogByTKID_V2Async(sTKID, sDatakey, sStartTime, sEndTime, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetCallLogByTKID_V2Async(ByVal sTKID As String, ByVal sDatakey As String, ByVal sStartTime As String, ByVal sEndTime As String, ByVal userState As Object)
            If (Me.GetCallLogByTKID_V2OperationCompleted Is Nothing) Then
                Me.GetCallLogByTKID_V2OperationCompleted = AddressOf Me.OnGetCallLogByTKID_V2OperationCompleted
            End If
            Me.InvokeAsync("GetCallLogByTKID_V2", New Object() {sTKID, sDatakey, sStartTime, sEndTime}, Me.GetCallLogByTKID_V2OperationCompleted, userState)
        End Sub
        
        Private Sub OnGetCallLogByTKID_V2OperationCompleted(ByVal arg As Object)
            If (Not (Me.GetCallLogByTKID_V2CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetCallLogByTKID_V2Completed(Me, New GetCallLogByTKID_V2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SetCallLog_V3", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SetCallLog_V3( _
                    ByVal sCallCallerID As String,  _
                    ByVal sComplain As String,  _
                    ByVal sCodelist As String,  _
                    ByVal sMemo As String,  _
                    ByVal sWeb As String,  _
                    ByVal sService_S_Time As String,  _
                    ByVal sService_D_Time As String,  _
                    ByVal sLastAgentID As String,  _
                    ByVal sDataKey As String,  _
                    ByVal LineType As String,  _
                    ByVal sIVRlog As String,  _
                    ByVal sTableName As String,  _
                    ByVal sURLog As String,  _
                    ByVal sAgentID As String,  _
                    ByVal sTypeID As String,  _
                    ByVal sCallOnPop As String,  _
                    ByVal sIVR_S_Time As String,  _
                    ByVal sIVR_D_Time As String,  _
                    ByVal sIVRInBoundInfo As String,  _
                    ByVal sSMemo As String,  _
                    ByVal CheckKey As String,  _
                    ByVal WEB_S_Time As String) As String
            Dim results() As Object = Me.Invoke("SetCallLog_V3", New Object() {sCallCallerID, sComplain, sCodelist, sMemo, sWeb, sService_S_Time, sService_D_Time, sLastAgentID, sDataKey, LineType, sIVRlog, sTableName, sURLog, sAgentID, sTypeID, sCallOnPop, sIVR_S_Time, sIVR_D_Time, sIVRInBoundInfo, sSMemo, CheckKey, WEB_S_Time})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SetCallLog_V3Async( _
                    ByVal sCallCallerID As String,  _
                    ByVal sComplain As String,  _
                    ByVal sCodelist As String,  _
                    ByVal sMemo As String,  _
                    ByVal sWeb As String,  _
                    ByVal sService_S_Time As String,  _
                    ByVal sService_D_Time As String,  _
                    ByVal sLastAgentID As String,  _
                    ByVal sDataKey As String,  _
                    ByVal LineType As String,  _
                    ByVal sIVRlog As String,  _
                    ByVal sTableName As String,  _
                    ByVal sURLog As String,  _
                    ByVal sAgentID As String,  _
                    ByVal sTypeID As String,  _
                    ByVal sCallOnPop As String,  _
                    ByVal sIVR_S_Time As String,  _
                    ByVal sIVR_D_Time As String,  _
                    ByVal sIVRInBoundInfo As String,  _
                    ByVal sSMemo As String,  _
                    ByVal CheckKey As String,  _
                    ByVal WEB_S_Time As String)
            Me.SetCallLog_V3Async(sCallCallerID, sComplain, sCodelist, sMemo, sWeb, sService_S_Time, sService_D_Time, sLastAgentID, sDataKey, LineType, sIVRlog, sTableName, sURLog, sAgentID, sTypeID, sCallOnPop, sIVR_S_Time, sIVR_D_Time, sIVRInBoundInfo, sSMemo, CheckKey, WEB_S_Time, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SetCallLog_V3Async( _
                    ByVal sCallCallerID As String,  _
                    ByVal sComplain As String,  _
                    ByVal sCodelist As String,  _
                    ByVal sMemo As String,  _
                    ByVal sWeb As String,  _
                    ByVal sService_S_Time As String,  _
                    ByVal sService_D_Time As String,  _
                    ByVal sLastAgentID As String,  _
                    ByVal sDataKey As String,  _
                    ByVal LineType As String,  _
                    ByVal sIVRlog As String,  _
                    ByVal sTableName As String,  _
                    ByVal sURLog As String,  _
                    ByVal sAgentID As String,  _
                    ByVal sTypeID As String,  _
                    ByVal sCallOnPop As String,  _
                    ByVal sIVR_S_Time As String,  _
                    ByVal sIVR_D_Time As String,  _
                    ByVal sIVRInBoundInfo As String,  _
                    ByVal sSMemo As String,  _
                    ByVal CheckKey As String,  _
                    ByVal WEB_S_Time As String,  _
                    ByVal userState As Object)
            If (Me.SetCallLog_V3OperationCompleted Is Nothing) Then
                Me.SetCallLog_V3OperationCompleted = AddressOf Me.OnSetCallLog_V3OperationCompleted
            End If
            Me.InvokeAsync("SetCallLog_V3", New Object() {sCallCallerID, sComplain, sCodelist, sMemo, sWeb, sService_S_Time, sService_D_Time, sLastAgentID, sDataKey, LineType, sIVRlog, sTableName, sURLog, sAgentID, sTypeID, sCallOnPop, sIVR_S_Time, sIVR_D_Time, sIVRInBoundInfo, sSMemo, CheckKey, WEB_S_Time}, Me.SetCallLog_V3OperationCompleted, userState)
        End Sub
        
        Private Sub OnSetCallLog_V3OperationCompleted(ByVal arg As Object)
            If (Not (Me.SetCallLog_V3CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SetCallLog_V3Completed(Me, New SetCallLog_V3CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateCallLog", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateCallLog(ByVal Pkey As String, ByVal sMemo As String) As String
            Dim results() As Object = Me.Invoke("UpdateCallLog", New Object() {Pkey, sMemo})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateCallLogAsync(ByVal Pkey As String, ByVal sMemo As String)
            Me.UpdateCallLogAsync(Pkey, sMemo, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateCallLogAsync(ByVal Pkey As String, ByVal sMemo As String, ByVal userState As Object)
            If (Me.UpdateCallLogOperationCompleted Is Nothing) Then
                Me.UpdateCallLogOperationCompleted = AddressOf Me.OnUpdateCallLogOperationCompleted
            End If
            Me.InvokeAsync("UpdateCallLog", New Object() {Pkey, sMemo}, Me.UpdateCallLogOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateCallLogOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateCallLogCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateCallLogCompleted(Me, New UpdateCallLogCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateCallLog_V3", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateCallLog_V3( _
                    ByVal sCallCallerID As String,  _
                    ByVal sComplain As String,  _
                    ByVal sCodelist As String,  _
                    ByVal sMemo As String,  _
                    ByVal sWeb As String,  _
                    ByVal sService_S_Time As String,  _
                    ByVal sService_D_Time As String,  _
                    ByVal sLastAgentID As String,  _
                    ByVal sDataKey As String,  _
                    ByVal LineType As String,  _
                    ByVal sIVRlog As String,  _
                    ByVal sTableName As String,  _
                    ByVal sURLog As String,  _
                    ByVal sAgentID As String,  _
                    ByVal sTypeID As String,  _
                    ByVal sCallOnPop As String,  _
                    ByVal sIVR_S_Time As String,  _
                    ByVal sIVR_D_Time As String,  _
                    ByVal sIVRInBoundInfo As String,  _
                    ByVal sSMemo As String,  _
                    ByVal CheckKey As String,  _
                    ByVal WEB_S_Time As String,  _
                    ByVal TKID As String) As String
            Dim results() As Object = Me.Invoke("UpdateCallLog_V3", New Object() {sCallCallerID, sComplain, sCodelist, sMemo, sWeb, sService_S_Time, sService_D_Time, sLastAgentID, sDataKey, LineType, sIVRlog, sTableName, sURLog, sAgentID, sTypeID, sCallOnPop, sIVR_S_Time, sIVR_D_Time, sIVRInBoundInfo, sSMemo, CheckKey, WEB_S_Time, TKID})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateCallLog_V3Async( _
                    ByVal sCallCallerID As String,  _
                    ByVal sComplain As String,  _
                    ByVal sCodelist As String,  _
                    ByVal sMemo As String,  _
                    ByVal sWeb As String,  _
                    ByVal sService_S_Time As String,  _
                    ByVal sService_D_Time As String,  _
                    ByVal sLastAgentID As String,  _
                    ByVal sDataKey As String,  _
                    ByVal LineType As String,  _
                    ByVal sIVRlog As String,  _
                    ByVal sTableName As String,  _
                    ByVal sURLog As String,  _
                    ByVal sAgentID As String,  _
                    ByVal sTypeID As String,  _
                    ByVal sCallOnPop As String,  _
                    ByVal sIVR_S_Time As String,  _
                    ByVal sIVR_D_Time As String,  _
                    ByVal sIVRInBoundInfo As String,  _
                    ByVal sSMemo As String,  _
                    ByVal CheckKey As String,  _
                    ByVal WEB_S_Time As String,  _
                    ByVal TKID As String)
            Me.UpdateCallLog_V3Async(sCallCallerID, sComplain, sCodelist, sMemo, sWeb, sService_S_Time, sService_D_Time, sLastAgentID, sDataKey, LineType, sIVRlog, sTableName, sURLog, sAgentID, sTypeID, sCallOnPop, sIVR_S_Time, sIVR_D_Time, sIVRInBoundInfo, sSMemo, CheckKey, WEB_S_Time, TKID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateCallLog_V3Async( _
                    ByVal sCallCallerID As String,  _
                    ByVal sComplain As String,  _
                    ByVal sCodelist As String,  _
                    ByVal sMemo As String,  _
                    ByVal sWeb As String,  _
                    ByVal sService_S_Time As String,  _
                    ByVal sService_D_Time As String,  _
                    ByVal sLastAgentID As String,  _
                    ByVal sDataKey As String,  _
                    ByVal LineType As String,  _
                    ByVal sIVRlog As String,  _
                    ByVal sTableName As String,  _
                    ByVal sURLog As String,  _
                    ByVal sAgentID As String,  _
                    ByVal sTypeID As String,  _
                    ByVal sCallOnPop As String,  _
                    ByVal sIVR_S_Time As String,  _
                    ByVal sIVR_D_Time As String,  _
                    ByVal sIVRInBoundInfo As String,  _
                    ByVal sSMemo As String,  _
                    ByVal CheckKey As String,  _
                    ByVal WEB_S_Time As String,  _
                    ByVal TKID As String,  _
                    ByVal userState As Object)
            If (Me.UpdateCallLog_V3OperationCompleted Is Nothing) Then
                Me.UpdateCallLog_V3OperationCompleted = AddressOf Me.OnUpdateCallLog_V3OperationCompleted
            End If
            Me.InvokeAsync("UpdateCallLog_V3", New Object() {sCallCallerID, sComplain, sCodelist, sMemo, sWeb, sService_S_Time, sService_D_Time, sLastAgentID, sDataKey, LineType, sIVRlog, sTableName, sURLog, sAgentID, sTypeID, sCallOnPop, sIVR_S_Time, sIVR_D_Time, sIVRInBoundInfo, sSMemo, CheckKey, WEB_S_Time, TKID}, Me.UpdateCallLog_V3OperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateCallLog_V3OperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateCallLog_V3CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateCallLog_V3Completed(Me, New UpdateCallLog_V3CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Eten_GetCusData_ByPID", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Eten_GetCusData_ByPID(ByVal PID As String, ByVal Products_id As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("Eten_GetCusData_ByPID", New Object() {PID, Products_id})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub Eten_GetCusData_ByPIDAsync(ByVal PID As String, ByVal Products_id As String)
            Me.Eten_GetCusData_ByPIDAsync(PID, Products_id, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Eten_GetCusData_ByPIDAsync(ByVal PID As String, ByVal Products_id As String, ByVal userState As Object)
            If (Me.Eten_GetCusData_ByPIDOperationCompleted Is Nothing) Then
                Me.Eten_GetCusData_ByPIDOperationCompleted = AddressOf Me.OnEten_GetCusData_ByPIDOperationCompleted
            End If
            Me.InvokeAsync("Eten_GetCusData_ByPID", New Object() {PID, Products_id}, Me.Eten_GetCusData_ByPIDOperationCompleted, userState)
        End Sub
        
        Private Sub OnEten_GetCusData_ByPIDOperationCompleted(ByVal arg As Object)
            If (Not (Me.Eten_GetCusData_ByPIDCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Eten_GetCusData_ByPIDCompleted(Me, New Eten_GetCusData_ByPIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Eten_GetCusData_ByCusID", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Eten_GetCusData_ByCusID(ByVal CusID As String, ByVal Products_id As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("Eten_GetCusData_ByCusID", New Object() {CusID, Products_id})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub Eten_GetCusData_ByCusIDAsync(ByVal CusID As String, ByVal Products_id As String)
            Me.Eten_GetCusData_ByCusIDAsync(CusID, Products_id, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Eten_GetCusData_ByCusIDAsync(ByVal CusID As String, ByVal Products_id As String, ByVal userState As Object)
            If (Me.Eten_GetCusData_ByCusIDOperationCompleted Is Nothing) Then
                Me.Eten_GetCusData_ByCusIDOperationCompleted = AddressOf Me.OnEten_GetCusData_ByCusIDOperationCompleted
            End If
            Me.InvokeAsync("Eten_GetCusData_ByCusID", New Object() {CusID, Products_id}, Me.Eten_GetCusData_ByCusIDOperationCompleted, userState)
        End Sub
        
        Private Sub OnEten_GetCusData_ByCusIDOperationCompleted(ByVal arg As Object)
            If (Not (Me.Eten_GetCusData_ByCusIDCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Eten_GetCusData_ByCusIDCompleted(Me, New Eten_GetCusData_ByCusIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Eten_GetDatasetBySQL", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Eten_GetDatasetBySQL(ByVal sSql As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("Eten_GetDatasetBySQL", New Object() {sSql})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub Eten_GetDatasetBySQLAsync(ByVal sSql As String)
            Me.Eten_GetDatasetBySQLAsync(sSql, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Eten_GetDatasetBySQLAsync(ByVal sSql As String, ByVal userState As Object)
            If (Me.Eten_GetDatasetBySQLOperationCompleted Is Nothing) Then
                Me.Eten_GetDatasetBySQLOperationCompleted = AddressOf Me.OnEten_GetDatasetBySQLOperationCompleted
            End If
            Me.InvokeAsync("Eten_GetDatasetBySQL", New Object() {sSql}, Me.Eten_GetDatasetBySQLOperationCompleted, userState)
        End Sub
        
        Private Sub OnEten_GetDatasetBySQLOperationCompleted(ByVal arg As Object)
            If (Not (Me.Eten_GetDatasetBySQLCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Eten_GetDatasetBySQLCompleted(Me, New Eten_GetDatasetBySQLCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Eten_ExecSQL", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Eten_ExecSQL(ByVal sSql As String) As String
            Dim results() As Object = Me.Invoke("Eten_ExecSQL", New Object() {sSql})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub Eten_ExecSQLAsync(ByVal sSql As String)
            Me.Eten_ExecSQLAsync(sSql, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Eten_ExecSQLAsync(ByVal sSql As String, ByVal userState As Object)
            If (Me.Eten_ExecSQLOperationCompleted Is Nothing) Then
                Me.Eten_ExecSQLOperationCompleted = AddressOf Me.OnEten_ExecSQLOperationCompleted
            End If
            Me.InvokeAsync("Eten_ExecSQL", New Object() {sSql}, Me.Eten_ExecSQLOperationCompleted, userState)
        End Sub
        
        Private Sub OnEten_ExecSQLOperationCompleted(ByVal arg As Object)
            If (Not (Me.Eten_ExecSQLCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Eten_ExecSQLCompleted(Me, New Eten_ExecSQLCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Eten_ExecSP", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Eten_ExecSP(ByVal sSql As String) As String
            Dim results() As Object = Me.Invoke("Eten_ExecSP", New Object() {sSql})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub Eten_ExecSPAsync(ByVal sSql As String)
            Me.Eten_ExecSPAsync(sSql, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Eten_ExecSPAsync(ByVal sSql As String, ByVal userState As Object)
            If (Me.Eten_ExecSPOperationCompleted Is Nothing) Then
                Me.Eten_ExecSPOperationCompleted = AddressOf Me.OnEten_ExecSPOperationCompleted
            End If
            Me.InvokeAsync("Eten_ExecSP", New Object() {sSql}, Me.Eten_ExecSPOperationCompleted, userState)
        End Sub
        
        Private Sub OnEten_ExecSPOperationCompleted(ByVal arg As Object)
            If (Not (Me.Eten_ExecSPCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Eten_ExecSPCompleted(Me, New Eten_ExecSPCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Eten_GetProductData_ByCusID", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Eten_GetProductData_ByCusID(ByVal CusID As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("Eten_GetProductData_ByCusID", New Object() {CusID})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub Eten_GetProductData_ByCusIDAsync(ByVal CusID As String)
            Me.Eten_GetProductData_ByCusIDAsync(CusID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Eten_GetProductData_ByCusIDAsync(ByVal CusID As String, ByVal userState As Object)
            If (Me.Eten_GetProductData_ByCusIDOperationCompleted Is Nothing) Then
                Me.Eten_GetProductData_ByCusIDOperationCompleted = AddressOf Me.OnEten_GetProductData_ByCusIDOperationCompleted
            End If
            Me.InvokeAsync("Eten_GetProductData_ByCusID", New Object() {CusID}, Me.Eten_GetProductData_ByCusIDOperationCompleted, userState)
        End Sub
        
        Private Sub OnEten_GetProductData_ByCusIDOperationCompleted(ByVal arg As Object)
            If (Not (Me.Eten_GetProductData_ByCusIDCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Eten_GetProductData_ByCusIDCompleted(Me, New Eten_GetProductData_ByCusIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Eten_GetLog_ByProductID", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Eten_GetLog_ByProductID(ByVal ProductID As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("Eten_GetLog_ByProductID", New Object() {ProductID})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub Eten_GetLog_ByProductIDAsync(ByVal ProductID As String)
            Me.Eten_GetLog_ByProductIDAsync(ProductID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Eten_GetLog_ByProductIDAsync(ByVal ProductID As String, ByVal userState As Object)
            If (Me.Eten_GetLog_ByProductIDOperationCompleted Is Nothing) Then
                Me.Eten_GetLog_ByProductIDOperationCompleted = AddressOf Me.OnEten_GetLog_ByProductIDOperationCompleted
            End If
            Me.InvokeAsync("Eten_GetLog_ByProductID", New Object() {ProductID}, Me.Eten_GetLog_ByProductIDOperationCompleted, userState)
        End Sub
        
        Private Sub OnEten_GetLog_ByProductIDOperationCompleted(ByVal arg As Object)
            If (Not (Me.Eten_GetLog_ByProductIDCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Eten_GetLog_ByProductIDCompleted(Me, New Eten_GetLog_ByProductIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Eten_GetLog_ByCusID", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Eten_GetLog_ByCusID(ByVal CusID As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("Eten_GetLog_ByCusID", New Object() {CusID})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub Eten_GetLog_ByCusIDAsync(ByVal CusID As String)
            Me.Eten_GetLog_ByCusIDAsync(CusID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Eten_GetLog_ByCusIDAsync(ByVal CusID As String, ByVal userState As Object)
            If (Me.Eten_GetLog_ByCusIDOperationCompleted Is Nothing) Then
                Me.Eten_GetLog_ByCusIDOperationCompleted = AddressOf Me.OnEten_GetLog_ByCusIDOperationCompleted
            End If
            Me.InvokeAsync("Eten_GetLog_ByCusID", New Object() {CusID}, Me.Eten_GetLog_ByCusIDOperationCompleted, userState)
        End Sub
        
        Private Sub OnEten_GetLog_ByCusIDOperationCompleted(ByVal arg As Object)
            If (Not (Me.Eten_GetLog_ByCusIDCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Eten_GetLog_ByCusIDCompleted(Me, New Eten_GetLog_ByCusIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Eten_GetLog_ByOldData", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Eten_GetLog_ByOldData(ByVal CusID As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("Eten_GetLog_ByOldData", New Object() {CusID})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub Eten_GetLog_ByOldDataAsync(ByVal CusID As String)
            Me.Eten_GetLog_ByOldDataAsync(CusID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Eten_GetLog_ByOldDataAsync(ByVal CusID As String, ByVal userState As Object)
            If (Me.Eten_GetLog_ByOldDataOperationCompleted Is Nothing) Then
                Me.Eten_GetLog_ByOldDataOperationCompleted = AddressOf Me.OnEten_GetLog_ByOldDataOperationCompleted
            End If
            Me.InvokeAsync("Eten_GetLog_ByOldData", New Object() {CusID}, Me.Eten_GetLog_ByOldDataOperationCompleted, userState)
        End Sub
        
        Private Sub OnEten_GetLog_ByOldDataOperationCompleted(ByVal arg As Object)
            If (Not (Me.Eten_GetLog_ByOldDataCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Eten_GetLog_ByOldDataCompleted(Me, New Eten_GetLog_ByOldDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Eten_GetAccounting_Detail", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Eten_GetAccounting_Detail(ByVal CusID As String, ByVal Products_id As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("Eten_GetAccounting_Detail", New Object() {CusID, Products_id})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub Eten_GetAccounting_DetailAsync(ByVal CusID As String, ByVal Products_id As String)
            Me.Eten_GetAccounting_DetailAsync(CusID, Products_id, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Eten_GetAccounting_DetailAsync(ByVal CusID As String, ByVal Products_id As String, ByVal userState As Object)
            If (Me.Eten_GetAccounting_DetailOperationCompleted Is Nothing) Then
                Me.Eten_GetAccounting_DetailOperationCompleted = AddressOf Me.OnEten_GetAccounting_DetailOperationCompleted
            End If
            Me.InvokeAsync("Eten_GetAccounting_Detail", New Object() {CusID, Products_id}, Me.Eten_GetAccounting_DetailOperationCompleted, userState)
        End Sub
        
        Private Sub OnEten_GetAccounting_DetailOperationCompleted(ByVal arg As Object)
            If (Not (Me.Eten_GetAccounting_DetailCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Eten_GetAccounting_DetailCompleted(Me, New Eten_GetAccounting_DetailCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Eten_GetAccounting_List", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Eten_GetAccounting_List(ByVal CusID As String, ByVal Products_id As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("Eten_GetAccounting_List", New Object() {CusID, Products_id})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub Eten_GetAccounting_ListAsync(ByVal CusID As String, ByVal Products_id As String)
            Me.Eten_GetAccounting_ListAsync(CusID, Products_id, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Eten_GetAccounting_ListAsync(ByVal CusID As String, ByVal Products_id As String, ByVal userState As Object)
            If (Me.Eten_GetAccounting_ListOperationCompleted Is Nothing) Then
                Me.Eten_GetAccounting_ListOperationCompleted = AddressOf Me.OnEten_GetAccounting_ListOperationCompleted
            End If
            Me.InvokeAsync("Eten_GetAccounting_List", New Object() {CusID, Products_id}, Me.Eten_GetAccounting_ListOperationCompleted, userState)
        End Sub
        
        Private Sub OnEten_GetAccounting_ListOperationCompleted(ByVal arg As Object)
            If (Not (Me.Eten_GetAccounting_ListCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Eten_GetAccounting_ListCompleted(Me, New Eten_GetAccounting_ListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Eten_GetLastTransaction", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Eten_GetLastTransaction(ByVal CusID As String, ByVal Products_id As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("Eten_GetLastTransaction", New Object() {CusID, Products_id})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub Eten_GetLastTransactionAsync(ByVal CusID As String, ByVal Products_id As String)
            Me.Eten_GetLastTransactionAsync(CusID, Products_id, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Eten_GetLastTransactionAsync(ByVal CusID As String, ByVal Products_id As String, ByVal userState As Object)
            If (Me.Eten_GetLastTransactionOperationCompleted Is Nothing) Then
                Me.Eten_GetLastTransactionOperationCompleted = AddressOf Me.OnEten_GetLastTransactionOperationCompleted
            End If
            Me.InvokeAsync("Eten_GetLastTransaction", New Object() {CusID, Products_id}, Me.Eten_GetLastTransactionOperationCompleted, userState)
        End Sub
        
        Private Sub OnEten_GetLastTransactionOperationCompleted(ByVal arg As Object)
            If (Not (Me.Eten_GetLastTransactionCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Eten_GetLastTransactionCompleted(Me, New Eten_GetLastTransactionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Eten_GetProductType", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Eten_GetProductType() As System.Data.DataSet
            Dim results() As Object = Me.Invoke("Eten_GetProductType", New Object(-1) {})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub Eten_GetProductTypeAsync()
            Me.Eten_GetProductTypeAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Eten_GetProductTypeAsync(ByVal userState As Object)
            If (Me.Eten_GetProductTypeOperationCompleted Is Nothing) Then
                Me.Eten_GetProductTypeOperationCompleted = AddressOf Me.OnEten_GetProductTypeOperationCompleted
            End If
            Me.InvokeAsync("Eten_GetProductType", New Object(-1) {}, Me.Eten_GetProductTypeOperationCompleted, userState)
        End Sub
        
        Private Sub OnEten_GetProductTypeOperationCompleted(ByVal arg As Object)
            If (Not (Me.Eten_GetProductTypeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Eten_GetProductTypeCompleted(Me, New Eten_GetProductTypeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Eten_GetAgentMapping", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Eten_GetAgentMapping(ByVal Agent As String) As String
            Dim results() As Object = Me.Invoke("Eten_GetAgentMapping", New Object() {Agent})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub Eten_GetAgentMappingAsync(ByVal Agent As String)
            Me.Eten_GetAgentMappingAsync(Agent, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Eten_GetAgentMappingAsync(ByVal Agent As String, ByVal userState As Object)
            If (Me.Eten_GetAgentMappingOperationCompleted Is Nothing) Then
                Me.Eten_GetAgentMappingOperationCompleted = AddressOf Me.OnEten_GetAgentMappingOperationCompleted
            End If
            Me.InvokeAsync("Eten_GetAgentMapping", New Object() {Agent}, Me.Eten_GetAgentMappingOperationCompleted, userState)
        End Sub
        
        Private Sub OnEten_GetAgentMappingOperationCompleted(ByVal arg As Object)
            If (Not (Me.Eten_GetAgentMappingCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Eten_GetAgentMappingCompleted(Me, New Eten_GetAgentMappingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Eten_GetCalllog", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Eten_GetCalllog(ByVal CusID As String, ByVal Products_id As String, ByVal PhoneNumber As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("Eten_GetCalllog", New Object() {CusID, Products_id, PhoneNumber})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub Eten_GetCalllogAsync(ByVal CusID As String, ByVal Products_id As String, ByVal PhoneNumber As String)
            Me.Eten_GetCalllogAsync(CusID, Products_id, PhoneNumber, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Eten_GetCalllogAsync(ByVal CusID As String, ByVal Products_id As String, ByVal PhoneNumber As String, ByVal userState As Object)
            If (Me.Eten_GetCalllogOperationCompleted Is Nothing) Then
                Me.Eten_GetCalllogOperationCompleted = AddressOf Me.OnEten_GetCalllogOperationCompleted
            End If
            Me.InvokeAsync("Eten_GetCalllog", New Object() {CusID, Products_id, PhoneNumber}, Me.Eten_GetCalllogOperationCompleted, userState)
        End Sub
        
        Private Sub OnEten_GetCalllogOperationCompleted(ByVal arg As Object)
            If (Not (Me.Eten_GetCalllogCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Eten_GetCalllogCompleted(Me, New Eten_GetCalllogCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Eten_UpdateCusTable", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Eten_UpdateCusTable(ByVal CusID As String, ByVal CusName As String, ByVal CusPhone As String, ByVal AutoFlag As Integer, ByVal CusMemo As String, ByVal PBSR_PBNO As String) As String
            Dim results() As Object = Me.Invoke("Eten_UpdateCusTable", New Object() {CusID, CusName, CusPhone, AutoFlag, CusMemo, PBSR_PBNO})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub Eten_UpdateCusTableAsync(ByVal CusID As String, ByVal CusName As String, ByVal CusPhone As String, ByVal AutoFlag As Integer, ByVal CusMemo As String, ByVal PBSR_PBNO As String)
            Me.Eten_UpdateCusTableAsync(CusID, CusName, CusPhone, AutoFlag, CusMemo, PBSR_PBNO, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Eten_UpdateCusTableAsync(ByVal CusID As String, ByVal CusName As String, ByVal CusPhone As String, ByVal AutoFlag As Integer, ByVal CusMemo As String, ByVal PBSR_PBNO As String, ByVal userState As Object)
            If (Me.Eten_UpdateCusTableOperationCompleted Is Nothing) Then
                Me.Eten_UpdateCusTableOperationCompleted = AddressOf Me.OnEten_UpdateCusTableOperationCompleted
            End If
            Me.InvokeAsync("Eten_UpdateCusTable", New Object() {CusID, CusName, CusPhone, AutoFlag, CusMemo, PBSR_PBNO}, Me.Eten_UpdateCusTableOperationCompleted, userState)
        End Sub
        
        Private Sub OnEten_UpdateCusTableOperationCompleted(ByVal arg As Object)
            If (Not (Me.Eten_UpdateCusTableCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Eten_UpdateCusTableCompleted(Me, New Eten_UpdateCusTableCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SetCallLog_eten", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SetCallLog_eten( _
                    ByVal sCallCallerID As String,  _
                    ByVal sComplain As String,  _
                    ByVal sCodelist As String,  _
                    ByVal sMemo As String,  _
                    ByVal sWeb As String,  _
                    ByVal sService_S_Time As String,  _
                    ByVal sService_D_Time As String,  _
                    ByVal sLastAgentID As String,  _
                    ByVal sDataKey As String,  _
                    ByVal LineType As String,  _
                    ByVal sIVRlog As String,  _
                    ByVal sTableName As String,  _
                    ByVal sURLog As String,  _
                    ByVal sAgentID As String,  _
                    ByVal sTypeID As String,  _
                    ByVal sCallOnPop As String,  _
                    ByVal sIVR_S_Time As String,  _
                    ByVal sIVR_D_Time As String,  _
                    ByVal sIVRInBoundInfo As String,  _
                    ByVal sSMemo As String,  _
                    ByVal sTKID As String,  _
                    ByVal WEB_S_Time As String,  _
                    ByVal Phone As String) As String
            Dim results() As Object = Me.Invoke("SetCallLog_eten", New Object() {sCallCallerID, sComplain, sCodelist, sMemo, sWeb, sService_S_Time, sService_D_Time, sLastAgentID, sDataKey, LineType, sIVRlog, sTableName, sURLog, sAgentID, sTypeID, sCallOnPop, sIVR_S_Time, sIVR_D_Time, sIVRInBoundInfo, sSMemo, sTKID, WEB_S_Time, Phone})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SetCallLog_etenAsync( _
                    ByVal sCallCallerID As String,  _
                    ByVal sComplain As String,  _
                    ByVal sCodelist As String,  _
                    ByVal sMemo As String,  _
                    ByVal sWeb As String,  _
                    ByVal sService_S_Time As String,  _
                    ByVal sService_D_Time As String,  _
                    ByVal sLastAgentID As String,  _
                    ByVal sDataKey As String,  _
                    ByVal LineType As String,  _
                    ByVal sIVRlog As String,  _
                    ByVal sTableName As String,  _
                    ByVal sURLog As String,  _
                    ByVal sAgentID As String,  _
                    ByVal sTypeID As String,  _
                    ByVal sCallOnPop As String,  _
                    ByVal sIVR_S_Time As String,  _
                    ByVal sIVR_D_Time As String,  _
                    ByVal sIVRInBoundInfo As String,  _
                    ByVal sSMemo As String,  _
                    ByVal sTKID As String,  _
                    ByVal WEB_S_Time As String,  _
                    ByVal Phone As String)
            Me.SetCallLog_etenAsync(sCallCallerID, sComplain, sCodelist, sMemo, sWeb, sService_S_Time, sService_D_Time, sLastAgentID, sDataKey, LineType, sIVRlog, sTableName, sURLog, sAgentID, sTypeID, sCallOnPop, sIVR_S_Time, sIVR_D_Time, sIVRInBoundInfo, sSMemo, sTKID, WEB_S_Time, Phone, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SetCallLog_etenAsync( _
                    ByVal sCallCallerID As String,  _
                    ByVal sComplain As String,  _
                    ByVal sCodelist As String,  _
                    ByVal sMemo As String,  _
                    ByVal sWeb As String,  _
                    ByVal sService_S_Time As String,  _
                    ByVal sService_D_Time As String,  _
                    ByVal sLastAgentID As String,  _
                    ByVal sDataKey As String,  _
                    ByVal LineType As String,  _
                    ByVal sIVRlog As String,  _
                    ByVal sTableName As String,  _
                    ByVal sURLog As String,  _
                    ByVal sAgentID As String,  _
                    ByVal sTypeID As String,  _
                    ByVal sCallOnPop As String,  _
                    ByVal sIVR_S_Time As String,  _
                    ByVal sIVR_D_Time As String,  _
                    ByVal sIVRInBoundInfo As String,  _
                    ByVal sSMemo As String,  _
                    ByVal sTKID As String,  _
                    ByVal WEB_S_Time As String,  _
                    ByVal Phone As String,  _
                    ByVal userState As Object)
            If (Me.SetCallLog_etenOperationCompleted Is Nothing) Then
                Me.SetCallLog_etenOperationCompleted = AddressOf Me.OnSetCallLog_etenOperationCompleted
            End If
            Me.InvokeAsync("SetCallLog_eten", New Object() {sCallCallerID, sComplain, sCodelist, sMemo, sWeb, sService_S_Time, sService_D_Time, sLastAgentID, sDataKey, LineType, sIVRlog, sTableName, sURLog, sAgentID, sTypeID, sCallOnPop, sIVR_S_Time, sIVR_D_Time, sIVRInBoundInfo, sSMemo, sTKID, WEB_S_Time, Phone}, Me.SetCallLog_etenOperationCompleted, userState)
        End Sub
        
        Private Sub OnSetCallLog_etenOperationCompleted(ByVal arg As Object)
            If (Not (Me.SetCallLog_etenCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SetCallLog_etenCompleted(Me, New SetCallLog_etenCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateCallLog_eten", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateCallLog_eten( _
                    ByVal sCallCallerID As String,  _
                    ByVal sComplain As String,  _
                    ByVal sCodelist As String,  _
                    ByVal sMemo As String,  _
                    ByVal sWeb As String,  _
                    ByVal sService_S_Time As String,  _
                    ByVal sService_D_Time As String,  _
                    ByVal sLastAgentID As String,  _
                    ByVal sDataKey As String,  _
                    ByVal LineType As String,  _
                    ByVal sIVRlog As String,  _
                    ByVal sTableName As String,  _
                    ByVal sURLog As String,  _
                    ByVal sAgentID As String,  _
                    ByVal sTypeID As String,  _
                    ByVal sCallOnPop As String,  _
                    ByVal sIVR_S_Time As String,  _
                    ByVal sIVR_D_Time As String,  _
                    ByVal sIVRInBoundInfo As String,  _
                    ByVal sSMemo As String,  _
                    ByVal sTKID As String,  _
                    ByVal AlertMemo As String,  _
                    ByVal Phone As String,  _
                    ByVal CusName As String,  _
                    ByVal CusSerNo As String,  _
                    ByVal CusPID As String,  _
                    ByVal CusVer As String,  _
                    ByVal CusExt1 As String,  _
                    ByVal CusExt2 As String,  _
                    ByVal CusExt3 As String,  _
                    ByVal CusExt4 As String,  _
                    ByVal CusExt5 As String) As String
            Dim results() As Object = Me.Invoke("UpdateCallLog_eten", New Object() {sCallCallerID, sComplain, sCodelist, sMemo, sWeb, sService_S_Time, sService_D_Time, sLastAgentID, sDataKey, LineType, sIVRlog, sTableName, sURLog, sAgentID, sTypeID, sCallOnPop, sIVR_S_Time, sIVR_D_Time, sIVRInBoundInfo, sSMemo, sTKID, AlertMemo, Phone, CusName, CusSerNo, CusPID, CusVer, CusExt1, CusExt2, CusExt3, CusExt4, CusExt5})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateCallLog_etenAsync( _
                    ByVal sCallCallerID As String,  _
                    ByVal sComplain As String,  _
                    ByVal sCodelist As String,  _
                    ByVal sMemo As String,  _
                    ByVal sWeb As String,  _
                    ByVal sService_S_Time As String,  _
                    ByVal sService_D_Time As String,  _
                    ByVal sLastAgentID As String,  _
                    ByVal sDataKey As String,  _
                    ByVal LineType As String,  _
                    ByVal sIVRlog As String,  _
                    ByVal sTableName As String,  _
                    ByVal sURLog As String,  _
                    ByVal sAgentID As String,  _
                    ByVal sTypeID As String,  _
                    ByVal sCallOnPop As String,  _
                    ByVal sIVR_S_Time As String,  _
                    ByVal sIVR_D_Time As String,  _
                    ByVal sIVRInBoundInfo As String,  _
                    ByVal sSMemo As String,  _
                    ByVal sTKID As String,  _
                    ByVal AlertMemo As String,  _
                    ByVal Phone As String,  _
                    ByVal CusName As String,  _
                    ByVal CusSerNo As String,  _
                    ByVal CusPID As String,  _
                    ByVal CusVer As String,  _
                    ByVal CusExt1 As String,  _
                    ByVal CusExt2 As String,  _
                    ByVal CusExt3 As String,  _
                    ByVal CusExt4 As String,  _
                    ByVal CusExt5 As String)
            Me.UpdateCallLog_etenAsync(sCallCallerID, sComplain, sCodelist, sMemo, sWeb, sService_S_Time, sService_D_Time, sLastAgentID, sDataKey, LineType, sIVRlog, sTableName, sURLog, sAgentID, sTypeID, sCallOnPop, sIVR_S_Time, sIVR_D_Time, sIVRInBoundInfo, sSMemo, sTKID, AlertMemo, Phone, CusName, CusSerNo, CusPID, CusVer, CusExt1, CusExt2, CusExt3, CusExt4, CusExt5, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateCallLog_etenAsync( _
                    ByVal sCallCallerID As String,  _
                    ByVal sComplain As String,  _
                    ByVal sCodelist As String,  _
                    ByVal sMemo As String,  _
                    ByVal sWeb As String,  _
                    ByVal sService_S_Time As String,  _
                    ByVal sService_D_Time As String,  _
                    ByVal sLastAgentID As String,  _
                    ByVal sDataKey As String,  _
                    ByVal LineType As String,  _
                    ByVal sIVRlog As String,  _
                    ByVal sTableName As String,  _
                    ByVal sURLog As String,  _
                    ByVal sAgentID As String,  _
                    ByVal sTypeID As String,  _
                    ByVal sCallOnPop As String,  _
                    ByVal sIVR_S_Time As String,  _
                    ByVal sIVR_D_Time As String,  _
                    ByVal sIVRInBoundInfo As String,  _
                    ByVal sSMemo As String,  _
                    ByVal sTKID As String,  _
                    ByVal AlertMemo As String,  _
                    ByVal Phone As String,  _
                    ByVal CusName As String,  _
                    ByVal CusSerNo As String,  _
                    ByVal CusPID As String,  _
                    ByVal CusVer As String,  _
                    ByVal CusExt1 As String,  _
                    ByVal CusExt2 As String,  _
                    ByVal CusExt3 As String,  _
                    ByVal CusExt4 As String,  _
                    ByVal CusExt5 As String,  _
                    ByVal userState As Object)
            If (Me.UpdateCallLog_etenOperationCompleted Is Nothing) Then
                Me.UpdateCallLog_etenOperationCompleted = AddressOf Me.OnUpdateCallLog_etenOperationCompleted
            End If
            Me.InvokeAsync("UpdateCallLog_eten", New Object() {sCallCallerID, sComplain, sCodelist, sMemo, sWeb, sService_S_Time, sService_D_Time, sLastAgentID, sDataKey, LineType, sIVRlog, sTableName, sURLog, sAgentID, sTypeID, sCallOnPop, sIVR_S_Time, sIVR_D_Time, sIVRInBoundInfo, sSMemo, sTKID, AlertMemo, Phone, CusName, CusSerNo, CusPID, CusVer, CusExt1, CusExt2, CusExt3, CusExt4, CusExt5}, Me.UpdateCallLog_etenOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateCallLog_etenOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateCallLog_etenCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateCallLog_etenCompleted(Me, New UpdateCallLog_etenCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DeleteCallLog", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DeleteCallLog(ByVal sLastAgentID As String) As String
            Dim results() As Object = Me.Invoke("DeleteCallLog", New Object() {sLastAgentID})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DeleteCallLogAsync(ByVal sLastAgentID As String)
            Me.DeleteCallLogAsync(sLastAgentID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteCallLogAsync(ByVal sLastAgentID As String, ByVal userState As Object)
            If (Me.DeleteCallLogOperationCompleted Is Nothing) Then
                Me.DeleteCallLogOperationCompleted = AddressOf Me.OnDeleteCallLogOperationCompleted
            End If
            Me.InvokeAsync("DeleteCallLog", New Object() {sLastAgentID}, Me.DeleteCallLogOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteCallLogOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteCallLogCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteCallLogCompleted(Me, New DeleteCallLogCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SetCallLog_V2", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SetCallLog_V2( _
                    ByVal sCallCallerID As String,  _
                    ByVal sComplain As String,  _
                    ByVal sCodelist As String,  _
                    ByVal sMemo As String,  _
                    ByVal sWeb As String,  _
                    ByVal sService_S_Time As String,  _
                    ByVal sService_D_Time As String,  _
                    ByVal sLastAgentID As String,  _
                    ByVal sDataKey As String,  _
                    ByVal LineType As String,  _
                    ByVal sIVRlog As String,  _
                    ByVal sTableName As String,  _
                    ByVal sURLog As String,  _
                    ByVal sAgentID As String,  _
                    ByVal sTypeID As String,  _
                    ByVal sCallOnPop As String,  _
                    ByVal sIVR_S_Time As String,  _
                    ByVal sIVR_D_Time As String,  _
                    ByVal sIVRInBoundInfo As String,  _
                    ByVal sSMemo As String,  _
                    ByVal CheckKey As String) As String
            Dim results() As Object = Me.Invoke("SetCallLog_V2", New Object() {sCallCallerID, sComplain, sCodelist, sMemo, sWeb, sService_S_Time, sService_D_Time, sLastAgentID, sDataKey, LineType, sIVRlog, sTableName, sURLog, sAgentID, sTypeID, sCallOnPop, sIVR_S_Time, sIVR_D_Time, sIVRInBoundInfo, sSMemo, CheckKey})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SetCallLog_V2Async( _
                    ByVal sCallCallerID As String,  _
                    ByVal sComplain As String,  _
                    ByVal sCodelist As String,  _
                    ByVal sMemo As String,  _
                    ByVal sWeb As String,  _
                    ByVal sService_S_Time As String,  _
                    ByVal sService_D_Time As String,  _
                    ByVal sLastAgentID As String,  _
                    ByVal sDataKey As String,  _
                    ByVal LineType As String,  _
                    ByVal sIVRlog As String,  _
                    ByVal sTableName As String,  _
                    ByVal sURLog As String,  _
                    ByVal sAgentID As String,  _
                    ByVal sTypeID As String,  _
                    ByVal sCallOnPop As String,  _
                    ByVal sIVR_S_Time As String,  _
                    ByVal sIVR_D_Time As String,  _
                    ByVal sIVRInBoundInfo As String,  _
                    ByVal sSMemo As String,  _
                    ByVal CheckKey As String)
            Me.SetCallLog_V2Async(sCallCallerID, sComplain, sCodelist, sMemo, sWeb, sService_S_Time, sService_D_Time, sLastAgentID, sDataKey, LineType, sIVRlog, sTableName, sURLog, sAgentID, sTypeID, sCallOnPop, sIVR_S_Time, sIVR_D_Time, sIVRInBoundInfo, sSMemo, CheckKey, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SetCallLog_V2Async( _
                    ByVal sCallCallerID As String,  _
                    ByVal sComplain As String,  _
                    ByVal sCodelist As String,  _
                    ByVal sMemo As String,  _
                    ByVal sWeb As String,  _
                    ByVal sService_S_Time As String,  _
                    ByVal sService_D_Time As String,  _
                    ByVal sLastAgentID As String,  _
                    ByVal sDataKey As String,  _
                    ByVal LineType As String,  _
                    ByVal sIVRlog As String,  _
                    ByVal sTableName As String,  _
                    ByVal sURLog As String,  _
                    ByVal sAgentID As String,  _
                    ByVal sTypeID As String,  _
                    ByVal sCallOnPop As String,  _
                    ByVal sIVR_S_Time As String,  _
                    ByVal sIVR_D_Time As String,  _
                    ByVal sIVRInBoundInfo As String,  _
                    ByVal sSMemo As String,  _
                    ByVal CheckKey As String,  _
                    ByVal userState As Object)
            If (Me.SetCallLog_V2OperationCompleted Is Nothing) Then
                Me.SetCallLog_V2OperationCompleted = AddressOf Me.OnSetCallLog_V2OperationCompleted
            End If
            Me.InvokeAsync("SetCallLog_V2", New Object() {sCallCallerID, sComplain, sCodelist, sMemo, sWeb, sService_S_Time, sService_D_Time, sLastAgentID, sDataKey, LineType, sIVRlog, sTableName, sURLog, sAgentID, sTypeID, sCallOnPop, sIVR_S_Time, sIVR_D_Time, sIVRInBoundInfo, sSMemo, CheckKey}, Me.SetCallLog_V2OperationCompleted, userState)
        End Sub
        
        Private Sub OnSetCallLog_V2OperationCompleted(ByVal arg As Object)
            If (Not (Me.SetCallLog_V2CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SetCallLog_V2Completed(Me, New SetCallLog_V2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SetCallLog", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SetCallLog( _
                    ByVal sCallCallerID As String,  _
                    ByVal sComplain As String,  _
                    ByVal sCodelist As String,  _
                    ByVal sMemo As String,  _
                    ByVal sWeb As String,  _
                    ByVal sService_S_Time As String,  _
                    ByVal sService_D_Time As String,  _
                    ByVal sLastAgentID As String,  _
                    ByVal sDataKey As String,  _
                    ByVal LineType As String,  _
                    ByVal sIVRlog As String,  _
                    ByVal sTableName As String,  _
                    ByVal sURLog As String,  _
                    ByVal sAgentID As String,  _
                    ByVal sTypeID As String,  _
                    ByVal sCallOnPop As String,  _
                    ByVal sIVR_S_Time As String,  _
                    ByVal sIVR_D_Time As String,  _
                    ByVal sIVRInBoundInfo As String,  _
                    ByVal sSMemo As String) As String
            Dim results() As Object = Me.Invoke("SetCallLog", New Object() {sCallCallerID, sComplain, sCodelist, sMemo, sWeb, sService_S_Time, sService_D_Time, sLastAgentID, sDataKey, LineType, sIVRlog, sTableName, sURLog, sAgentID, sTypeID, sCallOnPop, sIVR_S_Time, sIVR_D_Time, sIVRInBoundInfo, sSMemo})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SetCallLogAsync( _
                    ByVal sCallCallerID As String,  _
                    ByVal sComplain As String,  _
                    ByVal sCodelist As String,  _
                    ByVal sMemo As String,  _
                    ByVal sWeb As String,  _
                    ByVal sService_S_Time As String,  _
                    ByVal sService_D_Time As String,  _
                    ByVal sLastAgentID As String,  _
                    ByVal sDataKey As String,  _
                    ByVal LineType As String,  _
                    ByVal sIVRlog As String,  _
                    ByVal sTableName As String,  _
                    ByVal sURLog As String,  _
                    ByVal sAgentID As String,  _
                    ByVal sTypeID As String,  _
                    ByVal sCallOnPop As String,  _
                    ByVal sIVR_S_Time As String,  _
                    ByVal sIVR_D_Time As String,  _
                    ByVal sIVRInBoundInfo As String,  _
                    ByVal sSMemo As String)
            Me.SetCallLogAsync(sCallCallerID, sComplain, sCodelist, sMemo, sWeb, sService_S_Time, sService_D_Time, sLastAgentID, sDataKey, LineType, sIVRlog, sTableName, sURLog, sAgentID, sTypeID, sCallOnPop, sIVR_S_Time, sIVR_D_Time, sIVRInBoundInfo, sSMemo, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SetCallLogAsync( _
                    ByVal sCallCallerID As String,  _
                    ByVal sComplain As String,  _
                    ByVal sCodelist As String,  _
                    ByVal sMemo As String,  _
                    ByVal sWeb As String,  _
                    ByVal sService_S_Time As String,  _
                    ByVal sService_D_Time As String,  _
                    ByVal sLastAgentID As String,  _
                    ByVal sDataKey As String,  _
                    ByVal LineType As String,  _
                    ByVal sIVRlog As String,  _
                    ByVal sTableName As String,  _
                    ByVal sURLog As String,  _
                    ByVal sAgentID As String,  _
                    ByVal sTypeID As String,  _
                    ByVal sCallOnPop As String,  _
                    ByVal sIVR_S_Time As String,  _
                    ByVal sIVR_D_Time As String,  _
                    ByVal sIVRInBoundInfo As String,  _
                    ByVal sSMemo As String,  _
                    ByVal userState As Object)
            If (Me.SetCallLogOperationCompleted Is Nothing) Then
                Me.SetCallLogOperationCompleted = AddressOf Me.OnSetCallLogOperationCompleted
            End If
            Me.InvokeAsync("SetCallLog", New Object() {sCallCallerID, sComplain, sCodelist, sMemo, sWeb, sService_S_Time, sService_D_Time, sLastAgentID, sDataKey, LineType, sIVRlog, sTableName, sURLog, sAgentID, sTypeID, sCallOnPop, sIVR_S_Time, sIVR_D_Time, sIVRInBoundInfo, sSMemo}, Me.SetCallLogOperationCompleted, userState)
        End Sub
        
        Private Sub OnSetCallLogOperationCompleted(ByVal arg As Object)
            If (Not (Me.SetCallLogCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SetCallLogCompleted(Me, New SetCallLogCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SetCallLog_TK", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SetCallLog_TK( _
                    ByVal sCallCallerID As String,  _
                    ByVal sComplain As String,  _
                    ByVal sCodelist As String,  _
                    ByVal sMemo As String,  _
                    ByVal sWeb As String,  _
                    ByVal sService_S_Time As String,  _
                    ByVal sService_D_Time As String,  _
                    ByVal sLastAgentID As String,  _
                    ByVal sDataKey As String,  _
                    ByVal LineType As String,  _
                    ByVal sIVRlog As String,  _
                    ByVal sTableName As String,  _
                    ByVal sURLog As String,  _
                    ByVal sAgentID As String,  _
                    ByVal sTypeID As String,  _
                    ByVal sCallOnPop As String,  _
                    ByVal sIVR_S_Time As String,  _
                    ByVal sIVR_D_Time As String,  _
                    ByVal sIVRInBoundInfo As String,  _
                    ByVal sSMemo As String,  _
                    ByVal sTKID As String) As String
            Dim results() As Object = Me.Invoke("SetCallLog_TK", New Object() {sCallCallerID, sComplain, sCodelist, sMemo, sWeb, sService_S_Time, sService_D_Time, sLastAgentID, sDataKey, LineType, sIVRlog, sTableName, sURLog, sAgentID, sTypeID, sCallOnPop, sIVR_S_Time, sIVR_D_Time, sIVRInBoundInfo, sSMemo, sTKID})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SetCallLog_TKAsync( _
                    ByVal sCallCallerID As String,  _
                    ByVal sComplain As String,  _
                    ByVal sCodelist As String,  _
                    ByVal sMemo As String,  _
                    ByVal sWeb As String,  _
                    ByVal sService_S_Time As String,  _
                    ByVal sService_D_Time As String,  _
                    ByVal sLastAgentID As String,  _
                    ByVal sDataKey As String,  _
                    ByVal LineType As String,  _
                    ByVal sIVRlog As String,  _
                    ByVal sTableName As String,  _
                    ByVal sURLog As String,  _
                    ByVal sAgentID As String,  _
                    ByVal sTypeID As String,  _
                    ByVal sCallOnPop As String,  _
                    ByVal sIVR_S_Time As String,  _
                    ByVal sIVR_D_Time As String,  _
                    ByVal sIVRInBoundInfo As String,  _
                    ByVal sSMemo As String,  _
                    ByVal sTKID As String)
            Me.SetCallLog_TKAsync(sCallCallerID, sComplain, sCodelist, sMemo, sWeb, sService_S_Time, sService_D_Time, sLastAgentID, sDataKey, LineType, sIVRlog, sTableName, sURLog, sAgentID, sTypeID, sCallOnPop, sIVR_S_Time, sIVR_D_Time, sIVRInBoundInfo, sSMemo, sTKID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SetCallLog_TKAsync( _
                    ByVal sCallCallerID As String,  _
                    ByVal sComplain As String,  _
                    ByVal sCodelist As String,  _
                    ByVal sMemo As String,  _
                    ByVal sWeb As String,  _
                    ByVal sService_S_Time As String,  _
                    ByVal sService_D_Time As String,  _
                    ByVal sLastAgentID As String,  _
                    ByVal sDataKey As String,  _
                    ByVal LineType As String,  _
                    ByVal sIVRlog As String,  _
                    ByVal sTableName As String,  _
                    ByVal sURLog As String,  _
                    ByVal sAgentID As String,  _
                    ByVal sTypeID As String,  _
                    ByVal sCallOnPop As String,  _
                    ByVal sIVR_S_Time As String,  _
                    ByVal sIVR_D_Time As String,  _
                    ByVal sIVRInBoundInfo As String,  _
                    ByVal sSMemo As String,  _
                    ByVal sTKID As String,  _
                    ByVal userState As Object)
            If (Me.SetCallLog_TKOperationCompleted Is Nothing) Then
                Me.SetCallLog_TKOperationCompleted = AddressOf Me.OnSetCallLog_TKOperationCompleted
            End If
            Me.InvokeAsync("SetCallLog_TK", New Object() {sCallCallerID, sComplain, sCodelist, sMemo, sWeb, sService_S_Time, sService_D_Time, sLastAgentID, sDataKey, LineType, sIVRlog, sTableName, sURLog, sAgentID, sTypeID, sCallOnPop, sIVR_S_Time, sIVR_D_Time, sIVRInBoundInfo, sSMemo, sTKID}, Me.SetCallLog_TKOperationCompleted, userState)
        End Sub
        
        Private Sub OnSetCallLog_TKOperationCompleted(ByVal arg As Object)
            If (Not (Me.SetCallLog_TKCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SetCallLog_TKCompleted(Me, New SetCallLog_TKCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SetCallLog_TK_V2", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SetCallLog_TK_V2( _
                    ByVal sCallCallerID As String,  _
                    ByVal sComplain As String,  _
                    ByVal sCodelist As String,  _
                    ByVal sMemo As String,  _
                    ByVal sWeb As String,  _
                    ByVal sService_S_Time As String,  _
                    ByVal sService_D_Time As String,  _
                    ByVal sLastAgentID As String,  _
                    ByVal sDataKey As String,  _
                    ByVal LineType As String,  _
                    ByVal sIVRlog As String,  _
                    ByVal sTableName As String,  _
                    ByVal sURLog As String,  _
                    ByVal sAgentID As String,  _
                    ByVal sTypeID As String,  _
                    ByVal sCallOnPop As String,  _
                    ByVal sIVR_S_Time As String,  _
                    ByVal sIVR_D_Time As String,  _
                    ByVal sIVRInBoundInfo As String,  _
                    ByVal sSMemo As String,  _
                    ByVal sTKID As String,  _
                    ByVal sWEB_S_Time As String) As String
            Dim results() As Object = Me.Invoke("SetCallLog_TK_V2", New Object() {sCallCallerID, sComplain, sCodelist, sMemo, sWeb, sService_S_Time, sService_D_Time, sLastAgentID, sDataKey, LineType, sIVRlog, sTableName, sURLog, sAgentID, sTypeID, sCallOnPop, sIVR_S_Time, sIVR_D_Time, sIVRInBoundInfo, sSMemo, sTKID, sWEB_S_Time})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SetCallLog_TK_V2Async( _
                    ByVal sCallCallerID As String,  _
                    ByVal sComplain As String,  _
                    ByVal sCodelist As String,  _
                    ByVal sMemo As String,  _
                    ByVal sWeb As String,  _
                    ByVal sService_S_Time As String,  _
                    ByVal sService_D_Time As String,  _
                    ByVal sLastAgentID As String,  _
                    ByVal sDataKey As String,  _
                    ByVal LineType As String,  _
                    ByVal sIVRlog As String,  _
                    ByVal sTableName As String,  _
                    ByVal sURLog As String,  _
                    ByVal sAgentID As String,  _
                    ByVal sTypeID As String,  _
                    ByVal sCallOnPop As String,  _
                    ByVal sIVR_S_Time As String,  _
                    ByVal sIVR_D_Time As String,  _
                    ByVal sIVRInBoundInfo As String,  _
                    ByVal sSMemo As String,  _
                    ByVal sTKID As String,  _
                    ByVal sWEB_S_Time As String)
            Me.SetCallLog_TK_V2Async(sCallCallerID, sComplain, sCodelist, sMemo, sWeb, sService_S_Time, sService_D_Time, sLastAgentID, sDataKey, LineType, sIVRlog, sTableName, sURLog, sAgentID, sTypeID, sCallOnPop, sIVR_S_Time, sIVR_D_Time, sIVRInBoundInfo, sSMemo, sTKID, sWEB_S_Time, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SetCallLog_TK_V2Async( _
                    ByVal sCallCallerID As String,  _
                    ByVal sComplain As String,  _
                    ByVal sCodelist As String,  _
                    ByVal sMemo As String,  _
                    ByVal sWeb As String,  _
                    ByVal sService_S_Time As String,  _
                    ByVal sService_D_Time As String,  _
                    ByVal sLastAgentID As String,  _
                    ByVal sDataKey As String,  _
                    ByVal LineType As String,  _
                    ByVal sIVRlog As String,  _
                    ByVal sTableName As String,  _
                    ByVal sURLog As String,  _
                    ByVal sAgentID As String,  _
                    ByVal sTypeID As String,  _
                    ByVal sCallOnPop As String,  _
                    ByVal sIVR_S_Time As String,  _
                    ByVal sIVR_D_Time As String,  _
                    ByVal sIVRInBoundInfo As String,  _
                    ByVal sSMemo As String,  _
                    ByVal sTKID As String,  _
                    ByVal sWEB_S_Time As String,  _
                    ByVal userState As Object)
            If (Me.SetCallLog_TK_V2OperationCompleted Is Nothing) Then
                Me.SetCallLog_TK_V2OperationCompleted = AddressOf Me.OnSetCallLog_TK_V2OperationCompleted
            End If
            Me.InvokeAsync("SetCallLog_TK_V2", New Object() {sCallCallerID, sComplain, sCodelist, sMemo, sWeb, sService_S_Time, sService_D_Time, sLastAgentID, sDataKey, LineType, sIVRlog, sTableName, sURLog, sAgentID, sTypeID, sCallOnPop, sIVR_S_Time, sIVR_D_Time, sIVRInBoundInfo, sSMemo, sTKID, sWEB_S_Time}, Me.SetCallLog_TK_V2OperationCompleted, userState)
        End Sub
        
        Private Sub OnSetCallLog_TK_V2OperationCompleted(ByVal arg As Object)
            If (Not (Me.SetCallLog_TK_V2CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SetCallLog_TK_V2Completed(Me, New SetCallLog_TK_V2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SetCallLog_TK_V4", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SetCallLog_TK_V4( _
                    ByVal sCallCallerID As String,  _
                    ByVal sComplain As String,  _
                    ByVal sCodelist As String,  _
                    ByVal sMemo As String,  _
                    ByVal sWeb As String,  _
                    ByVal sService_S_Time As String,  _
                    ByVal sService_D_Time As String,  _
                    ByVal sLastAgentID As String,  _
                    ByVal sDataKey As String,  _
                    ByVal LineType As String,  _
                    ByVal sIVRlog As String,  _
                    ByVal sTableName As String,  _
                    ByVal sURLog As String,  _
                    ByVal sAgentID As String,  _
                    ByVal sTypeID As String,  _
                    ByVal sCallOnPop As String,  _
                    ByVal sIVR_S_Time As String,  _
                    ByVal sIVR_D_Time As String,  _
                    ByVal sIVRInBoundInfo As String,  _
                    ByVal sSMemo As String,  _
                    ByVal sTKID As String,  _
                    ByVal sWEB_S_Time As String,  _
                    ByVal sWEB_D_Time As String) As String
            Dim results() As Object = Me.Invoke("SetCallLog_TK_V4", New Object() {sCallCallerID, sComplain, sCodelist, sMemo, sWeb, sService_S_Time, sService_D_Time, sLastAgentID, sDataKey, LineType, sIVRlog, sTableName, sURLog, sAgentID, sTypeID, sCallOnPop, sIVR_S_Time, sIVR_D_Time, sIVRInBoundInfo, sSMemo, sTKID, sWEB_S_Time, sWEB_D_Time})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SetCallLog_TK_V4Async( _
                    ByVal sCallCallerID As String,  _
                    ByVal sComplain As String,  _
                    ByVal sCodelist As String,  _
                    ByVal sMemo As String,  _
                    ByVal sWeb As String,  _
                    ByVal sService_S_Time As String,  _
                    ByVal sService_D_Time As String,  _
                    ByVal sLastAgentID As String,  _
                    ByVal sDataKey As String,  _
                    ByVal LineType As String,  _
                    ByVal sIVRlog As String,  _
                    ByVal sTableName As String,  _
                    ByVal sURLog As String,  _
                    ByVal sAgentID As String,  _
                    ByVal sTypeID As String,  _
                    ByVal sCallOnPop As String,  _
                    ByVal sIVR_S_Time As String,  _
                    ByVal sIVR_D_Time As String,  _
                    ByVal sIVRInBoundInfo As String,  _
                    ByVal sSMemo As String,  _
                    ByVal sTKID As String,  _
                    ByVal sWEB_S_Time As String,  _
                    ByVal sWEB_D_Time As String)
            Me.SetCallLog_TK_V4Async(sCallCallerID, sComplain, sCodelist, sMemo, sWeb, sService_S_Time, sService_D_Time, sLastAgentID, sDataKey, LineType, sIVRlog, sTableName, sURLog, sAgentID, sTypeID, sCallOnPop, sIVR_S_Time, sIVR_D_Time, sIVRInBoundInfo, sSMemo, sTKID, sWEB_S_Time, sWEB_D_Time, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SetCallLog_TK_V4Async( _
                    ByVal sCallCallerID As String,  _
                    ByVal sComplain As String,  _
                    ByVal sCodelist As String,  _
                    ByVal sMemo As String,  _
                    ByVal sWeb As String,  _
                    ByVal sService_S_Time As String,  _
                    ByVal sService_D_Time As String,  _
                    ByVal sLastAgentID As String,  _
                    ByVal sDataKey As String,  _
                    ByVal LineType As String,  _
                    ByVal sIVRlog As String,  _
                    ByVal sTableName As String,  _
                    ByVal sURLog As String,  _
                    ByVal sAgentID As String,  _
                    ByVal sTypeID As String,  _
                    ByVal sCallOnPop As String,  _
                    ByVal sIVR_S_Time As String,  _
                    ByVal sIVR_D_Time As String,  _
                    ByVal sIVRInBoundInfo As String,  _
                    ByVal sSMemo As String,  _
                    ByVal sTKID As String,  _
                    ByVal sWEB_S_Time As String,  _
                    ByVal sWEB_D_Time As String,  _
                    ByVal userState As Object)
            If (Me.SetCallLog_TK_V4OperationCompleted Is Nothing) Then
                Me.SetCallLog_TK_V4OperationCompleted = AddressOf Me.OnSetCallLog_TK_V4OperationCompleted
            End If
            Me.InvokeAsync("SetCallLog_TK_V4", New Object() {sCallCallerID, sComplain, sCodelist, sMemo, sWeb, sService_S_Time, sService_D_Time, sLastAgentID, sDataKey, LineType, sIVRlog, sTableName, sURLog, sAgentID, sTypeID, sCallOnPop, sIVR_S_Time, sIVR_D_Time, sIVRInBoundInfo, sSMemo, sTKID, sWEB_S_Time, sWEB_D_Time}, Me.SetCallLog_TK_V4OperationCompleted, userState)
        End Sub
        
        Private Sub OnSetCallLog_TK_V4OperationCompleted(ByVal arg As Object)
            If (Not (Me.SetCallLog_TK_V4CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SetCallLog_TK_V4Completed(Me, New SetCallLog_TK_V4CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SetCallLog_TK_V3", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SetCallLog_TK_V3( _
                    ByVal sCallCallerID As String,  _
                    ByVal sComplain As String,  _
                    ByVal sCodelist As String,  _
                    ByVal sMemo As String,  _
                    ByVal sWeb As String,  _
                    ByVal sService_S_Time As String,  _
                    ByVal sService_D_Time As String,  _
                    ByVal sLastAgentID As String,  _
                    ByVal sDataKey As String,  _
                    ByVal LineType As String,  _
                    ByVal sIVRlog As String,  _
                    ByVal sTableName As String,  _
                    ByVal sURLog As String,  _
                    ByVal sAgentID As String,  _
                    ByVal sTypeID As String,  _
                    ByVal sCallOnPop As String,  _
                    ByVal sIVR_S_Time As String,  _
                    ByVal sIVR_D_Time As String,  _
                    ByVal sIVRInBoundInfo As String,  _
                    ByVal sSMemo As String,  _
                    ByVal sTKID As String,  _
                    ByVal sWEB_S_Time As String,  _
                    ByVal sWEB_D_Time As String) As String
            Dim results() As Object = Me.Invoke("SetCallLog_TK_V3", New Object() {sCallCallerID, sComplain, sCodelist, sMemo, sWeb, sService_S_Time, sService_D_Time, sLastAgentID, sDataKey, LineType, sIVRlog, sTableName, sURLog, sAgentID, sTypeID, sCallOnPop, sIVR_S_Time, sIVR_D_Time, sIVRInBoundInfo, sSMemo, sTKID, sWEB_S_Time, sWEB_D_Time})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SetCallLog_TK_V3Async( _
                    ByVal sCallCallerID As String,  _
                    ByVal sComplain As String,  _
                    ByVal sCodelist As String,  _
                    ByVal sMemo As String,  _
                    ByVal sWeb As String,  _
                    ByVal sService_S_Time As String,  _
                    ByVal sService_D_Time As String,  _
                    ByVal sLastAgentID As String,  _
                    ByVal sDataKey As String,  _
                    ByVal LineType As String,  _
                    ByVal sIVRlog As String,  _
                    ByVal sTableName As String,  _
                    ByVal sURLog As String,  _
                    ByVal sAgentID As String,  _
                    ByVal sTypeID As String,  _
                    ByVal sCallOnPop As String,  _
                    ByVal sIVR_S_Time As String,  _
                    ByVal sIVR_D_Time As String,  _
                    ByVal sIVRInBoundInfo As String,  _
                    ByVal sSMemo As String,  _
                    ByVal sTKID As String,  _
                    ByVal sWEB_S_Time As String,  _
                    ByVal sWEB_D_Time As String)
            Me.SetCallLog_TK_V3Async(sCallCallerID, sComplain, sCodelist, sMemo, sWeb, sService_S_Time, sService_D_Time, sLastAgentID, sDataKey, LineType, sIVRlog, sTableName, sURLog, sAgentID, sTypeID, sCallOnPop, sIVR_S_Time, sIVR_D_Time, sIVRInBoundInfo, sSMemo, sTKID, sWEB_S_Time, sWEB_D_Time, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SetCallLog_TK_V3Async( _
                    ByVal sCallCallerID As String,  _
                    ByVal sComplain As String,  _
                    ByVal sCodelist As String,  _
                    ByVal sMemo As String,  _
                    ByVal sWeb As String,  _
                    ByVal sService_S_Time As String,  _
                    ByVal sService_D_Time As String,  _
                    ByVal sLastAgentID As String,  _
                    ByVal sDataKey As String,  _
                    ByVal LineType As String,  _
                    ByVal sIVRlog As String,  _
                    ByVal sTableName As String,  _
                    ByVal sURLog As String,  _
                    ByVal sAgentID As String,  _
                    ByVal sTypeID As String,  _
                    ByVal sCallOnPop As String,  _
                    ByVal sIVR_S_Time As String,  _
                    ByVal sIVR_D_Time As String,  _
                    ByVal sIVRInBoundInfo As String,  _
                    ByVal sSMemo As String,  _
                    ByVal sTKID As String,  _
                    ByVal sWEB_S_Time As String,  _
                    ByVal sWEB_D_Time As String,  _
                    ByVal userState As Object)
            If (Me.SetCallLog_TK_V3OperationCompleted Is Nothing) Then
                Me.SetCallLog_TK_V3OperationCompleted = AddressOf Me.OnSetCallLog_TK_V3OperationCompleted
            End If
            Me.InvokeAsync("SetCallLog_TK_V3", New Object() {sCallCallerID, sComplain, sCodelist, sMemo, sWeb, sService_S_Time, sService_D_Time, sLastAgentID, sDataKey, LineType, sIVRlog, sTableName, sURLog, sAgentID, sTypeID, sCallOnPop, sIVR_S_Time, sIVR_D_Time, sIVRInBoundInfo, sSMemo, sTKID, sWEB_S_Time, sWEB_D_Time}, Me.SetCallLog_TK_V3OperationCompleted, userState)
        End Sub
        
        Private Sub OnSetCallLog_TK_V3OperationCompleted(ByVal arg As Object)
            If (Not (Me.SetCallLog_TK_V3CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SetCallLog_TK_V3Completed(Me, New SetCallLog_TK_V3CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SetCallLog_TK_AlertMemo", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SetCallLog_TK_AlertMemo( _
                    ByVal sCallCallerID As String,  _
                    ByVal sComplain As String,  _
                    ByVal sCodelist As String,  _
                    ByVal sMemo As String,  _
                    ByVal sWeb As String,  _
                    ByVal sService_S_Time As String,  _
                    ByVal sService_D_Time As String,  _
                    ByVal sLastAgentID As String,  _
                    ByVal sDataKey As String,  _
                    ByVal LineType As String,  _
                    ByVal sIVRlog As String,  _
                    ByVal sTableName As String,  _
                    ByVal sURLog As String,  _
                    ByVal sAgentID As String,  _
                    ByVal sTypeID As String,  _
                    ByVal sCallOnPop As String,  _
                    ByVal sIVR_S_Time As String,  _
                    ByVal sIVR_D_Time As String,  _
                    ByVal sIVRInBoundInfo As String,  _
                    ByVal sSMemo As String,  _
                    ByVal sTKID As String,  _
                    ByVal AlertMemo As String) As String
            Dim results() As Object = Me.Invoke("SetCallLog_TK_AlertMemo", New Object() {sCallCallerID, sComplain, sCodelist, sMemo, sWeb, sService_S_Time, sService_D_Time, sLastAgentID, sDataKey, LineType, sIVRlog, sTableName, sURLog, sAgentID, sTypeID, sCallOnPop, sIVR_S_Time, sIVR_D_Time, sIVRInBoundInfo, sSMemo, sTKID, AlertMemo})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SetCallLog_TK_AlertMemoAsync( _
                    ByVal sCallCallerID As String,  _
                    ByVal sComplain As String,  _
                    ByVal sCodelist As String,  _
                    ByVal sMemo As String,  _
                    ByVal sWeb As String,  _
                    ByVal sService_S_Time As String,  _
                    ByVal sService_D_Time As String,  _
                    ByVal sLastAgentID As String,  _
                    ByVal sDataKey As String,  _
                    ByVal LineType As String,  _
                    ByVal sIVRlog As String,  _
                    ByVal sTableName As String,  _
                    ByVal sURLog As String,  _
                    ByVal sAgentID As String,  _
                    ByVal sTypeID As String,  _
                    ByVal sCallOnPop As String,  _
                    ByVal sIVR_S_Time As String,  _
                    ByVal sIVR_D_Time As String,  _
                    ByVal sIVRInBoundInfo As String,  _
                    ByVal sSMemo As String,  _
                    ByVal sTKID As String,  _
                    ByVal AlertMemo As String)
            Me.SetCallLog_TK_AlertMemoAsync(sCallCallerID, sComplain, sCodelist, sMemo, sWeb, sService_S_Time, sService_D_Time, sLastAgentID, sDataKey, LineType, sIVRlog, sTableName, sURLog, sAgentID, sTypeID, sCallOnPop, sIVR_S_Time, sIVR_D_Time, sIVRInBoundInfo, sSMemo, sTKID, AlertMemo, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SetCallLog_TK_AlertMemoAsync( _
                    ByVal sCallCallerID As String,  _
                    ByVal sComplain As String,  _
                    ByVal sCodelist As String,  _
                    ByVal sMemo As String,  _
                    ByVal sWeb As String,  _
                    ByVal sService_S_Time As String,  _
                    ByVal sService_D_Time As String,  _
                    ByVal sLastAgentID As String,  _
                    ByVal sDataKey As String,  _
                    ByVal LineType As String,  _
                    ByVal sIVRlog As String,  _
                    ByVal sTableName As String,  _
                    ByVal sURLog As String,  _
                    ByVal sAgentID As String,  _
                    ByVal sTypeID As String,  _
                    ByVal sCallOnPop As String,  _
                    ByVal sIVR_S_Time As String,  _
                    ByVal sIVR_D_Time As String,  _
                    ByVal sIVRInBoundInfo As String,  _
                    ByVal sSMemo As String,  _
                    ByVal sTKID As String,  _
                    ByVal AlertMemo As String,  _
                    ByVal userState As Object)
            If (Me.SetCallLog_TK_AlertMemoOperationCompleted Is Nothing) Then
                Me.SetCallLog_TK_AlertMemoOperationCompleted = AddressOf Me.OnSetCallLog_TK_AlertMemoOperationCompleted
            End If
            Me.InvokeAsync("SetCallLog_TK_AlertMemo", New Object() {sCallCallerID, sComplain, sCodelist, sMemo, sWeb, sService_S_Time, sService_D_Time, sLastAgentID, sDataKey, LineType, sIVRlog, sTableName, sURLog, sAgentID, sTypeID, sCallOnPop, sIVR_S_Time, sIVR_D_Time, sIVRInBoundInfo, sSMemo, sTKID, AlertMemo}, Me.SetCallLog_TK_AlertMemoOperationCompleted, userState)
        End Sub
        
        Private Sub OnSetCallLog_TK_AlertMemoOperationCompleted(ByVal arg As Object)
            If (Not (Me.SetCallLog_TK_AlertMemoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SetCallLog_TK_AlertMemoCompleted(Me, New SetCallLog_TK_AlertMemoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SetCallLog_TK_AlertMemo2", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SetCallLog_TK_AlertMemo2( _
                    ByVal sCallCallerID As String,  _
                    ByVal sComplain As String,  _
                    ByVal sCodelist As String,  _
                    ByVal sMemo As String,  _
                    ByVal sWeb As String,  _
                    ByVal sService_S_Time As String,  _
                    ByVal sService_D_Time As String,  _
                    ByVal sLastAgentID As String,  _
                    ByVal sDataKey As String,  _
                    ByVal LineType As String,  _
                    ByVal sIVRlog As String,  _
                    ByVal sTableName As String,  _
                    ByVal sURLog As String,  _
                    ByVal sAgentID As String,  _
                    ByVal sTypeID As String,  _
                    ByVal sCallOnPop As String,  _
                    ByVal sIVR_S_Time As String,  _
                    ByVal sIVR_D_Time As String,  _
                    ByVal sIVRInBoundInfo As String,  _
                    ByVal sSMemo As String,  _
                    ByVal sTKID As String,  _
                    ByVal AlertMemo As String,  _
                    ByVal Phone As String) As String
            Dim results() As Object = Me.Invoke("SetCallLog_TK_AlertMemo2", New Object() {sCallCallerID, sComplain, sCodelist, sMemo, sWeb, sService_S_Time, sService_D_Time, sLastAgentID, sDataKey, LineType, sIVRlog, sTableName, sURLog, sAgentID, sTypeID, sCallOnPop, sIVR_S_Time, sIVR_D_Time, sIVRInBoundInfo, sSMemo, sTKID, AlertMemo, Phone})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SetCallLog_TK_AlertMemo2Async( _
                    ByVal sCallCallerID As String,  _
                    ByVal sComplain As String,  _
                    ByVal sCodelist As String,  _
                    ByVal sMemo As String,  _
                    ByVal sWeb As String,  _
                    ByVal sService_S_Time As String,  _
                    ByVal sService_D_Time As String,  _
                    ByVal sLastAgentID As String,  _
                    ByVal sDataKey As String,  _
                    ByVal LineType As String,  _
                    ByVal sIVRlog As String,  _
                    ByVal sTableName As String,  _
                    ByVal sURLog As String,  _
                    ByVal sAgentID As String,  _
                    ByVal sTypeID As String,  _
                    ByVal sCallOnPop As String,  _
                    ByVal sIVR_S_Time As String,  _
                    ByVal sIVR_D_Time As String,  _
                    ByVal sIVRInBoundInfo As String,  _
                    ByVal sSMemo As String,  _
                    ByVal sTKID As String,  _
                    ByVal AlertMemo As String,  _
                    ByVal Phone As String)
            Me.SetCallLog_TK_AlertMemo2Async(sCallCallerID, sComplain, sCodelist, sMemo, sWeb, sService_S_Time, sService_D_Time, sLastAgentID, sDataKey, LineType, sIVRlog, sTableName, sURLog, sAgentID, sTypeID, sCallOnPop, sIVR_S_Time, sIVR_D_Time, sIVRInBoundInfo, sSMemo, sTKID, AlertMemo, Phone, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SetCallLog_TK_AlertMemo2Async( _
                    ByVal sCallCallerID As String,  _
                    ByVal sComplain As String,  _
                    ByVal sCodelist As String,  _
                    ByVal sMemo As String,  _
                    ByVal sWeb As String,  _
                    ByVal sService_S_Time As String,  _
                    ByVal sService_D_Time As String,  _
                    ByVal sLastAgentID As String,  _
                    ByVal sDataKey As String,  _
                    ByVal LineType As String,  _
                    ByVal sIVRlog As String,  _
                    ByVal sTableName As String,  _
                    ByVal sURLog As String,  _
                    ByVal sAgentID As String,  _
                    ByVal sTypeID As String,  _
                    ByVal sCallOnPop As String,  _
                    ByVal sIVR_S_Time As String,  _
                    ByVal sIVR_D_Time As String,  _
                    ByVal sIVRInBoundInfo As String,  _
                    ByVal sSMemo As String,  _
                    ByVal sTKID As String,  _
                    ByVal AlertMemo As String,  _
                    ByVal Phone As String,  _
                    ByVal userState As Object)
            If (Me.SetCallLog_TK_AlertMemo2OperationCompleted Is Nothing) Then
                Me.SetCallLog_TK_AlertMemo2OperationCompleted = AddressOf Me.OnSetCallLog_TK_AlertMemo2OperationCompleted
            End If
            Me.InvokeAsync("SetCallLog_TK_AlertMemo2", New Object() {sCallCallerID, sComplain, sCodelist, sMemo, sWeb, sService_S_Time, sService_D_Time, sLastAgentID, sDataKey, LineType, sIVRlog, sTableName, sURLog, sAgentID, sTypeID, sCallOnPop, sIVR_S_Time, sIVR_D_Time, sIVRInBoundInfo, sSMemo, sTKID, AlertMemo, Phone}, Me.SetCallLog_TK_AlertMemo2OperationCompleted, userState)
        End Sub
        
        Private Sub OnSetCallLog_TK_AlertMemo2OperationCompleted(ByVal arg As Object)
            If (Not (Me.SetCallLog_TK_AlertMemo2CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SetCallLog_TK_AlertMemo2Completed(Me, New SetCallLog_TK_AlertMemo2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SetCallLog_TK_AlertMemo_URL", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SetCallLog_TK_AlertMemo_URL( _
                    ByVal sCallCallerID As String,  _
                    ByVal sComplain As String,  _
                    ByVal sCodelist As String,  _
                    ByVal sMemo As String,  _
                    ByVal sWeb As String,  _
                    ByVal sService_S_Time As String,  _
                    ByVal sService_D_Time As String,  _
                    ByVal sLastAgentID As String,  _
                    ByVal sDataKey As String,  _
                    ByVal LineType As String,  _
                    ByVal sIVRlog As String,  _
                    ByVal sTableName As String,  _
                    ByVal sURLog As String,  _
                    ByVal sAgentID As String,  _
                    ByVal sTypeID As String,  _
                    ByVal sCallOnPop As String,  _
                    ByVal sIVR_S_Time As String,  _
                    ByVal sIVR_D_Time As String,  _
                    ByVal sIVRInBoundInfo As String,  _
                    ByVal sSMemo As String,  _
                    ByVal sTKID As String,  _
                    ByVal AlertMemo As String,  _
                    ByVal Phone As String,  _
                    ByVal CusExt1 As String,  _
                    ByVal CusExt2 As String,  _
                    ByVal CusExt3 As String,  _
                    ByVal CusExt4 As String,  _
                    ByVal CusExt5 As String) As String
            Dim results() As Object = Me.Invoke("SetCallLog_TK_AlertMemo_URL", New Object() {sCallCallerID, sComplain, sCodelist, sMemo, sWeb, sService_S_Time, sService_D_Time, sLastAgentID, sDataKey, LineType, sIVRlog, sTableName, sURLog, sAgentID, sTypeID, sCallOnPop, sIVR_S_Time, sIVR_D_Time, sIVRInBoundInfo, sSMemo, sTKID, AlertMemo, Phone, CusExt1, CusExt2, CusExt3, CusExt4, CusExt5})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SetCallLog_TK_AlertMemo_URLAsync( _
                    ByVal sCallCallerID As String,  _
                    ByVal sComplain As String,  _
                    ByVal sCodelist As String,  _
                    ByVal sMemo As String,  _
                    ByVal sWeb As String,  _
                    ByVal sService_S_Time As String,  _
                    ByVal sService_D_Time As String,  _
                    ByVal sLastAgentID As String,  _
                    ByVal sDataKey As String,  _
                    ByVal LineType As String,  _
                    ByVal sIVRlog As String,  _
                    ByVal sTableName As String,  _
                    ByVal sURLog As String,  _
                    ByVal sAgentID As String,  _
                    ByVal sTypeID As String,  _
                    ByVal sCallOnPop As String,  _
                    ByVal sIVR_S_Time As String,  _
                    ByVal sIVR_D_Time As String,  _
                    ByVal sIVRInBoundInfo As String,  _
                    ByVal sSMemo As String,  _
                    ByVal sTKID As String,  _
                    ByVal AlertMemo As String,  _
                    ByVal Phone As String,  _
                    ByVal CusExt1 As String,  _
                    ByVal CusExt2 As String,  _
                    ByVal CusExt3 As String,  _
                    ByVal CusExt4 As String,  _
                    ByVal CusExt5 As String)
            Me.SetCallLog_TK_AlertMemo_URLAsync(sCallCallerID, sComplain, sCodelist, sMemo, sWeb, sService_S_Time, sService_D_Time, sLastAgentID, sDataKey, LineType, sIVRlog, sTableName, sURLog, sAgentID, sTypeID, sCallOnPop, sIVR_S_Time, sIVR_D_Time, sIVRInBoundInfo, sSMemo, sTKID, AlertMemo, Phone, CusExt1, CusExt2, CusExt3, CusExt4, CusExt5, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SetCallLog_TK_AlertMemo_URLAsync( _
                    ByVal sCallCallerID As String,  _
                    ByVal sComplain As String,  _
                    ByVal sCodelist As String,  _
                    ByVal sMemo As String,  _
                    ByVal sWeb As String,  _
                    ByVal sService_S_Time As String,  _
                    ByVal sService_D_Time As String,  _
                    ByVal sLastAgentID As String,  _
                    ByVal sDataKey As String,  _
                    ByVal LineType As String,  _
                    ByVal sIVRlog As String,  _
                    ByVal sTableName As String,  _
                    ByVal sURLog As String,  _
                    ByVal sAgentID As String,  _
                    ByVal sTypeID As String,  _
                    ByVal sCallOnPop As String,  _
                    ByVal sIVR_S_Time As String,  _
                    ByVal sIVR_D_Time As String,  _
                    ByVal sIVRInBoundInfo As String,  _
                    ByVal sSMemo As String,  _
                    ByVal sTKID As String,  _
                    ByVal AlertMemo As String,  _
                    ByVal Phone As String,  _
                    ByVal CusExt1 As String,  _
                    ByVal CusExt2 As String,  _
                    ByVal CusExt3 As String,  _
                    ByVal CusExt4 As String,  _
                    ByVal CusExt5 As String,  _
                    ByVal userState As Object)
            If (Me.SetCallLog_TK_AlertMemo_URLOperationCompleted Is Nothing) Then
                Me.SetCallLog_TK_AlertMemo_URLOperationCompleted = AddressOf Me.OnSetCallLog_TK_AlertMemo_URLOperationCompleted
            End If
            Me.InvokeAsync("SetCallLog_TK_AlertMemo_URL", New Object() {sCallCallerID, sComplain, sCodelist, sMemo, sWeb, sService_S_Time, sService_D_Time, sLastAgentID, sDataKey, LineType, sIVRlog, sTableName, sURLog, sAgentID, sTypeID, sCallOnPop, sIVR_S_Time, sIVR_D_Time, sIVRInBoundInfo, sSMemo, sTKID, AlertMemo, Phone, CusExt1, CusExt2, CusExt3, CusExt4, CusExt5}, Me.SetCallLog_TK_AlertMemo_URLOperationCompleted, userState)
        End Sub
        
        Private Sub OnSetCallLog_TK_AlertMemo_URLOperationCompleted(ByVal arg As Object)
            If (Not (Me.SetCallLog_TK_AlertMemo_URLCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SetCallLog_TK_AlertMemo_URLCompleted(Me, New SetCallLog_TK_AlertMemo_URLCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetAllTable", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetAllTable(ByVal sConnection As String, ByVal sDBType As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetAllTable", New Object() {sConnection, sDBType})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetAllTableAsync(ByVal sConnection As String, ByVal sDBType As String)
            Me.GetAllTableAsync(sConnection, sDBType, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetAllTableAsync(ByVal sConnection As String, ByVal sDBType As String, ByVal userState As Object)
            If (Me.GetAllTableOperationCompleted Is Nothing) Then
                Me.GetAllTableOperationCompleted = AddressOf Me.OnGetAllTableOperationCompleted
            End If
            Me.InvokeAsync("GetAllTable", New Object() {sConnection, sDBType}, Me.GetAllTableOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetAllTableOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetAllTableCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetAllTableCompleted(Me, New GetAllTableCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CheckInfoCenterTable", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CheckInfoCenterTable() As Boolean
            Dim results() As Object = Me.Invoke("CheckInfoCenterTable", New Object(-1) {})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CheckInfoCenterTableAsync()
            Me.CheckInfoCenterTableAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CheckInfoCenterTableAsync(ByVal userState As Object)
            If (Me.CheckInfoCenterTableOperationCompleted Is Nothing) Then
                Me.CheckInfoCenterTableOperationCompleted = AddressOf Me.OnCheckInfoCenterTableOperationCompleted
            End If
            Me.InvokeAsync("CheckInfoCenterTable", New Object(-1) {}, Me.CheckInfoCenterTableOperationCompleted, userState)
        End Sub
        
        Private Sub OnCheckInfoCenterTableOperationCompleted(ByVal arg As Object)
            If (Not (Me.CheckInfoCenterTableCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CheckInfoCenterTableCompleted(Me, New CheckInfoCenterTableCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetAllcolumns_V2", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetAllcolumns_V2(ByVal sConnection As String, ByVal sTableName As String, ByVal sDBType As String, ByVal sQueryColumn As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetAllcolumns_V2", New Object() {sConnection, sTableName, sDBType, sQueryColumn})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetAllcolumns_V2Async(ByVal sConnection As String, ByVal sTableName As String, ByVal sDBType As String, ByVal sQueryColumn As String)
            Me.GetAllcolumns_V2Async(sConnection, sTableName, sDBType, sQueryColumn, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetAllcolumns_V2Async(ByVal sConnection As String, ByVal sTableName As String, ByVal sDBType As String, ByVal sQueryColumn As String, ByVal userState As Object)
            If (Me.GetAllcolumns_V2OperationCompleted Is Nothing) Then
                Me.GetAllcolumns_V2OperationCompleted = AddressOf Me.OnGetAllcolumns_V2OperationCompleted
            End If
            Me.InvokeAsync("GetAllcolumns_V2", New Object() {sConnection, sTableName, sDBType, sQueryColumn}, Me.GetAllcolumns_V2OperationCompleted, userState)
        End Sub
        
        Private Sub OnGetAllcolumns_V2OperationCompleted(ByVal arg As Object)
            If (Not (Me.GetAllcolumns_V2CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetAllcolumns_V2Completed(Me, New GetAllcolumns_V2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetAllcolumns", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetAllcolumns(ByVal sConnection As String, ByVal sTableName As String, ByVal sDBType As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetAllcolumns", New Object() {sConnection, sTableName, sDBType})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetAllcolumnsAsync(ByVal sConnection As String, ByVal sTableName As String, ByVal sDBType As String)
            Me.GetAllcolumnsAsync(sConnection, sTableName, sDBType, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetAllcolumnsAsync(ByVal sConnection As String, ByVal sTableName As String, ByVal sDBType As String, ByVal userState As Object)
            If (Me.GetAllcolumnsOperationCompleted Is Nothing) Then
                Me.GetAllcolumnsOperationCompleted = AddressOf Me.OnGetAllcolumnsOperationCompleted
            End If
            Me.InvokeAsync("GetAllcolumns", New Object() {sConnection, sTableName, sDBType}, Me.GetAllcolumnsOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetAllcolumnsOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetAllcolumnsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetAllcolumnsCompleted(Me, New GetAllcolumnsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CreateCustTypeView", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub CreateCustTypeView(ByVal sTableName As String, ByVal sViewName As String, ByVal sInsertSQL As String)
            Me.Invoke("CreateCustTypeView", New Object() {sTableName, sViewName, sInsertSQL})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CreateCustTypeViewAsync(ByVal sTableName As String, ByVal sViewName As String, ByVal sInsertSQL As String)
            Me.CreateCustTypeViewAsync(sTableName, sViewName, sInsertSQL, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CreateCustTypeViewAsync(ByVal sTableName As String, ByVal sViewName As String, ByVal sInsertSQL As String, ByVal userState As Object)
            If (Me.CreateCustTypeViewOperationCompleted Is Nothing) Then
                Me.CreateCustTypeViewOperationCompleted = AddressOf Me.OnCreateCustTypeViewOperationCompleted
            End If
            Me.InvokeAsync("CreateCustTypeView", New Object() {sTableName, sViewName, sInsertSQL}, Me.CreateCustTypeViewOperationCompleted, userState)
        End Sub
        
        Private Sub OnCreateCustTypeViewOperationCompleted(ByVal arg As Object)
            If (Not (Me.CreateCustTypeViewCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CreateCustTypeViewCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetDataCount", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetDataCount(ByVal sSql As String) As Boolean
            Dim results() As Object = Me.Invoke("GetDataCount", New Object() {sSql})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetDataCountAsync(ByVal sSql As String)
            Me.GetDataCountAsync(sSql, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetDataCountAsync(ByVal sSql As String, ByVal userState As Object)
            If (Me.GetDataCountOperationCompleted Is Nothing) Then
                Me.GetDataCountOperationCompleted = AddressOf Me.OnGetDataCountOperationCompleted
            End If
            Me.InvokeAsync("GetDataCount", New Object() {sSql}, Me.GetDataCountOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetDataCountOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetDataCountCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetDataCountCompleted(Me, New GetDataCountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetInfoContant", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetInfoContant(ByVal sTypeID As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetInfoContant", New Object() {sTypeID})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetInfoContantAsync(ByVal sTypeID As String)
            Me.GetInfoContantAsync(sTypeID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetInfoContantAsync(ByVal sTypeID As String, ByVal userState As Object)
            If (Me.GetInfoContantOperationCompleted Is Nothing) Then
                Me.GetInfoContantOperationCompleted = AddressOf Me.OnGetInfoContantOperationCompleted
            End If
            Me.InvokeAsync("GetInfoContant", New Object() {sTypeID}, Me.GetInfoContantOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetInfoContantOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetInfoContantCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetInfoContantCompleted(Me, New GetInfoContantCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetLinkValue", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetLinkValue(ByVal sConnection As String, ByVal sTable As String, ByVal sColumn As String, ByVal sDBType As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetLinkValue", New Object() {sConnection, sTable, sColumn, sDBType})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetLinkValueAsync(ByVal sConnection As String, ByVal sTable As String, ByVal sColumn As String, ByVal sDBType As String)
            Me.GetLinkValueAsync(sConnection, sTable, sColumn, sDBType, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetLinkValueAsync(ByVal sConnection As String, ByVal sTable As String, ByVal sColumn As String, ByVal sDBType As String, ByVal userState As Object)
            If (Me.GetLinkValueOperationCompleted Is Nothing) Then
                Me.GetLinkValueOperationCompleted = AddressOf Me.OnGetLinkValueOperationCompleted
            End If
            Me.InvokeAsync("GetLinkValue", New Object() {sConnection, sTable, sColumn, sDBType}, Me.GetLinkValueOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetLinkValueOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetLinkValueCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetLinkValueCompleted(Me, New GetLinkValueCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SetInfoContant", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub SetInfoContant(ByVal sTypeID As String, ByVal sURLValue As String, ByVal sTableName As String, ByVal sACDRouting As String, ByVal sColumnName As String, ByVal sDisplayName As String, ByVal sDisplay As String, ByVal sSelect As String, ByVal sAdd As String, ByVal sPkey As String, ByVal sLinkValue As String, ByVal CusParameter As String, ByVal sParameter As String, ByVal AddParameter As String, ByVal sLinkColumn As String)
            Me.Invoke("SetInfoContant", New Object() {sTypeID, sURLValue, sTableName, sACDRouting, sColumnName, sDisplayName, sDisplay, sSelect, sAdd, sPkey, sLinkValue, CusParameter, sParameter, AddParameter, sLinkColumn})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SetInfoContantAsync(ByVal sTypeID As String, ByVal sURLValue As String, ByVal sTableName As String, ByVal sACDRouting As String, ByVal sColumnName As String, ByVal sDisplayName As String, ByVal sDisplay As String, ByVal sSelect As String, ByVal sAdd As String, ByVal sPkey As String, ByVal sLinkValue As String, ByVal CusParameter As String, ByVal sParameter As String, ByVal AddParameter As String, ByVal sLinkColumn As String)
            Me.SetInfoContantAsync(sTypeID, sURLValue, sTableName, sACDRouting, sColumnName, sDisplayName, sDisplay, sSelect, sAdd, sPkey, sLinkValue, CusParameter, sParameter, AddParameter, sLinkColumn, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SetInfoContantAsync( _
                    ByVal sTypeID As String,  _
                    ByVal sURLValue As String,  _
                    ByVal sTableName As String,  _
                    ByVal sACDRouting As String,  _
                    ByVal sColumnName As String,  _
                    ByVal sDisplayName As String,  _
                    ByVal sDisplay As String,  _
                    ByVal sSelect As String,  _
                    ByVal sAdd As String,  _
                    ByVal sPkey As String,  _
                    ByVal sLinkValue As String,  _
                    ByVal CusParameter As String,  _
                    ByVal sParameter As String,  _
                    ByVal AddParameter As String,  _
                    ByVal sLinkColumn As String,  _
                    ByVal userState As Object)
            If (Me.SetInfoContantOperationCompleted Is Nothing) Then
                Me.SetInfoContantOperationCompleted = AddressOf Me.OnSetInfoContantOperationCompleted
            End If
            Me.InvokeAsync("SetInfoContant", New Object() {sTypeID, sURLValue, sTableName, sACDRouting, sColumnName, sDisplayName, sDisplay, sSelect, sAdd, sPkey, sLinkValue, CusParameter, sParameter, AddParameter, sLinkColumn}, Me.SetInfoContantOperationCompleted, userState)
        End Sub
        
        Private Sub OnSetInfoContantOperationCompleted(ByVal arg As Object)
            If (Not (Me.SetInfoContantCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SetInfoContantCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateInfoContant", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub UpdateInfoContant(ByVal sTypeID As String, ByVal sURLValue As String, ByVal sTableName As String, ByVal sACDRouting As String, ByVal sColumnName As String, ByVal sDisplayName As String, ByVal sDisplay As String, ByVal sSelect As String, ByVal sAdd As String, ByVal sPkey As String, ByVal sLinkValue As String, ByVal CusParameter As String, ByVal sParameter As String, ByVal AddParameter As String, ByVal sLinkColumn As String)
            Me.Invoke("UpdateInfoContant", New Object() {sTypeID, sURLValue, sTableName, sACDRouting, sColumnName, sDisplayName, sDisplay, sSelect, sAdd, sPkey, sLinkValue, CusParameter, sParameter, AddParameter, sLinkColumn})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateInfoContantAsync(ByVal sTypeID As String, ByVal sURLValue As String, ByVal sTableName As String, ByVal sACDRouting As String, ByVal sColumnName As String, ByVal sDisplayName As String, ByVal sDisplay As String, ByVal sSelect As String, ByVal sAdd As String, ByVal sPkey As String, ByVal sLinkValue As String, ByVal CusParameter As String, ByVal sParameter As String, ByVal AddParameter As String, ByVal sLinkColumn As String)
            Me.UpdateInfoContantAsync(sTypeID, sURLValue, sTableName, sACDRouting, sColumnName, sDisplayName, sDisplay, sSelect, sAdd, sPkey, sLinkValue, CusParameter, sParameter, AddParameter, sLinkColumn, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateInfoContantAsync( _
                    ByVal sTypeID As String,  _
                    ByVal sURLValue As String,  _
                    ByVal sTableName As String,  _
                    ByVal sACDRouting As String,  _
                    ByVal sColumnName As String,  _
                    ByVal sDisplayName As String,  _
                    ByVal sDisplay As String,  _
                    ByVal sSelect As String,  _
                    ByVal sAdd As String,  _
                    ByVal sPkey As String,  _
                    ByVal sLinkValue As String,  _
                    ByVal CusParameter As String,  _
                    ByVal sParameter As String,  _
                    ByVal AddParameter As String,  _
                    ByVal sLinkColumn As String,  _
                    ByVal userState As Object)
            If (Me.UpdateInfoContantOperationCompleted Is Nothing) Then
                Me.UpdateInfoContantOperationCompleted = AddressOf Me.OnUpdateInfoContantOperationCompleted
            End If
            Me.InvokeAsync("UpdateInfoContant", New Object() {sTypeID, sURLValue, sTableName, sACDRouting, sColumnName, sDisplayName, sDisplay, sSelect, sAdd, sPkey, sLinkValue, CusParameter, sParameter, AddParameter, sLinkColumn}, Me.UpdateInfoContantOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateInfoContantOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateInfoContantCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateInfoContantCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DeleteInfoContant", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub DeleteInfoContant(ByVal sTypeID As String)
            Me.Invoke("DeleteInfoContant", New Object() {sTypeID})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteInfoContantAsync(ByVal sTypeID As String)
            Me.DeleteInfoContantAsync(sTypeID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteInfoContantAsync(ByVal sTypeID As String, ByVal userState As Object)
            If (Me.DeleteInfoContantOperationCompleted Is Nothing) Then
                Me.DeleteInfoContantOperationCompleted = AddressOf Me.OnDeleteInfoContantOperationCompleted
            End If
            Me.InvokeAsync("DeleteInfoContant", New Object() {sTypeID}, Me.DeleteInfoContantOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteInfoContantOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteInfoContantCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteInfoContantCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetViewAllColumns", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetViewAllColumns(ByVal sViewName As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetViewAllColumns", New Object() {sViewName})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetViewAllColumnsAsync(ByVal sViewName As String)
            Me.GetViewAllColumnsAsync(sViewName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetViewAllColumnsAsync(ByVal sViewName As String, ByVal userState As Object)
            If (Me.GetViewAllColumnsOperationCompleted Is Nothing) Then
                Me.GetViewAllColumnsOperationCompleted = AddressOf Me.OnGetViewAllColumnsOperationCompleted
            End If
            Me.InvokeAsync("GetViewAllColumns", New Object() {sViewName}, Me.GetViewAllColumnsOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetViewAllColumnsOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetViewAllColumnsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetViewAllColumnsCompleted(Me, New GetViewAllColumnsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetSMsg", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetSMsg(ByVal sSMsgID As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetSMsg", New Object() {sSMsgID})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetSMsgAsync(ByVal sSMsgID As String)
            Me.GetSMsgAsync(sSMsgID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetSMsgAsync(ByVal sSMsgID As String, ByVal userState As Object)
            If (Me.GetSMsgOperationCompleted Is Nothing) Then
                Me.GetSMsgOperationCompleted = AddressOf Me.OnGetSMsgOperationCompleted
            End If
            Me.InvokeAsync("GetSMsg", New Object() {sSMsgID}, Me.GetSMsgOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetSMsgOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetSMsgCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetSMsgCompleted(Me, New GetSMsgCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SetSMsg", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub SetSMsg(ByVal sTitle As String, ByVal sFontColor As String, ByVal sTypeID As String, ByVal sSort As String)
            Me.Invoke("SetSMsg", New Object() {sTitle, sFontColor, sTypeID, sSort})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SetSMsgAsync(ByVal sTitle As String, ByVal sFontColor As String, ByVal sTypeID As String, ByVal sSort As String)
            Me.SetSMsgAsync(sTitle, sFontColor, sTypeID, sSort, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SetSMsgAsync(ByVal sTitle As String, ByVal sFontColor As String, ByVal sTypeID As String, ByVal sSort As String, ByVal userState As Object)
            If (Me.SetSMsgOperationCompleted Is Nothing) Then
                Me.SetSMsgOperationCompleted = AddressOf Me.OnSetSMsgOperationCompleted
            End If
            Me.InvokeAsync("SetSMsg", New Object() {sTitle, sFontColor, sTypeID, sSort}, Me.SetSMsgOperationCompleted, userState)
        End Sub
        
        Private Sub OnSetSMsgOperationCompleted(ByVal arg As Object)
            If (Not (Me.SetSMsgCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SetSMsgCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateSMsg", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub UpdateSMsg(ByVal sTitle As String, ByVal sFontColor As String, ByVal sTypeID As String, ByVal sID As String, ByVal sSort As String)
            Me.Invoke("UpdateSMsg", New Object() {sTitle, sFontColor, sTypeID, sID, sSort})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateSMsgAsync(ByVal sTitle As String, ByVal sFontColor As String, ByVal sTypeID As String, ByVal sID As String, ByVal sSort As String)
            Me.UpdateSMsgAsync(sTitle, sFontColor, sTypeID, sID, sSort, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateSMsgAsync(ByVal sTitle As String, ByVal sFontColor As String, ByVal sTypeID As String, ByVal sID As String, ByVal sSort As String, ByVal userState As Object)
            If (Me.UpdateSMsgOperationCompleted Is Nothing) Then
                Me.UpdateSMsgOperationCompleted = AddressOf Me.OnUpdateSMsgOperationCompleted
            End If
            Me.InvokeAsync("UpdateSMsg", New Object() {sTitle, sFontColor, sTypeID, sID, sSort}, Me.UpdateSMsgOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateSMsgOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateSMsgCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateSMsgCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetMsg", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetMsg(ByVal sSMsgID As String, ByVal sTypeID As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetMsg", New Object() {sSMsgID, sTypeID})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetMsgAsync(ByVal sSMsgID As String, ByVal sTypeID As String)
            Me.GetMsgAsync(sSMsgID, sTypeID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetMsgAsync(ByVal sSMsgID As String, ByVal sTypeID As String, ByVal userState As Object)
            If (Me.GetMsgOperationCompleted Is Nothing) Then
                Me.GetMsgOperationCompleted = AddressOf Me.OnGetMsgOperationCompleted
            End If
            Me.InvokeAsync("GetMsg", New Object() {sSMsgID, sTypeID}, Me.GetMsgOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetMsgOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetMsgCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetMsgCompleted(Me, New GetMsgCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DeleteSMsg", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub DeleteSMsg(ByVal sID As String)
            Me.Invoke("DeleteSMsg", New Object() {sID})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteSMsgAsync(ByVal sID As String)
            Me.DeleteSMsgAsync(sID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteSMsgAsync(ByVal sID As String, ByVal userState As Object)
            If (Me.DeleteSMsgOperationCompleted Is Nothing) Then
                Me.DeleteSMsgOperationCompleted = AddressOf Me.OnDeleteSMsgOperationCompleted
            End If
            Me.InvokeAsync("DeleteSMsg", New Object() {sID}, Me.DeleteSMsgOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteSMsgOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteSMsgCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteSMsgCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SetMsg", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub SetMsg(ByVal sTitle As String, ByVal sURL As String, ByVal sSMsgID As String, ByVal sFontColor As String, ByVal sTypeID As String, ByVal sLinkValue As String)
            Me.Invoke("SetMsg", New Object() {sTitle, sURL, sSMsgID, sFontColor, sTypeID, sLinkValue})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SetMsgAsync(ByVal sTitle As String, ByVal sURL As String, ByVal sSMsgID As String, ByVal sFontColor As String, ByVal sTypeID As String, ByVal sLinkValue As String)
            Me.SetMsgAsync(sTitle, sURL, sSMsgID, sFontColor, sTypeID, sLinkValue, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SetMsgAsync(ByVal sTitle As String, ByVal sURL As String, ByVal sSMsgID As String, ByVal sFontColor As String, ByVal sTypeID As String, ByVal sLinkValue As String, ByVal userState As Object)
            If (Me.SetMsgOperationCompleted Is Nothing) Then
                Me.SetMsgOperationCompleted = AddressOf Me.OnSetMsgOperationCompleted
            End If
            Me.InvokeAsync("SetMsg", New Object() {sTitle, sURL, sSMsgID, sFontColor, sTypeID, sLinkValue}, Me.SetMsgOperationCompleted, userState)
        End Sub
        
        Private Sub OnSetMsgOperationCompleted(ByVal arg As Object)
            If (Not (Me.SetMsgCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SetMsgCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateMsg", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub UpdateMsg(ByVal sTitle As String, ByVal sURL As String, ByVal sFontColor As String, ByVal sID As String, ByVal sTypeID As String, ByVal sLinkValue As String)
            Me.Invoke("UpdateMsg", New Object() {sTitle, sURL, sFontColor, sID, sTypeID, sLinkValue})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateMsgAsync(ByVal sTitle As String, ByVal sURL As String, ByVal sFontColor As String, ByVal sID As String, ByVal sTypeID As String, ByVal sLinkValue As String)
            Me.UpdateMsgAsync(sTitle, sURL, sFontColor, sID, sTypeID, sLinkValue, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateMsgAsync(ByVal sTitle As String, ByVal sURL As String, ByVal sFontColor As String, ByVal sID As String, ByVal sTypeID As String, ByVal sLinkValue As String, ByVal userState As Object)
            If (Me.UpdateMsgOperationCompleted Is Nothing) Then
                Me.UpdateMsgOperationCompleted = AddressOf Me.OnUpdateMsgOperationCompleted
            End If
            Me.InvokeAsync("UpdateMsg", New Object() {sTitle, sURL, sFontColor, sID, sTypeID, sLinkValue}, Me.UpdateMsgOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateMsgOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateMsgCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateMsgCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateMsgSort", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub UpdateMsgSort(ByVal iMsgID As Integer, ByVal iSMsgID As Integer, ByVal sSort As String)
            Me.Invoke("UpdateMsgSort", New Object() {iMsgID, iSMsgID, sSort})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateMsgSortAsync(ByVal iMsgID As Integer, ByVal iSMsgID As Integer, ByVal sSort As String)
            Me.UpdateMsgSortAsync(iMsgID, iSMsgID, sSort, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateMsgSortAsync(ByVal iMsgID As Integer, ByVal iSMsgID As Integer, ByVal sSort As String, ByVal userState As Object)
            If (Me.UpdateMsgSortOperationCompleted Is Nothing) Then
                Me.UpdateMsgSortOperationCompleted = AddressOf Me.OnUpdateMsgSortOperationCompleted
            End If
            Me.InvokeAsync("UpdateMsgSort", New Object() {iMsgID, iSMsgID, sSort}, Me.UpdateMsgSortOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateMsgSortOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateMsgSortCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateMsgSortCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DeleteMsg", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub DeleteMsg(ByVal sID As String)
            Me.Invoke("DeleteMsg", New Object() {sID})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteMsgAsync(ByVal sID As String)
            Me.DeleteMsgAsync(sID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteMsgAsync(ByVal sID As String, ByVal userState As Object)
            If (Me.DeleteMsgOperationCompleted Is Nothing) Then
                Me.DeleteMsgOperationCompleted = AddressOf Me.OnDeleteMsgOperationCompleted
            End If
            Me.InvokeAsync("DeleteMsg", New Object() {sID}, Me.DeleteMsgOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteMsgOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteMsgCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteMsgCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetSMemo_V2", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetSMemo_V2(ByVal sTypeID As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetSMemo_V2", New Object() {sTypeID})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetSMemo_V2Async(ByVal sTypeID As String)
            Me.GetSMemo_V2Async(sTypeID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetSMemo_V2Async(ByVal sTypeID As String, ByVal userState As Object)
            If (Me.GetSMemo_V2OperationCompleted Is Nothing) Then
                Me.GetSMemo_V2OperationCompleted = AddressOf Me.OnGetSMemo_V2OperationCompleted
            End If
            Me.InvokeAsync("GetSMemo_V2", New Object() {sTypeID}, Me.GetSMemo_V2OperationCompleted, userState)
        End Sub
        
        Private Sub OnGetSMemo_V2OperationCompleted(ByVal arg As Object)
            If (Not (Me.GetSMemo_V2CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetSMemo_V2Completed(Me, New GetSMemo_V2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetCustomerLevelBase", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetCustomerLevelBase(ByVal sID As String, ByVal sCustLevel As String, ByVal bSelect As Boolean) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetCustomerLevelBase", New Object() {sID, sCustLevel, bSelect})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetCustomerLevelBaseAsync(ByVal sID As String, ByVal sCustLevel As String, ByVal bSelect As Boolean)
            Me.GetCustomerLevelBaseAsync(sID, sCustLevel, bSelect, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetCustomerLevelBaseAsync(ByVal sID As String, ByVal sCustLevel As String, ByVal bSelect As Boolean, ByVal userState As Object)
            If (Me.GetCustomerLevelBaseOperationCompleted Is Nothing) Then
                Me.GetCustomerLevelBaseOperationCompleted = AddressOf Me.OnGetCustomerLevelBaseOperationCompleted
            End If
            Me.InvokeAsync("GetCustomerLevelBase", New Object() {sID, sCustLevel, bSelect}, Me.GetCustomerLevelBaseOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetCustomerLevelBaseOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetCustomerLevelBaseCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetCustomerLevelBaseCompleted(Me, New GetCustomerLevelBaseCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetCustomerLevel", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetCustomerLevel(ByVal sID As String, ByVal sCustLevel As String, ByVal bSelect As Boolean) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetCustomerLevel", New Object() {sID, sCustLevel, bSelect})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetCustomerLevelAsync(ByVal sID As String, ByVal sCustLevel As String, ByVal bSelect As Boolean)
            Me.GetCustomerLevelAsync(sID, sCustLevel, bSelect, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetCustomerLevelAsync(ByVal sID As String, ByVal sCustLevel As String, ByVal bSelect As Boolean, ByVal userState As Object)
            If (Me.GetCustomerLevelOperationCompleted Is Nothing) Then
                Me.GetCustomerLevelOperationCompleted = AddressOf Me.OnGetCustomerLevelOperationCompleted
            End If
            Me.InvokeAsync("GetCustomerLevel", New Object() {sID, sCustLevel, bSelect}, Me.GetCustomerLevelOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetCustomerLevelOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetCustomerLevelCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetCustomerLevelCompleted(Me, New GetCustomerLevelCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetCustomerData", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetCustomerData(ByVal sDBType As String, ByVal sTableName As String, ByVal sLinkValue As String, ByVal sSelectValue As String, ByVal sPkey As String, ByVal sInboundKey As String, ByVal sID As String, ByVal bSelect As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetCustomerData", New Object() {sDBType, sTableName, sLinkValue, sSelectValue, sPkey, sInboundKey, sID, bSelect})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetCustomerDataAsync(ByVal sDBType As String, ByVal sTableName As String, ByVal sLinkValue As String, ByVal sSelectValue As String, ByVal sPkey As String, ByVal sInboundKey As String, ByVal sID As String, ByVal bSelect As String)
            Me.GetCustomerDataAsync(sDBType, sTableName, sLinkValue, sSelectValue, sPkey, sInboundKey, sID, bSelect, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetCustomerDataAsync(ByVal sDBType As String, ByVal sTableName As String, ByVal sLinkValue As String, ByVal sSelectValue As String, ByVal sPkey As String, ByVal sInboundKey As String, ByVal sID As String, ByVal bSelect As String, ByVal userState As Object)
            If (Me.GetCustomerDataOperationCompleted Is Nothing) Then
                Me.GetCustomerDataOperationCompleted = AddressOf Me.OnGetCustomerDataOperationCompleted
            End If
            Me.InvokeAsync("GetCustomerData", New Object() {sDBType, sTableName, sLinkValue, sSelectValue, sPkey, sInboundKey, sID, bSelect}, Me.GetCustomerDataOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetCustomerDataOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetCustomerDataCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetCustomerDataCompleted(Me, New GetCustomerDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetCustomerLevelTSMC", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetCustomerLevelTSMC(ByVal sID As String, ByVal sCustLevel As String, ByVal bSelect As Boolean) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetCustomerLevelTSMC", New Object() {sID, sCustLevel, bSelect})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetCustomerLevelTSMCAsync(ByVal sID As String, ByVal sCustLevel As String, ByVal bSelect As Boolean)
            Me.GetCustomerLevelTSMCAsync(sID, sCustLevel, bSelect, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetCustomerLevelTSMCAsync(ByVal sID As String, ByVal sCustLevel As String, ByVal bSelect As Boolean, ByVal userState As Object)
            If (Me.GetCustomerLevelTSMCOperationCompleted Is Nothing) Then
                Me.GetCustomerLevelTSMCOperationCompleted = AddressOf Me.OnGetCustomerLevelTSMCOperationCompleted
            End If
            Me.InvokeAsync("GetCustomerLevelTSMC", New Object() {sID, sCustLevel, bSelect}, Me.GetCustomerLevelTSMCOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetCustomerLevelTSMCOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetCustomerLevelTSMCCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetCustomerLevelTSMCCompleted(Me, New GetCustomerLevelTSMCCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SetBulletin", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub SetBulletin(ByVal sTitle As String, ByVal sGroupType As String, ByVal sFontColor As String, ByVal sSendID As String, ByVal sSort As String)
            Me.Invoke("SetBulletin", New Object() {sTitle, sGroupType, sFontColor, sSendID, sSort})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SetBulletinAsync(ByVal sTitle As String, ByVal sGroupType As String, ByVal sFontColor As String, ByVal sSendID As String, ByVal sSort As String)
            Me.SetBulletinAsync(sTitle, sGroupType, sFontColor, sSendID, sSort, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SetBulletinAsync(ByVal sTitle As String, ByVal sGroupType As String, ByVal sFontColor As String, ByVal sSendID As String, ByVal sSort As String, ByVal userState As Object)
            If (Me.SetBulletinOperationCompleted Is Nothing) Then
                Me.SetBulletinOperationCompleted = AddressOf Me.OnSetBulletinOperationCompleted
            End If
            Me.InvokeAsync("SetBulletin", New Object() {sTitle, sGroupType, sFontColor, sSendID, sSort}, Me.SetBulletinOperationCompleted, userState)
        End Sub
        
        Private Sub OnSetBulletinOperationCompleted(ByVal arg As Object)
            If (Not (Me.SetBulletinCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SetBulletinCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateBulletin", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub UpdateBulletin(ByVal sID As String, ByVal sTitle As String, ByVal sGroupType As String, ByVal sFontColor As String, ByVal sSendID As String, ByVal sSort As String)
            Me.Invoke("UpdateBulletin", New Object() {sID, sTitle, sGroupType, sFontColor, sSendID, sSort})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateBulletinAsync(ByVal sID As String, ByVal sTitle As String, ByVal sGroupType As String, ByVal sFontColor As String, ByVal sSendID As String, ByVal sSort As String)
            Me.UpdateBulletinAsync(sID, sTitle, sGroupType, sFontColor, sSendID, sSort, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateBulletinAsync(ByVal sID As String, ByVal sTitle As String, ByVal sGroupType As String, ByVal sFontColor As String, ByVal sSendID As String, ByVal sSort As String, ByVal userState As Object)
            If (Me.UpdateBulletinOperationCompleted Is Nothing) Then
                Me.UpdateBulletinOperationCompleted = AddressOf Me.OnUpdateBulletinOperationCompleted
            End If
            Me.InvokeAsync("UpdateBulletin", New Object() {sID, sTitle, sGroupType, sFontColor, sSendID, sSort}, Me.UpdateBulletinOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateBulletinOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateBulletinCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateBulletinCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SendBulletin", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub SendBulletin(ByVal sID As String)
            Me.Invoke("SendBulletin", New Object() {sID})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SendBulletinAsync(ByVal sID As String)
            Me.SendBulletinAsync(sID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SendBulletinAsync(ByVal sID As String, ByVal userState As Object)
            If (Me.SendBulletinOperationCompleted Is Nothing) Then
                Me.SendBulletinOperationCompleted = AddressOf Me.OnSendBulletinOperationCompleted
            End If
            Me.InvokeAsync("SendBulletin", New Object() {sID}, Me.SendBulletinOperationCompleted, userState)
        End Sub
        
        Private Sub OnSendBulletinOperationCompleted(ByVal arg As Object)
            If (Not (Me.SendBulletinCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SendBulletinCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetBulletin", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetBulletin(ByVal sGroupType As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetBulletin", New Object() {sGroupType})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetBulletinAsync(ByVal sGroupType As String)
            Me.GetBulletinAsync(sGroupType, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetBulletinAsync(ByVal sGroupType As String, ByVal userState As Object)
            If (Me.GetBulletinOperationCompleted Is Nothing) Then
                Me.GetBulletinOperationCompleted = AddressOf Me.OnGetBulletinOperationCompleted
            End If
            Me.InvokeAsync("GetBulletin", New Object() {sGroupType}, Me.GetBulletinOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetBulletinOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetBulletinCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetBulletinCompleted(Me, New GetBulletinCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DeleteBulletin", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub DeleteBulletin(ByVal sBulletinID As String)
            Me.Invoke("DeleteBulletin", New Object() {sBulletinID})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteBulletinAsync(ByVal sBulletinID As String)
            Me.DeleteBulletinAsync(sBulletinID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteBulletinAsync(ByVal sBulletinID As String, ByVal userState As Object)
            If (Me.DeleteBulletinOperationCompleted Is Nothing) Then
                Me.DeleteBulletinOperationCompleted = AddressOf Me.OnDeleteBulletinOperationCompleted
            End If
            Me.InvokeAsync("DeleteBulletin", New Object() {sBulletinID}, Me.DeleteBulletinOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteBulletinOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteBulletinCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteBulletinCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateACDGroups", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub UpdateACDGroups(ByVal sGroupID As String, ByVal sGroupName As String)
            Me.Invoke("UpdateACDGroups", New Object() {sGroupID, sGroupName})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateACDGroupsAsync(ByVal sGroupID As String, ByVal sGroupName As String)
            Me.UpdateACDGroupsAsync(sGroupID, sGroupName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateACDGroupsAsync(ByVal sGroupID As String, ByVal sGroupName As String, ByVal userState As Object)
            If (Me.UpdateACDGroupsOperationCompleted Is Nothing) Then
                Me.UpdateACDGroupsOperationCompleted = AddressOf Me.OnUpdateACDGroupsOperationCompleted
            End If
            Me.InvokeAsync("UpdateACDGroups", New Object() {sGroupID, sGroupName}, Me.UpdateACDGroupsOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateACDGroupsOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateACDGroupsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateACDGroupsCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SetACDGroups", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub SetACDGroups(ByVal sGroupName As String)
            Me.Invoke("SetACDGroups", New Object() {sGroupName})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SetACDGroupsAsync(ByVal sGroupName As String)
            Me.SetACDGroupsAsync(sGroupName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SetACDGroupsAsync(ByVal sGroupName As String, ByVal userState As Object)
            If (Me.SetACDGroupsOperationCompleted Is Nothing) Then
                Me.SetACDGroupsOperationCompleted = AddressOf Me.OnSetACDGroupsOperationCompleted
            End If
            Me.InvokeAsync("SetACDGroups", New Object() {sGroupName}, Me.SetACDGroupsOperationCompleted, userState)
        End Sub
        
        Private Sub OnSetACDGroupsOperationCompleted(ByVal arg As Object)
            If (Not (Me.SetACDGroupsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SetACDGroupsCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DeleteACDGroups", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub DeleteACDGroups(ByVal sGroupID As String)
            Me.Invoke("DeleteACDGroups", New Object() {sGroupID})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteACDGroupsAsync(ByVal sGroupID As String)
            Me.DeleteACDGroupsAsync(sGroupID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteACDGroupsAsync(ByVal sGroupID As String, ByVal userState As Object)
            If (Me.DeleteACDGroupsOperationCompleted Is Nothing) Then
                Me.DeleteACDGroupsOperationCompleted = AddressOf Me.OnDeleteACDGroupsOperationCompleted
            End If
            Me.InvokeAsync("DeleteACDGroups", New Object() {sGroupID}, Me.DeleteACDGroupsOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteACDGroupsOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteACDGroupsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteACDGroupsCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DeleteACDGroups_V2", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub DeleteACDGroups_V2(ByVal sGroupID As String)
            Me.Invoke("DeleteACDGroups_V2", New Object() {sGroupID})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteACDGroups_V2Async(ByVal sGroupID As String)
            Me.DeleteACDGroups_V2Async(sGroupID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteACDGroups_V2Async(ByVal sGroupID As String, ByVal userState As Object)
            If (Me.DeleteACDGroups_V2OperationCompleted Is Nothing) Then
                Me.DeleteACDGroups_V2OperationCompleted = AddressOf Me.OnDeleteACDGroups_V2OperationCompleted
            End If
            Me.InvokeAsync("DeleteACDGroups_V2", New Object() {sGroupID}, Me.DeleteACDGroups_V2OperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteACDGroups_V2OperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteACDGroups_V2CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteACDGroups_V2Completed(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateActivityData", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub UpdateActivityData(ByVal sACDCode As String, ByVal sACDGroup As String, ByVal sCodeName As String, ByVal sCodeSimpleName As String, ByVal sColor As String, ByVal sSort As String, ByVal sTitle As String, ByVal sTitleGroup As String)
            Me.Invoke("UpdateActivityData", New Object() {sACDCode, sACDGroup, sCodeName, sCodeSimpleName, sColor, sSort, sTitle, sTitleGroup})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateActivityDataAsync(ByVal sACDCode As String, ByVal sACDGroup As String, ByVal sCodeName As String, ByVal sCodeSimpleName As String, ByVal sColor As String, ByVal sSort As String, ByVal sTitle As String, ByVal sTitleGroup As String)
            Me.UpdateActivityDataAsync(sACDCode, sACDGroup, sCodeName, sCodeSimpleName, sColor, sSort, sTitle, sTitleGroup, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateActivityDataAsync(ByVal sACDCode As String, ByVal sACDGroup As String, ByVal sCodeName As String, ByVal sCodeSimpleName As String, ByVal sColor As String, ByVal sSort As String, ByVal sTitle As String, ByVal sTitleGroup As String, ByVal userState As Object)
            If (Me.UpdateActivityDataOperationCompleted Is Nothing) Then
                Me.UpdateActivityDataOperationCompleted = AddressOf Me.OnUpdateActivityDataOperationCompleted
            End If
            Me.InvokeAsync("UpdateActivityData", New Object() {sACDCode, sACDGroup, sCodeName, sCodeSimpleName, sColor, sSort, sTitle, sTitleGroup}, Me.UpdateActivityDataOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateActivityDataOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateActivityDataCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateActivityDataCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SetActivityData", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub SetActivityData(ByVal sACDGroup As String, ByVal sCodeName As String, ByVal sCodeSimpleName As String, ByVal sColor As String, ByVal sSort As String, ByVal sTitle As String, ByVal sTitleGroup As String)
            Me.Invoke("SetActivityData", New Object() {sACDGroup, sCodeName, sCodeSimpleName, sColor, sSort, sTitle, sTitleGroup})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SetActivityDataAsync(ByVal sACDGroup As String, ByVal sCodeName As String, ByVal sCodeSimpleName As String, ByVal sColor As String, ByVal sSort As String, ByVal sTitle As String, ByVal sTitleGroup As String)
            Me.SetActivityDataAsync(sACDGroup, sCodeName, sCodeSimpleName, sColor, sSort, sTitle, sTitleGroup, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SetActivityDataAsync(ByVal sACDGroup As String, ByVal sCodeName As String, ByVal sCodeSimpleName As String, ByVal sColor As String, ByVal sSort As String, ByVal sTitle As String, ByVal sTitleGroup As String, ByVal userState As Object)
            If (Me.SetActivityDataOperationCompleted Is Nothing) Then
                Me.SetActivityDataOperationCompleted = AddressOf Me.OnSetActivityDataOperationCompleted
            End If
            Me.InvokeAsync("SetActivityData", New Object() {sACDGroup, sCodeName, sCodeSimpleName, sColor, sSort, sTitle, sTitleGroup}, Me.SetActivityDataOperationCompleted, userState)
        End Sub
        
        Private Sub OnSetActivityDataOperationCompleted(ByVal arg As Object)
            If (Not (Me.SetActivityDataCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SetActivityDataCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DeleteActivityData", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub DeleteActivityData(ByVal sACDCode As String)
            Me.Invoke("DeleteActivityData", New Object() {sACDCode})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteActivityDataAsync(ByVal sACDCode As String)
            Me.DeleteActivityDataAsync(sACDCode, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteActivityDataAsync(ByVal sACDCode As String, ByVal userState As Object)
            If (Me.DeleteActivityDataOperationCompleted Is Nothing) Then
                Me.DeleteActivityDataOperationCompleted = AddressOf Me.OnDeleteActivityDataOperationCompleted
            End If
            Me.InvokeAsync("DeleteActivityData", New Object() {sACDCode}, Me.DeleteActivityDataOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteActivityDataOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteActivityDataCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteActivityDataCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DeleteActivityData_V2", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub DeleteActivityData_V2(ByVal sACDCode As String)
            Me.Invoke("DeleteActivityData_V2", New Object() {sACDCode})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteActivityData_V2Async(ByVal sACDCode As String)
            Me.DeleteActivityData_V2Async(sACDCode, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteActivityData_V2Async(ByVal sACDCode As String, ByVal userState As Object)
            If (Me.DeleteActivityData_V2OperationCompleted Is Nothing) Then
                Me.DeleteActivityData_V2OperationCompleted = AddressOf Me.OnDeleteActivityData_V2OperationCompleted
            End If
            Me.InvokeAsync("DeleteActivityData_V2", New Object() {sACDCode}, Me.DeleteActivityData_V2OperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteActivityData_V2OperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteActivityData_V2CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteActivityData_V2Completed(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateSysFunctionConfig", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub UpdateSysFunctionConfig(ByVal iActiveTime As Integer, ByVal iAuto As Integer, ByVal iAutoClear As Integer, ByVal iCallOffEdit As Integer)
            Me.Invoke("UpdateSysFunctionConfig", New Object() {iActiveTime, iAuto, iAutoClear, iCallOffEdit})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateSysFunctionConfigAsync(ByVal iActiveTime As Integer, ByVal iAuto As Integer, ByVal iAutoClear As Integer, ByVal iCallOffEdit As Integer)
            Me.UpdateSysFunctionConfigAsync(iActiveTime, iAuto, iAutoClear, iCallOffEdit, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateSysFunctionConfigAsync(ByVal iActiveTime As Integer, ByVal iAuto As Integer, ByVal iAutoClear As Integer, ByVal iCallOffEdit As Integer, ByVal userState As Object)
            If (Me.UpdateSysFunctionConfigOperationCompleted Is Nothing) Then
                Me.UpdateSysFunctionConfigOperationCompleted = AddressOf Me.OnUpdateSysFunctionConfigOperationCompleted
            End If
            Me.InvokeAsync("UpdateSysFunctionConfig", New Object() {iActiveTime, iAuto, iAutoClear, iCallOffEdit}, Me.UpdateSysFunctionConfigOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateSysFunctionConfigOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateSysFunctionConfigCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateSysFunctionConfigCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetSysFunctionConfig", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetSysFunctionConfig() As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetSysFunctionConfig", New Object(-1) {})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetSysFunctionConfigAsync()
            Me.GetSysFunctionConfigAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetSysFunctionConfigAsync(ByVal userState As Object)
            If (Me.GetSysFunctionConfigOperationCompleted Is Nothing) Then
                Me.GetSysFunctionConfigOperationCompleted = AddressOf Me.OnGetSysFunctionConfigOperationCompleted
            End If
            Me.InvokeAsync("GetSysFunctionConfig", New Object(-1) {}, Me.GetSysFunctionConfigOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetSysFunctionConfigOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetSysFunctionConfigCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetSysFunctionConfigCompleted(Me, New GetSysFunctionConfigCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetSysTime", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetSysTime() As String
            Dim results() As Object = Me.Invoke("GetSysTime", New Object(-1) {})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetSysTimeAsync()
            Me.GetSysTimeAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetSysTimeAsync(ByVal userState As Object)
            If (Me.GetSysTimeOperationCompleted Is Nothing) Then
                Me.GetSysTimeOperationCompleted = AddressOf Me.OnGetSysTimeOperationCompleted
            End If
            Me.InvokeAsync("GetSysTime", New Object(-1) {}, Me.GetSysTimeOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetSysTimeOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetSysTimeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetSysTimeCompleted(Me, New GetSysTimeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetACDGroupHavePilot", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetACDGroupHavePilot() As String
            Dim results() As Object = Me.Invoke("GetACDGroupHavePilot", New Object(-1) {})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetACDGroupHavePilotAsync()
            Me.GetACDGroupHavePilotAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetACDGroupHavePilotAsync(ByVal userState As Object)
            If (Me.GetACDGroupHavePilotOperationCompleted Is Nothing) Then
                Me.GetACDGroupHavePilotOperationCompleted = AddressOf Me.OnGetACDGroupHavePilotOperationCompleted
            End If
            Me.InvokeAsync("GetACDGroupHavePilot", New Object(-1) {}, Me.GetACDGroupHavePilotOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetACDGroupHavePilotOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetACDGroupHavePilotCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetACDGroupHavePilotCompleted(Me, New GetACDGroupHavePilotCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetAgentConsoleParameter", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetAgentConsoleParameter() As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetAgentConsoleParameter", New Object(-1) {})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetAgentConsoleParameterAsync()
            Me.GetAgentConsoleParameterAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetAgentConsoleParameterAsync(ByVal userState As Object)
            If (Me.GetAgentConsoleParameterOperationCompleted Is Nothing) Then
                Me.GetAgentConsoleParameterOperationCompleted = AddressOf Me.OnGetAgentConsoleParameterOperationCompleted
            End If
            Me.InvokeAsync("GetAgentConsoleParameter", New Object(-1) {}, Me.GetAgentConsoleParameterOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetAgentConsoleParameterOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetAgentConsoleParameterCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetAgentConsoleParameterCompleted(Me, New GetAgentConsoleParameterCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetAgentConsoleParameter_V2", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetAgentConsoleParameter_V2(ByVal sIP As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetAgentConsoleParameter_V2", New Object() {sIP})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetAgentConsoleParameter_V2Async(ByVal sIP As String)
            Me.GetAgentConsoleParameter_V2Async(sIP, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetAgentConsoleParameter_V2Async(ByVal sIP As String, ByVal userState As Object)
            If (Me.GetAgentConsoleParameter_V2OperationCompleted Is Nothing) Then
                Me.GetAgentConsoleParameter_V2OperationCompleted = AddressOf Me.OnGetAgentConsoleParameter_V2OperationCompleted
            End If
            Me.InvokeAsync("GetAgentConsoleParameter_V2", New Object() {sIP}, Me.GetAgentConsoleParameter_V2OperationCompleted, userState)
        End Sub
        
        Private Sub OnGetAgentConsoleParameter_V2OperationCompleted(ByVal arg As Object)
            If (Not (Me.GetAgentConsoleParameter_V2CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetAgentConsoleParameter_V2Completed(Me, New GetAgentConsoleParameter_V2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateAgentConsoleParameter", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub UpdateAgentConsoleParameter( _
                    ByVal SoftPhonePort As String,  _
                    ByVal OtherAPPort As String,  _
                    ByVal LicenceServerIP As String,  _
                    ByVal LicenceServerPort As String,  _
                    ByVal ShowLog As String,  _
                    ByVal SoftPhoneAppPath As String,  _
                    ByVal OpenSoftPhoneApp As String,  _
                    ByVal TopMust As String,  _
                    ByVal SoftPhoneEndCommand As String,  _
                    ByVal ShowTitleForPaperWorkTime As String,  _
                    ByVal WebPaste As String,  _
                    ByVal ShowMutiCusData As String,  _
                    ByVal IEReflashTime As String,  _
                    ByVal DefaultTypeID As String,  _
                    ByVal sCusWebServiceTimeOut As String,  _
                    ByVal AlertPaperWorkTime As String)
            Me.Invoke("UpdateAgentConsoleParameter", New Object() {SoftPhonePort, OtherAPPort, LicenceServerIP, LicenceServerPort, ShowLog, SoftPhoneAppPath, OpenSoftPhoneApp, TopMust, SoftPhoneEndCommand, ShowTitleForPaperWorkTime, WebPaste, ShowMutiCusData, IEReflashTime, DefaultTypeID, sCusWebServiceTimeOut, AlertPaperWorkTime})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateAgentConsoleParameterAsync( _
                    ByVal SoftPhonePort As String,  _
                    ByVal OtherAPPort As String,  _
                    ByVal LicenceServerIP As String,  _
                    ByVal LicenceServerPort As String,  _
                    ByVal ShowLog As String,  _
                    ByVal SoftPhoneAppPath As String,  _
                    ByVal OpenSoftPhoneApp As String,  _
                    ByVal TopMust As String,  _
                    ByVal SoftPhoneEndCommand As String,  _
                    ByVal ShowTitleForPaperWorkTime As String,  _
                    ByVal WebPaste As String,  _
                    ByVal ShowMutiCusData As String,  _
                    ByVal IEReflashTime As String,  _
                    ByVal DefaultTypeID As String,  _
                    ByVal sCusWebServiceTimeOut As String,  _
                    ByVal AlertPaperWorkTime As String)
            Me.UpdateAgentConsoleParameterAsync(SoftPhonePort, OtherAPPort, LicenceServerIP, LicenceServerPort, ShowLog, SoftPhoneAppPath, OpenSoftPhoneApp, TopMust, SoftPhoneEndCommand, ShowTitleForPaperWorkTime, WebPaste, ShowMutiCusData, IEReflashTime, DefaultTypeID, sCusWebServiceTimeOut, AlertPaperWorkTime, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateAgentConsoleParameterAsync( _
                    ByVal SoftPhonePort As String,  _
                    ByVal OtherAPPort As String,  _
                    ByVal LicenceServerIP As String,  _
                    ByVal LicenceServerPort As String,  _
                    ByVal ShowLog As String,  _
                    ByVal SoftPhoneAppPath As String,  _
                    ByVal OpenSoftPhoneApp As String,  _
                    ByVal TopMust As String,  _
                    ByVal SoftPhoneEndCommand As String,  _
                    ByVal ShowTitleForPaperWorkTime As String,  _
                    ByVal WebPaste As String,  _
                    ByVal ShowMutiCusData As String,  _
                    ByVal IEReflashTime As String,  _
                    ByVal DefaultTypeID As String,  _
                    ByVal sCusWebServiceTimeOut As String,  _
                    ByVal AlertPaperWorkTime As String,  _
                    ByVal userState As Object)
            If (Me.UpdateAgentConsoleParameterOperationCompleted Is Nothing) Then
                Me.UpdateAgentConsoleParameterOperationCompleted = AddressOf Me.OnUpdateAgentConsoleParameterOperationCompleted
            End If
            Me.InvokeAsync("UpdateAgentConsoleParameter", New Object() {SoftPhonePort, OtherAPPort, LicenceServerIP, LicenceServerPort, ShowLog, SoftPhoneAppPath, OpenSoftPhoneApp, TopMust, SoftPhoneEndCommand, ShowTitleForPaperWorkTime, WebPaste, ShowMutiCusData, IEReflashTime, DefaultTypeID, sCusWebServiceTimeOut, AlertPaperWorkTime}, Me.UpdateAgentConsoleParameterOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateAgentConsoleParameterOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateAgentConsoleParameterCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateAgentConsoleParameterCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SetIVRActiveLog", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub SetIVRActiveLog(ByVal UserID As String, ByVal Type As String, ByVal Memo As String)
            Me.Invoke("SetIVRActiveLog", New Object() {UserID, Type, Memo})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SetIVRActiveLogAsync(ByVal UserID As String, ByVal Type As String, ByVal Memo As String)
            Me.SetIVRActiveLogAsync(UserID, Type, Memo, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SetIVRActiveLogAsync(ByVal UserID As String, ByVal Type As String, ByVal Memo As String, ByVal userState As Object)
            If (Me.SetIVRActiveLogOperationCompleted Is Nothing) Then
                Me.SetIVRActiveLogOperationCompleted = AddressOf Me.OnSetIVRActiveLogOperationCompleted
            End If
            Me.InvokeAsync("SetIVRActiveLog", New Object() {UserID, Type, Memo}, Me.SetIVRActiveLogOperationCompleted, userState)
        End Sub
        
        Private Sub OnSetIVRActiveLogOperationCompleted(ByVal arg As Object)
            If (Not (Me.SetIVRActiveLogCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SetIVRActiveLogCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetMenuListByGroupIDs", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetMenuListByGroupIDs(ByVal GroupIDs As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetMenuListByGroupIDs", New Object() {GroupIDs})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetMenuListByGroupIDsAsync(ByVal GroupIDs As String)
            Me.GetMenuListByGroupIDsAsync(GroupIDs, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetMenuListByGroupIDsAsync(ByVal GroupIDs As String, ByVal userState As Object)
            If (Me.GetMenuListByGroupIDsOperationCompleted Is Nothing) Then
                Me.GetMenuListByGroupIDsOperationCompleted = AddressOf Me.OnGetMenuListByGroupIDsOperationCompleted
            End If
            Me.InvokeAsync("GetMenuListByGroupIDs", New Object() {GroupIDs}, Me.GetMenuListByGroupIDsOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetMenuListByGroupIDsOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetMenuListByGroupIDsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetMenuListByGroupIDsCompleted(Me, New GetMenuListByGroupIDsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetGroupListByUserID", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetGroupListByUserID(ByVal UserID As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetGroupListByUserID", New Object() {UserID})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetGroupListByUserIDAsync(ByVal UserID As String)
            Me.GetGroupListByUserIDAsync(UserID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetGroupListByUserIDAsync(ByVal UserID As String, ByVal userState As Object)
            If (Me.GetGroupListByUserIDOperationCompleted Is Nothing) Then
                Me.GetGroupListByUserIDOperationCompleted = AddressOf Me.OnGetGroupListByUserIDOperationCompleted
            End If
            Me.InvokeAsync("GetGroupListByUserID", New Object() {UserID}, Me.GetGroupListByUserIDOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetGroupListByUserIDOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetGroupListByUserIDCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetGroupListByUserIDCompleted(Me, New GetGroupListByUserIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetMenuList", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetMenuList() As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetMenuList", New Object(-1) {})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetMenuListAsync()
            Me.GetMenuListAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetMenuListAsync(ByVal userState As Object)
            If (Me.GetMenuListOperationCompleted Is Nothing) Then
                Me.GetMenuListOperationCompleted = AddressOf Me.OnGetMenuListOperationCompleted
            End If
            Me.InvokeAsync("GetMenuList", New Object(-1) {}, Me.GetMenuListOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetMenuListOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetMenuListCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetMenuListCompleted(Me, New GetMenuListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SetSecuritySetting", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub SetSecuritySetting(ByVal GroupID As String, ByVal MenuID As String)
            Me.Invoke("SetSecuritySetting", New Object() {GroupID, MenuID})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SetSecuritySettingAsync(ByVal GroupID As String, ByVal MenuID As String)
            Me.SetSecuritySettingAsync(GroupID, MenuID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SetSecuritySettingAsync(ByVal GroupID As String, ByVal MenuID As String, ByVal userState As Object)
            If (Me.SetSecuritySettingOperationCompleted Is Nothing) Then
                Me.SetSecuritySettingOperationCompleted = AddressOf Me.OnSetSecuritySettingOperationCompleted
            End If
            Me.InvokeAsync("SetSecuritySetting", New Object() {GroupID, MenuID}, Me.SetSecuritySettingOperationCompleted, userState)
        End Sub
        
        Private Sub OnSetSecuritySettingOperationCompleted(ByVal arg As Object)
            If (Not (Me.SetSecuritySettingCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SetSecuritySettingCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetSecuritySetting", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetSecuritySetting(ByVal GroupID As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetSecuritySetting", New Object() {GroupID})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetSecuritySettingAsync(ByVal GroupID As String)
            Me.GetSecuritySettingAsync(GroupID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetSecuritySettingAsync(ByVal GroupID As String, ByVal userState As Object)
            If (Me.GetSecuritySettingOperationCompleted Is Nothing) Then
                Me.GetSecuritySettingOperationCompleted = AddressOf Me.OnGetSecuritySettingOperationCompleted
            End If
            Me.InvokeAsync("GetSecuritySetting", New Object() {GroupID}, Me.GetSecuritySettingOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetSecuritySettingOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetSecuritySettingCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetSecuritySettingCompleted(Me, New GetSecuritySettingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DeleteSecuritySetting", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub DeleteSecuritySetting(ByVal GroupID As String)
            Me.Invoke("DeleteSecuritySetting", New Object() {GroupID})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteSecuritySettingAsync(ByVal GroupID As String)
            Me.DeleteSecuritySettingAsync(GroupID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteSecuritySettingAsync(ByVal GroupID As String, ByVal userState As Object)
            If (Me.DeleteSecuritySettingOperationCompleted Is Nothing) Then
                Me.DeleteSecuritySettingOperationCompleted = AddressOf Me.OnDeleteSecuritySettingOperationCompleted
            End If
            Me.InvokeAsync("DeleteSecuritySetting", New Object() {GroupID}, Me.DeleteSecuritySettingOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteSecuritySettingOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteSecuritySettingCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteSecuritySettingCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetUserGroupAll", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetUserGroupAll() As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetUserGroupAll", New Object(-1) {})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetUserGroupAllAsync()
            Me.GetUserGroupAllAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetUserGroupAllAsync(ByVal userState As Object)
            If (Me.GetUserGroupAllOperationCompleted Is Nothing) Then
                Me.GetUserGroupAllOperationCompleted = AddressOf Me.OnGetUserGroupAllOperationCompleted
            End If
            Me.InvokeAsync("GetUserGroupAll", New Object(-1) {}, Me.GetUserGroupAllOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetUserGroupAllOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetUserGroupAllCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetUserGroupAllCompleted(Me, New GetUserGroupAllCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetUserGroupByName", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetUserGroupByName(ByVal GroupName As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetUserGroupByName", New Object() {GroupName})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetUserGroupByNameAsync(ByVal GroupName As String)
            Me.GetUserGroupByNameAsync(GroupName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetUserGroupByNameAsync(ByVal GroupName As String, ByVal userState As Object)
            If (Me.GetUserGroupByNameOperationCompleted Is Nothing) Then
                Me.GetUserGroupByNameOperationCompleted = AddressOf Me.OnGetUserGroupByNameOperationCompleted
            End If
            Me.InvokeAsync("GetUserGroupByName", New Object() {GroupName}, Me.GetUserGroupByNameOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetUserGroupByNameOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetUserGroupByNameCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetUserGroupByNameCompleted(Me, New GetUserGroupByNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        Public Shadows Sub CancelAsync(ByVal userState As Object)
            MyBase.CancelAsync(userState)
        End Sub
        
        Private Function IsLocalFileSystemWebService(ByVal url As String) As Boolean
            If ((url Is Nothing)  _
                        OrElse (url Is String.Empty)) Then
                Return false
            End If
            Dim wsUri As System.Uri = New System.Uri(url)
            If ((wsUri.Port >= 1024)  _
                        AndAlso (String.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) = 0)) Then
                Return true
            End If
            Return false
        End Function
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub GetDRSFilePathCompletedEventHandler(ByVal sender As Object, ByVal e As GetDRSFilePathCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetDRSFilePathCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub GetUserGroupByIDCompletedEventHandler(ByVal sender As Object, ByVal e As GetUserGroupByIDCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetUserGroupByIDCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub GetUserListByGroupIDCompletedEventHandler(ByVal sender As Object, ByVal e As GetUserListByGroupIDCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetUserListByGroupIDCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub SetUserGroupCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub SetUserIntoGroupCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub SetUserRemoveGroupCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub UpdateGroupCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub DeleteGroupByIDCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub DeleteGroupByNameCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub GetUserAccountAllCompletedEventHandler(ByVal sender As Object, ByVal e As GetUserAccountAllCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetUserAccountAllCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub GetUserAccountAllHaveGroupCompletedEventHandler(ByVal sender As Object, ByVal e As GetUserAccountAllHaveGroupCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetUserAccountAllHaveGroupCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub GetUserAccountCompletedEventHandler(ByVal sender As Object, ByVal e As GetUserAccountCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetUserAccountCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub UpdateUserAccountCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub UpdateUserAccountHaveGroupCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub DeleteUserAccountCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub SetUserAccountCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub SetUserAccountHaveGroupCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub GetCurrentVerCompletedEventHandler(ByVal sender As Object, ByVal e As GetCurrentVerCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetCurrentVerCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub UpdateProcessInfoCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateProcessInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateProcessInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub GetUnioninsCustomerTitleCompletedEventHandler(ByVal sender As Object, ByVal e As GetUnioninsCustomerTitleCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetUnioninsCustomerTitleCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub GetCustomerIDListCompletedEventHandler(ByVal sender As Object, ByVal e As GetCustomerIDListCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetCustomerIDListCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub ChkIndemCompletedEventHandler(ByVal sender As Object, ByVal e As ChkIndemCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ChkIndemCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub AddRecordCompletedEventHandler(ByVal sender As Object, ByVal e As AddRecordCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddRecordCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub GetTri_Hospital_CustomerExistCompletedEventHandler(ByVal sender As Object, ByVal e As GetTri_Hospital_CustomerExistCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetTri_Hospital_CustomerExistCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub GetTri_Hospital_ScheduleCompletedEventHandler(ByVal sender As Object, ByVal e As GetTri_Hospital_ScheduleCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetTri_Hospital_ScheduleCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub GetTri_Hospital_RegCompletedEventHandler(ByVal sender As Object, ByVal e As GetTri_Hospital_RegCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetTri_Hospital_RegCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub OutPreViewCompletedEventHandler(ByVal sender As Object, ByVal e As OutPreViewCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class OutPreViewCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub GetTestCompletedEventHandler(ByVal sender As Object, ByVal e As GetTestCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetTestCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub GetWebServiceMethodCompletedEventHandler(ByVal sender As Object, ByVal e As GetWebServiceMethodCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetWebServiceMethodCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub GetWebServiceDataCompletedEventHandler(ByVal sender As Object, ByVal e As GetWebServiceDataCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetWebServiceDataCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub GetBlackCustomerListCompletedEventHandler(ByVal sender As Object, ByVal e As GetBlackCustomerListCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetBlackCustomerListCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub SetBlackCustomerListCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub DeleteBlackCustomerListCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub UpdateBlackCustomerListCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub GetWaitListCompletedEventHandler(ByVal sender As Object, ByVal e As GetWaitListCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetWaitListCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub SetWaitListCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub DeleteWaitListCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub UpdateWaitListCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub GetSMemoCompletedEventHandler(ByVal sender As Object, ByVal e As GetSMemoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetSMemoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub GetSMemoAllCompletedEventHandler(ByVal sender As Object, ByVal e As GetSMemoAllCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetSMemoAllCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub UpdateSMemoCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub SetSMemoCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub GetBulletinWebCompletedEventHandler(ByVal sender As Object, ByVal e As GetBulletinWebCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetBulletinWebCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub SetBulletinWebCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub DeleteBulletinWebCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub UpdateBulletinWebCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub QueryWebDataPasteCompletedEventHandler(ByVal sender As Object, ByVal e As QueryWebDataPasteCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class QueryWebDataPasteCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub QueryWebDataPasteByIDCompletedEventHandler(ByVal sender As Object, ByVal e As QueryWebDataPasteByIDCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class QueryWebDataPasteByIDCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub QueryWebDataPasteByURLCompletedEventHandler(ByVal sender As Object, ByVal e As QueryWebDataPasteByURLCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class QueryWebDataPasteByURLCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub AddWebDataPasteCompletedEventHandler(ByVal sender As Object, ByVal e As AddWebDataPasteCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddWebDataPasteCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub ModifyWebDataPasteBaseCompletedEventHandler(ByVal sender As Object, ByVal e As ModifyWebDataPasteBaseCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ModifyWebDataPasteBaseCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub ModifyWebDataPasteDataLinkCompletedEventHandler(ByVal sender As Object, ByVal e As ModifyWebDataPasteDataLinkCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ModifyWebDataPasteDataLinkCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub DeleteWebDataPasteCompletedEventHandler(ByVal sender As Object, ByVal e As DeleteWebDataPasteCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DeleteWebDataPasteCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub GetHondaDataCompletedEventHandler(ByVal sender As Object, ByVal e As GetHondaDataCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetHondaDataCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub Insert_IVR_ReportCompletedEventHandler(ByVal sender As Object, ByVal e As Insert_IVR_ReportCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class Insert_IVR_ReportCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub Insert_IVR_Report_V2CompletedEventHandler(ByVal sender As Object, ByVal e As Insert_IVR_Report_V2CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class Insert_IVR_Report_V2CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub Insert_IVR_Report_V4CompletedEventHandler(ByVal sender As Object, ByVal e As Insert_IVR_Report_V4CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class Insert_IVR_Report_V4CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub Insert_IVR_Report_V3CompletedEventHandler(ByVal sender As Object, ByVal e As Insert_IVR_Report_V3CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class Insert_IVR_Report_V3CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub Insert_IVR_Report_V5CompletedEventHandler(ByVal sender As Object, ByVal e As Insert_IVR_Report_V5CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class Insert_IVR_Report_V5CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub Find_IVR_Report_By_PIDCompletedEventHandler(ByVal sender As Object, ByVal e As Find_IVR_Report_By_PIDCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class Find_IVR_Report_By_PIDCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub Check_IVR_Report_TableCompletedEventHandler(ByVal sender As Object, ByVal e As Check_IVR_Report_TableCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class Check_IVR_Report_TableCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub Get_IVR_CalCOuntCompletedEventHandler(ByVal sender As Object, ByVal e As Get_IVR_CalCOuntCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class Get_IVR_CalCOuntCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub Insert_InfoFOD_CRM_Activity_InfoCompletedEventHandler(ByVal sender As Object, ByVal e As Insert_InfoFOD_CRM_Activity_InfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class Insert_InfoFOD_CRM_Activity_InfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub Update_InfoFOD_CRM_Activity_InfoCompletedEventHandler(ByVal sender As Object, ByVal e As Update_InfoFOD_CRM_Activity_InfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class Update_InfoFOD_CRM_Activity_InfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub GetFaxRecCompletedEventHandler(ByVal sender As Object, ByVal e As GetFaxRecCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetFaxRecCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub InsetFaxRecCompletedEventHandler(ByVal sender As Object, ByVal e As InsetFaxRecCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class InsetFaxRecCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub UpdateFaxRecCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateFaxRecCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateFaxRecCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub Insert_Content_ReportCompletedEventHandler(ByVal sender As Object, ByVal e As Insert_Content_ReportCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class Insert_Content_ReportCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub Check_Content_Report_TableCompletedEventHandler(ByVal sender As Object, ByVal e As Check_Content_Report_TableCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class Check_Content_Report_TableCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub Insert_EmployeeMappingCompletedEventHandler(ByVal sender As Object, ByVal e As Insert_EmployeeMappingCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class Insert_EmployeeMappingCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub GetEmployeeMappingCompletedEventHandler(ByVal sender As Object, ByVal e As GetEmployeeMappingCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetEmployeeMappingCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub GetOutsourcingFlagCompletedEventHandler(ByVal sender As Object, ByVal e As GetOutsourcingFlagCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetOutsourcingFlagCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub SetOutsourcingFlagCompletedEventHandler(ByVal sender As Object, ByVal e As SetOutsourcingFlagCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SetOutsourcingFlagCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub SetOutsourcingLogCompletedEventHandler(ByVal sender As Object, ByVal e As SetOutsourcingLogCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SetOutsourcingLogCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub GetOutsourcingDefineCompletedEventHandler(ByVal sender As Object, ByVal e As GetOutsourcingDefineCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetOutsourcingDefineCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub InfoCenter_ExecSQLCompletedEventHandler(ByVal sender As Object, ByVal e As InfoCenter_ExecSQLCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class InfoCenter_ExecSQLCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub InfoCenter_GetDatasetBySQLCompletedEventHandler(ByVal sender As Object, ByVal e As InfoCenter_GetDatasetBySQLCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class InfoCenter_GetDatasetBySQLCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub InfoDRS_ExecSQLCompletedEventHandler(ByVal sender As Object, ByVal e As InfoDRS_ExecSQLCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class InfoDRS_ExecSQLCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub InfoDRS_GetDatasetBySQLCompletedEventHandler(ByVal sender As Object, ByVal e As InfoDRS_GetDatasetBySQLCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class InfoDRS_GetDatasetBySQLCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub Get_1TV_OutBound_DataCompletedEventHandler(ByVal sender As Object, ByVal e As Get_1TV_OutBound_DataCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class Get_1TV_OutBound_DataCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub GetQuestionCountCompletedEventHandler(ByVal sender As Object, ByVal e As GetQuestionCountCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetQuestionCountCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub InfoACD_GetDatasetBySQLCompletedEventHandler(ByVal sender As Object, ByVal e As InfoACD_GetDatasetBySQLCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class InfoACD_GetDatasetBySQLCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub InfoCenter_GetReasonListCompletedEventHandler(ByVal sender As Object, ByVal e As InfoCenter_GetReasonListCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class InfoCenter_GetReasonListCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub InfoInBox_ExecSQLCompletedEventHandler(ByVal sender As Object, ByVal e As InfoInBox_ExecSQLCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class InfoInBox_ExecSQLCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub InfoInBox_GetDatasetBySQLCompletedEventHandler(ByVal sender As Object, ByVal e As InfoInBox_GetDatasetBySQLCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class InfoInBox_GetDatasetBySQLCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub InfoTM_ExecSQLCompletedEventHandler(ByVal sender As Object, ByVal e As InfoTM_ExecSQLCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class InfoTM_ExecSQLCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub InfoTM_GetDatasetBySQLCompletedEventHandler(ByVal sender As Object, ByVal e As InfoTM_GetDatasetBySQLCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class InfoTM_GetDatasetBySQLCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub InfoTM_GetDatasetCompletedEventHandler(ByVal sender As Object, ByVal e As InfoTM_GetDatasetCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class InfoTM_GetDatasetCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub CreateCookiesCompletedEventHandler(ByVal sender As Object, ByVal e As CreateCookiesCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CreateCookiesCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub ClearCookiesCompletedEventHandler(ByVal sender As Object, ByVal e As ClearCookiesCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ClearCookiesCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub GetCookiesCompletedEventHandler(ByVal sender As Object, ByVal e As GetCookiesCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetCookiesCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub Incenter_GetDatasetBySQLCompletedEventHandler(ByVal sender As Object, ByVal e As Incenter_GetDatasetBySQLCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class Incenter_GetDatasetBySQLCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub First_GetCustomer_BranchCompletedEventHandler(ByVal sender As Object, ByVal e As First_GetCustomer_BranchCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class First_GetCustomer_BranchCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub First_GetStatusCompletedEventHandler(ByVal sender As Object, ByVal e As First_GetStatusCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class First_GetStatusCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub GetStatus_AllCompletedEventHandler(ByVal sender As Object, ByVal e As GetStatus_AllCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetStatus_AllCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub First_InsertInboundCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub GetCallInfoCompletedEventHandler(ByVal sender As Object, ByVal e As GetCallInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetCallInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub DeleteCallInfoCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub GetMuitCallInfoCompletedEventHandler(ByVal sender As Object, ByVal e As GetMuitCallInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetMuitCallInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub GetTalkInfoCompletedEventHandler(ByVal sender As Object, ByVal e As GetTalkInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetTalkInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub GetTalkInfo_V2CompletedEventHandler(ByVal sender As Object, ByVal e As GetTalkInfo_V2CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetTalkInfo_V2CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub GetTalkConfigCompletedEventHandler(ByVal sender As Object, ByVal e As GetTalkConfigCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetTalkConfigCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub SetTalkInfoCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub UpdateTalkInfoCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub DeleteTalkInfoCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub SetTalkConfigCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub UpdateTalkConfigCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub DeleteTalkConfigCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub GetDetailCusDataCompletedEventHandler(ByVal sender As Object, ByVal e As GetDetailCusDataCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetDetailCusDataCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub GetSelectCusDataCompletedEventHandler(ByVal sender As Object, ByVal e As GetSelectCusDataCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetSelectCusDataCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub GetSelectCusData_V2CompletedEventHandler(ByVal sender As Object, ByVal e As GetSelectCusData_V2CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetSelectCusData_V2CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub GetActivityDataListCompletedEventHandler(ByVal sender As Object, ByVal e As GetActivityDataListCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetActivityDataListCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub GetActivityDataList_V2CompletedEventHandler(ByVal sender As Object, ByVal e As GetActivityDataList_V2CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetActivityDataList_V2CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub GetActivityDataListAllCompletedEventHandler(ByVal sender As Object, ByVal e As GetActivityDataListAllCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetActivityDataListAllCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub GetACDGroupsCompletedEventHandler(ByVal sender As Object, ByVal e As GetACDGroupsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetACDGroupsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub GetACDGroups_V2CompletedEventHandler(ByVal sender As Object, ByVal e As GetACDGroups_V2CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetACDGroups_V2CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub GetACDGroups_V3CompletedEventHandler(ByVal sender As Object, ByVal e As GetACDGroups_V3CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetACDGroups_V3CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub GetSysConfigCompletedEventHandler(ByVal sender As Object, ByVal e As GetSysConfigCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetSysConfigCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub SetSysConfigCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub UpdateSysConfigCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub SetCallInfoCompletedEventHandler(ByVal sender As Object, ByVal e As SetCallInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SetCallInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub ReSetCallInfoCompletedEventHandler(ByVal sender As Object, ByVal e As ReSetCallInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ReSetCallInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub GetNewIDCompletedEventHandler(ByVal sender As Object, ByVal e As GetNewIDCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetNewIDCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub UpdateCallInfoCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateCallInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateCallInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub GetCallLogCompletedEventHandler(ByVal sender As Object, ByVal e As GetCallLogCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetCallLogCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub GetCallLogByDatakeyCompletedEventHandler(ByVal sender As Object, ByVal e As GetCallLogByDatakeyCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetCallLogByDatakeyCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub GetCallLogByPhoneCompletedEventHandler(ByVal sender As Object, ByVal e As GetCallLogByPhoneCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetCallLogByPhoneCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub GetCallLogByTKIDCompletedEventHandler(ByVal sender As Object, ByVal e As GetCallLogByTKIDCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetCallLogByTKIDCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub GetCallLogByTKID_V2CompletedEventHandler(ByVal sender As Object, ByVal e As GetCallLogByTKID_V2CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetCallLogByTKID_V2CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub SetCallLog_V3CompletedEventHandler(ByVal sender As Object, ByVal e As SetCallLog_V3CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SetCallLog_V3CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub UpdateCallLogCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateCallLogCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateCallLogCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub UpdateCallLog_V3CompletedEventHandler(ByVal sender As Object, ByVal e As UpdateCallLog_V3CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateCallLog_V3CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub Eten_GetCusData_ByPIDCompletedEventHandler(ByVal sender As Object, ByVal e As Eten_GetCusData_ByPIDCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class Eten_GetCusData_ByPIDCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub Eten_GetCusData_ByCusIDCompletedEventHandler(ByVal sender As Object, ByVal e As Eten_GetCusData_ByCusIDCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class Eten_GetCusData_ByCusIDCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub Eten_GetDatasetBySQLCompletedEventHandler(ByVal sender As Object, ByVal e As Eten_GetDatasetBySQLCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class Eten_GetDatasetBySQLCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub Eten_ExecSQLCompletedEventHandler(ByVal sender As Object, ByVal e As Eten_ExecSQLCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class Eten_ExecSQLCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub Eten_ExecSPCompletedEventHandler(ByVal sender As Object, ByVal e As Eten_ExecSPCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class Eten_ExecSPCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub Eten_GetProductData_ByCusIDCompletedEventHandler(ByVal sender As Object, ByVal e As Eten_GetProductData_ByCusIDCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class Eten_GetProductData_ByCusIDCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub Eten_GetLog_ByProductIDCompletedEventHandler(ByVal sender As Object, ByVal e As Eten_GetLog_ByProductIDCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class Eten_GetLog_ByProductIDCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub Eten_GetLog_ByCusIDCompletedEventHandler(ByVal sender As Object, ByVal e As Eten_GetLog_ByCusIDCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class Eten_GetLog_ByCusIDCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub Eten_GetLog_ByOldDataCompletedEventHandler(ByVal sender As Object, ByVal e As Eten_GetLog_ByOldDataCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class Eten_GetLog_ByOldDataCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub Eten_GetAccounting_DetailCompletedEventHandler(ByVal sender As Object, ByVal e As Eten_GetAccounting_DetailCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class Eten_GetAccounting_DetailCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub Eten_GetAccounting_ListCompletedEventHandler(ByVal sender As Object, ByVal e As Eten_GetAccounting_ListCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class Eten_GetAccounting_ListCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub Eten_GetLastTransactionCompletedEventHandler(ByVal sender As Object, ByVal e As Eten_GetLastTransactionCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class Eten_GetLastTransactionCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub Eten_GetProductTypeCompletedEventHandler(ByVal sender As Object, ByVal e As Eten_GetProductTypeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class Eten_GetProductTypeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub Eten_GetAgentMappingCompletedEventHandler(ByVal sender As Object, ByVal e As Eten_GetAgentMappingCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class Eten_GetAgentMappingCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub Eten_GetCalllogCompletedEventHandler(ByVal sender As Object, ByVal e As Eten_GetCalllogCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class Eten_GetCalllogCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub Eten_UpdateCusTableCompletedEventHandler(ByVal sender As Object, ByVal e As Eten_UpdateCusTableCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class Eten_UpdateCusTableCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub SetCallLog_etenCompletedEventHandler(ByVal sender As Object, ByVal e As SetCallLog_etenCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SetCallLog_etenCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub UpdateCallLog_etenCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateCallLog_etenCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateCallLog_etenCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub DeleteCallLogCompletedEventHandler(ByVal sender As Object, ByVal e As DeleteCallLogCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DeleteCallLogCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub SetCallLog_V2CompletedEventHandler(ByVal sender As Object, ByVal e As SetCallLog_V2CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SetCallLog_V2CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub SetCallLogCompletedEventHandler(ByVal sender As Object, ByVal e As SetCallLogCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SetCallLogCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub SetCallLog_TKCompletedEventHandler(ByVal sender As Object, ByVal e As SetCallLog_TKCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SetCallLog_TKCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub SetCallLog_TK_V2CompletedEventHandler(ByVal sender As Object, ByVal e As SetCallLog_TK_V2CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SetCallLog_TK_V2CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub SetCallLog_TK_V4CompletedEventHandler(ByVal sender As Object, ByVal e As SetCallLog_TK_V4CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SetCallLog_TK_V4CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub SetCallLog_TK_V3CompletedEventHandler(ByVal sender As Object, ByVal e As SetCallLog_TK_V3CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SetCallLog_TK_V3CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub SetCallLog_TK_AlertMemoCompletedEventHandler(ByVal sender As Object, ByVal e As SetCallLog_TK_AlertMemoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SetCallLog_TK_AlertMemoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub SetCallLog_TK_AlertMemo2CompletedEventHandler(ByVal sender As Object, ByVal e As SetCallLog_TK_AlertMemo2CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SetCallLog_TK_AlertMemo2CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub SetCallLog_TK_AlertMemo_URLCompletedEventHandler(ByVal sender As Object, ByVal e As SetCallLog_TK_AlertMemo_URLCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SetCallLog_TK_AlertMemo_URLCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub GetAllTableCompletedEventHandler(ByVal sender As Object, ByVal e As GetAllTableCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetAllTableCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub CheckInfoCenterTableCompletedEventHandler(ByVal sender As Object, ByVal e As CheckInfoCenterTableCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CheckInfoCenterTableCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub GetAllcolumns_V2CompletedEventHandler(ByVal sender As Object, ByVal e As GetAllcolumns_V2CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetAllcolumns_V2CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub GetAllcolumnsCompletedEventHandler(ByVal sender As Object, ByVal e As GetAllcolumnsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetAllcolumnsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub CreateCustTypeViewCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub GetDataCountCompletedEventHandler(ByVal sender As Object, ByVal e As GetDataCountCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetDataCountCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub GetInfoContantCompletedEventHandler(ByVal sender As Object, ByVal e As GetInfoContantCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetInfoContantCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub GetLinkValueCompletedEventHandler(ByVal sender As Object, ByVal e As GetLinkValueCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetLinkValueCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub SetInfoContantCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub UpdateInfoContantCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub DeleteInfoContantCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub GetViewAllColumnsCompletedEventHandler(ByVal sender As Object, ByVal e As GetViewAllColumnsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetViewAllColumnsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub GetSMsgCompletedEventHandler(ByVal sender As Object, ByVal e As GetSMsgCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetSMsgCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub SetSMsgCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub UpdateSMsgCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub GetMsgCompletedEventHandler(ByVal sender As Object, ByVal e As GetMsgCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetMsgCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub DeleteSMsgCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub SetMsgCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub UpdateMsgCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub UpdateMsgSortCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub DeleteMsgCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub GetSMemo_V2CompletedEventHandler(ByVal sender As Object, ByVal e As GetSMemo_V2CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetSMemo_V2CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub GetCustomerLevelBaseCompletedEventHandler(ByVal sender As Object, ByVal e As GetCustomerLevelBaseCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetCustomerLevelBaseCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub GetCustomerLevelCompletedEventHandler(ByVal sender As Object, ByVal e As GetCustomerLevelCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetCustomerLevelCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub GetCustomerDataCompletedEventHandler(ByVal sender As Object, ByVal e As GetCustomerDataCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetCustomerDataCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub GetCustomerLevelTSMCCompletedEventHandler(ByVal sender As Object, ByVal e As GetCustomerLevelTSMCCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetCustomerLevelTSMCCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub SetBulletinCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub UpdateBulletinCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub SendBulletinCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub GetBulletinCompletedEventHandler(ByVal sender As Object, ByVal e As GetBulletinCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetBulletinCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub DeleteBulletinCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub UpdateACDGroupsCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub SetACDGroupsCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub DeleteACDGroupsCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub DeleteACDGroups_V2CompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub UpdateActivityDataCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub SetActivityDataCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub DeleteActivityDataCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub DeleteActivityData_V2CompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub UpdateSysFunctionConfigCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub GetSysFunctionConfigCompletedEventHandler(ByVal sender As Object, ByVal e As GetSysFunctionConfigCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetSysFunctionConfigCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub GetSysTimeCompletedEventHandler(ByVal sender As Object, ByVal e As GetSysTimeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetSysTimeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub GetACDGroupHavePilotCompletedEventHandler(ByVal sender As Object, ByVal e As GetACDGroupHavePilotCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetACDGroupHavePilotCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub GetAgentConsoleParameterCompletedEventHandler(ByVal sender As Object, ByVal e As GetAgentConsoleParameterCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetAgentConsoleParameterCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub GetAgentConsoleParameter_V2CompletedEventHandler(ByVal sender As Object, ByVal e As GetAgentConsoleParameter_V2CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetAgentConsoleParameter_V2CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub UpdateAgentConsoleParameterCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub SetIVRActiveLogCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub GetMenuListByGroupIDsCompletedEventHandler(ByVal sender As Object, ByVal e As GetMenuListByGroupIDsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetMenuListByGroupIDsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub GetGroupListByUserIDCompletedEventHandler(ByVal sender As Object, ByVal e As GetGroupListByUserIDCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetGroupListByUserIDCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub GetMenuListCompletedEventHandler(ByVal sender As Object, ByVal e As GetMenuListCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetMenuListCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub SetSecuritySettingCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub GetSecuritySettingCompletedEventHandler(ByVal sender As Object, ByVal e As GetSecuritySettingCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetSecuritySettingCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub DeleteSecuritySettingCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub GetUserGroupAllCompletedEventHandler(ByVal sender As Object, ByVal e As GetUserGroupAllCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetUserGroupAllCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub GetUserGroupByNameCompletedEventHandler(ByVal sender As Object, ByVal e As GetUserGroupByNameCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetUserGroupByNameCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
End Namespace
